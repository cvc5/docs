Search.setIndex({"docnames": ["api/api", "api/cpp/command", "api/cpp/cpp", "api/cpp/datatype", "api/cpp/datatypeconstructor", "api/cpp/datatypeconstructordecl", "api/cpp/datatypedecl", "api/cpp/datatypeselector", "api/cpp/driveroptions", "api/cpp/exceptions", "api/cpp/grammar", "api/cpp/inputparser", "api/cpp/kind", "api/cpp/modes", "api/cpp/op", "api/cpp/optioninfo", "api/cpp/parserexception", "api/cpp/quickstart", "api/cpp/result", "api/cpp/roundingmode", "api/cpp/solver", "api/cpp/sort", "api/cpp/sortkind", "api/cpp/statistics", "api/cpp/symbolmanager", "api/cpp/synthresult", "api/cpp/term", "api/cpp/unknownexplanation", "api/java/index", "api/java/java", "api/java/quickstart", "api/python/base/datatype", "api/python/base/datatypeconstructor", "api/python/base/datatypeconstructordecl", "api/python/base/datatypedecl", "api/python/base/datatypeselector", "api/python/base/grammar", "api/python/base/kind", "api/python/base/op", "api/python/base/proofrule", "api/python/base/python", "api/python/base/quickstart", "api/python/base/result", "api/python/base/roundingmode", "api/python/base/solver", "api/python/base/sort", "api/python/base/statistics", "api/python/base/synthresult", "api/python/base/term", "api/python/base/unknownexplanation", "api/python/python", "api/python/pythonic/arith", "api/python/pythonic/array", "api/python/pythonic/bitvec", "api/python/pythonic/boolean", "api/python/pythonic/dt", "api/python/pythonic/finite_field", "api/python/pythonic/fp", "api/python/pythonic/internals", "api/python/pythonic/pythonic", "api/python/pythonic/quant", "api/python/pythonic/quickstart", "api/python/pythonic/set", "api/python/pythonic/solver", "binary/binary", "binary/quickstart", "examples/bags", "examples/bitvectors", "examples/bitvectors_and_arrays", "examples/combination", "examples/datatypes", "examples/examples", "examples/exceptions", "examples/extract", "examples/finite_field", "examples/floatingpoint", "examples/helloworld", "examples/lineararith", "examples/parser", "examples/parser_sym_manager", "examples/quickstart", "examples/relations", "examples/sequences", "examples/sets", "examples/strings", "examples/sygus-fun", "examples/sygus-inv", "genindex", "index", "installation/installation", "options", "output-tags", "proofs/output_alethe", "proofs/output_alf", "proofs/output_dot", "proofs/output_lfsc", "proofs/proof_rules", "proofs/proofs", "references", "resource-limits", "statistics", "theories/bags", "theories/datatypes", "theories/finite_field", "theories/separation-logic", "theories/sequences", "theories/sets-and-relations", "theories/strings", "theories/theories", "theories/transcendentals"], "filenames": ["api/api.rst", "api/cpp/command.rst", "api/cpp/cpp.rst", "api/cpp/datatype.rst", "api/cpp/datatypeconstructor.rst", "api/cpp/datatypeconstructordecl.rst", "api/cpp/datatypedecl.rst", "api/cpp/datatypeselector.rst", "api/cpp/driveroptions.rst", "api/cpp/exceptions.rst", "api/cpp/grammar.rst", "api/cpp/inputparser.rst", "api/cpp/kind.rst", "api/cpp/modes.rst", "api/cpp/op.rst", "api/cpp/optioninfo.rst", "api/cpp/parserexception.rst", "api/cpp/quickstart.rst", "api/cpp/result.rst", "api/cpp/roundingmode.rst", "api/cpp/solver.rst", "api/cpp/sort.rst", "api/cpp/sortkind.rst", "api/cpp/statistics.rst", "api/cpp/symbolmanager.rst", "api/cpp/synthresult.rst", "api/cpp/term.rst", "api/cpp/unknownexplanation.rst", "api/java/index.rst", "api/java/java.rst", "api/java/quickstart.rst", "api/python/base/datatype.rst", "api/python/base/datatypeconstructor.rst", "api/python/base/datatypeconstructordecl.rst", "api/python/base/datatypedecl.rst", "api/python/base/datatypeselector.rst", "api/python/base/grammar.rst", "api/python/base/kind.rst", "api/python/base/op.rst", "api/python/base/proofrule.rst", "api/python/base/python.rst", "api/python/base/quickstart.rst", "api/python/base/result.rst", "api/python/base/roundingmode.rst", "api/python/base/solver.rst", "api/python/base/sort.rst", "api/python/base/statistics.rst", "api/python/base/synthresult.rst", "api/python/base/term.rst", "api/python/base/unknownexplanation.rst", "api/python/python.rst", "api/python/pythonic/arith.rst", "api/python/pythonic/array.rst", "api/python/pythonic/bitvec.rst", "api/python/pythonic/boolean.rst", "api/python/pythonic/dt.rst", "api/python/pythonic/finite_field.rst", "api/python/pythonic/fp.rst", "api/python/pythonic/internals.rst", "api/python/pythonic/pythonic.rst", "api/python/pythonic/quant.rst", "api/python/pythonic/quickstart.rst", "api/python/pythonic/set.rst", "api/python/pythonic/solver.rst", "binary/binary.rst", "binary/quickstart.rst", "examples/bags.rst", "examples/bitvectors.rst", "examples/bitvectors_and_arrays.rst", "examples/combination.rst", "examples/datatypes.rst", "examples/examples.rst", "examples/exceptions.rst", "examples/extract.rst", "examples/finite_field.rst", "examples/floatingpoint.rst", "examples/helloworld.rst", "examples/lineararith.rst", "examples/parser.rst", "examples/parser_sym_manager.rst", "examples/quickstart.rst", "examples/relations.rst", "examples/sequences.rst", "examples/sets.rst", "examples/strings.rst", "examples/sygus-fun.rst", "examples/sygus-inv.rst", "genindex.rst", "index.rst", "installation/installation.rst", "options.rst", "output-tags.rst", "proofs/output_alethe.rst", "proofs/output_alf.rst", "proofs/output_dot.rst", "proofs/output_lfsc.rst", "proofs/proof_rules.rst", "proofs/proofs.rst", "references.rst", "resource-limits.rst", "statistics.rst", "theories/bags.rst", "theories/datatypes.rst", "theories/finite_field.rst", "theories/separation-logic.rst", "theories/sequences.rst", "theories/sets-and-relations.rst", "theories/strings.rst", "theories/theories.rst", "theories/transcendentals.rst"], "titles": ["API Documentation", "Command", "C++ API", "Datatype", "DatatypeConstructor", "DatatypeConstructorDecl", "DatatypeDecl", "DatatypeSelector", "DriverOptions", "Exceptions", "Grammar", "InputParser", "Kind", "Modes", "Op", "OptionInfo", "ParserException", "Quickstart Guide", "Result", "RoundingMode", "Solver", "Sort", "SortKind", "Statistics", "SymbolManager", "SynthResult", "Term", "UnknownExplanation", "Java API", "Java API", "Quickstart Guide", "Datatype", "DatatypeConstructor", "DatatypeConstructorDecl", "DatatypeDecl", "DatatypeSelector", "Grammar", "Kind", "Op", "ProofRule", "Base Python API", "Quickstart Guide", "Result", "RoundingMode", "Solver", "Sort", "Statistics", "SynthResult", "Term", "UnknownExplanation", "Python API", "Arithmetic", "Arrays", "Bit-Vectors", "Core &amp; Booleans", "Datatypes", "Finite Fields", "Floating Point", "Internals", "Pythonic API", "Quantifiers", "Quickstart Guide", "Sets", "Solvers &amp; Results", "Binary Documentation", "Quickstart Guide", "Theory of Bags", "Theory of Bit-Vectors", "Theory of Bit-Vectors and Arrays", "Theory Combination", "Theory of Datatypes", "Examples", "Exception Handling", "Theory of Bit-Vectors: <code class=\"code docutils literal notranslate\"><span class=\"pre\">extract</span></code>", "Theory of Finite Fields", "Theory of Floating-Points", "Hello World", "Theory of Linear Arithmetic", "Parser", "Parser with Shared Symbol Manager", "Quickstart Example", "Theory of Relations", "Theory of Sequences", "Theory of Sets", "Theory of Strings", "SyGuS: Functions", "SyGuS: Invariants", "Index", "cvc5 Documentation", "Installation", "Options", "Output tags", "Proof format: Alethe", "Proof format: AletheLF", "Proof format: DOT", "Proof format: LFSC", "Proof rules", "Proof production", "References", "Resource limits", "Statistics", "Theory Reference: Bags", "Theory Reference: Datatypes", "Theory Reference: Finite Fields", "Theory Reference: Separation Logic", "Theory Reference: Sequences", "Theory Reference: Sets and Relations", "Theory Reference: Strings", "Theory References", "Theory Reference: Transcendentals"], "terms": {"In": [0, 4, 12, 13, 17, 20, 21, 25, 26, 30, 31, 32, 37, 39, 41, 44, 45, 47, 48, 55, 61, 65, 80, 90, 96, 98, 99, 102, 103, 106], "addit": [0, 12, 14, 37, 39, 51, 53, 56, 57, 75, 79, 89, 92, 93, 95, 96, 102, 103], "us": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 20, 21, 23, 24, 26, 29, 30, 32, 33, 34, 35, 36, 37, 39, 41, 44, 45, 46, 48, 51, 53, 54, 55, 56, 57, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109], "cvc5": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109], "binari": [0, 20, 26, 51, 81, 88, 89, 90, 99], "featur": [0, 27, 49, 50, 59, 64, 70, 90, 91, 94], "sever": [0, 54, 64, 93, 94, 95, 108], "differ": [0, 12, 14, 20, 23, 27, 29, 37, 39, 44, 53, 54, 55, 56, 57, 62, 64, 71, 75, 77, 96, 100, 101, 106], "program": [0, 40, 64, 90, 98], "languag": [0, 11, 22, 23, 64, 65, 68, 69, 71, 82, 83, 84, 90, 93, 94, 101, 102, 103, 104, 105, 106], "while": [0, 2, 17, 20, 23, 28, 30, 39, 41, 44, 50, 61, 65, 69, 78, 79, 80, 89, 90, 96, 109], "c": [0, 9, 12, 13, 16, 17, 20, 21, 26, 29, 30, 31, 37, 39, 40, 41, 44, 45, 50, 51, 54, 57, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 92, 93, 95, 96, 100, 101, 102, 103, 104, 105, 106, 109], "i": [0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 109], "consid": [0, 12, 13, 26, 37, 48, 55, 68, 73, 90, 100], "primari": [0, 2, 65], "interfac": [0, 2, 6, 10, 11, 20, 24, 34, 36, 64, 90], "both": [0, 11, 14, 23, 89, 90, 92, 105, 109], "java": [0, 17, 30, 41, 50, 61, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 101, 106, 109], "base": [0, 9, 11, 12, 13, 16, 17, 19, 20, 22, 26, 30, 37, 39, 41, 44, 46, 48, 50, 52, 55, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 92, 93, 95, 96, 101, 104, 106, 109], "python": [0, 17, 30, 41, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 101, 106, 109], "implement": [0, 13, 20, 23, 39, 63, 85, 86, 89, 90, 92, 96, 99, 102, 104, 106, 108], "thin": 0, "wrapper": [0, 8, 31, 32, 33, 34, 35, 36, 38, 42, 44, 45, 46, 48], "around": 0, "addition": [0, 15, 20, 21, 26, 44, 90, 96, 107, 108], "more": [0, 2, 12, 15, 17, 20, 29, 30, 37, 39, 41, 46, 50, 55, 57, 61, 65, 67, 80, 89, 90, 93, 95, 96, 100, 101, 103, 106], "avail": [0, 17, 19, 20, 24, 30, 41, 44, 46, 61, 63, 65, 80, 85, 86, 89, 90, 92, 93, 94, 95, 98, 100, 102], "http": [0, 12, 29, 37, 55, 57, 63, 89, 98], "github": [0, 17, 30, 41, 50, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 101, 106, 109], "com": [0, 29, 50, 89], "cvc5_pythonic_api": [0, 17, 30, 41, 65, 72, 89], "here": [0, 29, 39, 55, 65, 70, 92, 93, 94, 95, 96, 97, 106], "encapsul": [1, 3, 5, 6, 10, 14, 15, 18, 25, 42, 47], "ar": [1, 3, 4, 7, 8, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 26, 29, 30, 31, 32, 35, 36, 37, 39, 41, 43, 44, 45, 46, 48, 50, 54, 55, 58, 61, 63, 65, 67, 69, 70, 75, 77, 80, 81, 89, 90, 91, 92, 93, 95, 96, 99, 100, 102, 104, 105, 106, 107, 108, 109], "construct": [1, 4, 5, 6, 7, 9, 11, 12, 14, 16, 17, 20, 21, 24, 26, 30, 32, 34, 37, 39, 41, 44, 45, 48, 61, 65, 69, 70, 71, 78, 79, 80, 90, 96, 103], "input": [1, 8, 10, 11, 13, 15, 20, 24, 36, 44, 64, 65, 71, 78, 79, 85, 86, 90, 91, 100, 102, 104, 106], "parser": [1, 2, 9, 10, 11, 12, 16, 20, 21, 26, 37, 71], "can": [1, 3, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 23, 24, 26, 29, 30, 31, 32, 34, 36, 37, 39, 41, 44, 50, 51, 53, 54, 55, 56, 57, 61, 63, 65, 67, 69, 70, 71, 80, 89, 90, 91, 92, 93, 94, 96, 97, 99, 100, 101, 102, 104, 106], "invok": [1, 11, 20, 24, 44, 63, 64, 78, 79], "solver": [1, 2, 4, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 21, 22, 23, 24, 25, 26, 27, 29, 30, 32, 34, 37, 39, 40, 41, 42, 45, 47, 48, 49, 55, 57, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 92, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109], "symbol": [1, 11, 12, 17, 20, 21, 24, 26, 30, 37, 39, 41, 44, 45, 48, 54, 61, 62, 63, 65, 70, 71, 78, 90, 96, 102, 104, 109], "manag": [1, 11, 24, 26, 71, 78, 90], "class": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 58, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 96, 101, 106, 109], "public": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 100, 101, 106, 109], "function": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 24, 25, 26, 32, 35, 37, 39, 41, 44, 45, 50, 51, 53, 54, 55, 56, 58, 60, 63, 69, 70, 71, 86, 89, 91, 92, 96, 98, 100, 101, 106, 108, 109], "void": [1, 5, 6, 9, 10, 11, 16, 17, 20, 21, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "symbolmanag": [1, 2, 11, 29, 78, 79], "sm": [1, 11, 78, 79], "std": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 98, 100, 101, 102, 106, 109], "ostream": [1, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 23, 25, 26, 27], "out": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 17, 18, 21, 22, 23, 25, 26, 27, 30, 37, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 101, 105, 106, 109], "print": [1, 9, 15, 16, 17, 20, 23, 30, 39, 41, 44, 51, 52, 53, 54, 56, 57, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 95, 96, 99, 100, 101, 106, 109], "result": [1, 2, 12, 17, 19, 20, 25, 26, 27, 29, 30, 37, 39, 40, 41, 43, 44, 47, 48, 59, 61, 65, 66, 72, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 93, 95, 96, 101, 106, 109], "output": [1, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 39, 44, 61, 65, 68, 69, 78, 81, 82, 83, 84, 85, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 99, 106], "stream": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 20, 21, 22, 25, 26, 27, 55, 85, 86, 90, 102], "paramet": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 16, 18, 20, 21, 22, 23, 25, 26, 27, 31, 32, 33, 34, 36, 37, 38, 44, 45, 46, 48, 63, 68, 70, 85, 86, 90, 102], "The": [1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 44, 45, 46, 48, 49, 50, 53, 54, 55, 56, 57, 59, 61, 62, 64, 65, 67, 68, 69, 71, 75, 77, 80, 81, 82, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109], "write": [1, 16, 39, 65, 90, 96], "string": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 37, 39, 41, 44, 45, 48, 51, 53, 54, 55, 57, 60, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 91, 96, 100, 101, 102, 103, 104, 105, 106, 108, 109], "tostr": [1, 3, 4, 5, 6, 7, 10, 14, 18, 21, 25, 26, 72, 85, 86], "const": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 30, 41, 44, 51, 53, 54, 55, 56, 57, 61, 62, 65, 66, 67, 68, 69, 70, 73, 76, 77, 80, 82, 83, 84, 85, 86, 90, 101, 102, 103, 104, 105, 106], "return": [1, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 76, 77, 80, 85, 86, 90, 96, 99, 105, 109], "A": [1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 17, 18, 20, 21, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 48, 52, 54, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 92, 93, 95, 96, 98, 100, 101, 102, 104, 105, 106, 109], "represent": [1, 3, 4, 5, 6, 7, 10, 12, 14, 17, 18, 19, 20, 21, 23, 25, 26, 30, 37, 39, 41, 44, 48, 54, 57, 61, 65, 80, 90, 96, 100], "thi": [1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 47, 48, 51, 52, 54, 55, 57, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 94, 95, 96, 99, 100, 101, 103, 104, 106, 107, 109], "getcommandnam": 1, "get": [1, 3, 4, 6, 7, 14, 15, 17, 20, 21, 23, 26, 30, 31, 32, 35, 38, 41, 44, 45, 46, 48, 52, 61, 63, 65, 66, 68, 69, 70, 78, 80, 81, 82, 83, 85, 86, 89, 90, 93, 101, 106], "name": [1, 3, 4, 5, 6, 7, 11, 15, 16, 17, 20, 21, 23, 24, 26, 30, 31, 32, 33, 34, 35, 41, 44, 46, 51, 52, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 70, 80, 83, 89, 90, 100, 102], "e": [1, 8, 11, 12, 13, 14, 15, 17, 20, 21, 22, 24, 25, 26, 27, 30, 37, 38, 39, 41, 42, 44, 47, 48, 49, 51, 52, 54, 55, 60, 61, 62, 63, 65, 66, 67, 72, 75, 80, 81, 83, 84, 89, 90, 94, 96, 98, 101, 105, 106, 107, 109], "g": [1, 8, 10, 11, 12, 13, 14, 15, 17, 20, 21, 22, 24, 26, 27, 30, 37, 38, 39, 41, 44, 48, 49, 55, 61, 63, 65, 80, 84, 85, 89, 90, 94, 96, 105, 106, 107, 109], "assert": [1, 3, 12, 13, 15, 17, 20, 21, 23, 24, 26, 30, 37, 39, 41, 44, 45, 48, 57, 61, 63, 65, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 89, 90, 96, 102, 103, 104, 105, 106, 109], "bool": [1, 3, 4, 5, 6, 7, 11, 12, 14, 15, 18, 20, 21, 23, 24, 25, 26, 37, 44, 45, 46, 48, 51, 52, 54, 55, 62, 63, 68, 69, 76, 79, 85, 86, 90, 91, 92, 93, 95, 105], "isnul": [1, 3, 4, 5, 6, 7, 14, 18, 21, 25, 26, 31, 32, 33, 34, 35, 38, 42, 45, 47, 48, 78, 79], "true": [1, 3, 4, 5, 6, 7, 12, 14, 17, 18, 20, 21, 23, 24, 25, 26, 30, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 45, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 67, 68, 69, 72, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 95, 96, 100, 101, 102, 105, 106], "null": [1, 3, 4, 5, 6, 7, 11, 12, 20, 21, 22, 25, 26, 31, 32, 33, 34, 35, 37, 38, 39, 44, 45, 47, 48, 96], "friend": [1, 10, 18, 20, 21, 23, 24, 26, 42], "main": [1, 2, 11, 13, 17, 20, 24, 29, 30, 41, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 101, 106, 109], "commandexecutor": [1, 20, 24], "intern": [1, 12, 13, 20, 22, 23, 24, 26, 37, 39, 44, 46, 59, 63, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 109], "interactiveshel": [1, 24], "executioncontext": 1, "expos": [2, 12, 22, 37], "full": [2, 13, 17, 20, 27, 30, 41, 44, 49, 61, 62, 65, 80, 90], "quickstart": [2, 29, 40, 59, 64, 71], "guid": [2, 29, 40, 59, 64, 90], "give": [2, 29, 48, 55, 64, 65, 70, 77, 90, 99, 100], "short": [2, 29, 64, 65, 90], "introduct": [2, 29, 39, 64, 96], "follow": [2, 12, 13, 15, 17, 19, 20, 21, 30, 37, 39, 41, 44, 50, 51, 52, 53, 55, 56, 57, 59, 61, 62, 64, 65, 67, 68, 69, 70, 71, 81, 89, 90, 91, 92, 96, 97, 99, 100, 101, 102, 103, 104, 106, 109], "namespac": [2, 17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "provid": [2, 4, 8, 11, 12, 15, 20, 21, 24, 26, 29, 32, 37, 39, 44, 63, 85, 88, 89, 90, 91, 93, 95, 96], "detail": [2, 12, 15, 20, 29, 37, 39, 44, 57, 89, 92, 93, 95, 96, 106], "individu": [2, 29, 91, 99, 100], "For": [2, 4, 12, 17, 19, 20, 21, 22, 26, 29, 30, 32, 37, 39, 41, 44, 45, 48, 50, 54, 55, 63, 65, 71, 75, 83, 89, 90, 93, 95, 96, 99, 101, 102, 103, 104, 105, 106], "most": [2, 13, 20, 29, 44, 51, 53, 63, 89, 105, 106, 109], "applic": [2, 4, 12, 29, 32, 37, 39, 50, 52, 54, 58, 70, 90, 96, 99, 106], "entri": [2, 23, 29], "point": [2, 3, 4, 11, 12, 19, 20, 21, 22, 26, 29, 37, 39, 43, 44, 45, 48, 59, 63, 70, 71, 96, 98, 99, 100, 104, 108], "exampl": [2, 4, 12, 20, 21, 22, 26, 29, 32, 37, 39, 40, 44, 45, 48, 50, 54, 55, 59, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 88, 90, 92, 93, 95, 96, 99, 101, 106], "except": [2, 12, 16, 20, 23, 29, 31, 37, 48, 51, 52, 54, 59, 63, 71, 90, 99, 102], "datatyp": [2, 4, 5, 6, 7, 12, 20, 21, 22, 29, 32, 33, 34, 35, 37, 39, 40, 44, 45, 59, 71, 91, 96, 98, 104, 106, 108], "datatypeconstructor": [2, 3, 7, 12, 29, 37, 40, 70], "datatypeconstructordecl": [2, 4, 6, 7, 20, 29, 34, 40, 70], "datatypedecl": [2, 20, 22, 29, 40, 44, 70], "datatypeselector": [2, 3, 4, 12, 29, 37, 40, 70], "driveropt": [2, 20], "grammar": [2, 13, 20, 29, 40, 44, 85, 90, 104], "kind": [2, 4, 7, 13, 14, 17, 20, 21, 22, 26, 29, 30, 32, 35, 38, 39, 40, 41, 44, 45, 48, 52, 53, 54, 58, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 90, 96, 100, 101, 102, 103, 104, 105, 106, 109], "mode": [2, 11, 15, 19, 20, 21, 22, 26, 44, 45, 48, 59, 75, 78, 79, 89, 90, 91, 92, 93, 94, 95, 104], "op": [2, 12, 20, 26, 29, 37, 39, 40, 44, 48, 67, 73, 75, 96, 104], "optioninfo": [2, 20, 29, 44], "roundingmod": [2, 12, 20, 21, 26, 29, 37, 40, 44, 45, 75], "sort": [2, 3, 4, 5, 6, 7, 10, 11, 12, 17, 20, 22, 26, 29, 30, 32, 33, 34, 35, 36, 37, 40, 41, 44, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 86, 90, 101, 102, 103, 104, 105, 106, 109], "sortkind": [2, 20, 21, 45], "statist": [2, 20, 29, 40, 44, 63, 88, 90, 99], "synthresult": [2, 20, 29, 40], "term": [2, 4, 7, 10, 11, 12, 13, 14, 17, 20, 21, 22, 29, 30, 32, 35, 36, 37, 38, 39, 40, 41, 44, 45, 55, 59, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 94, 96, 100, 101, 102, 103, 104, 105, 106, 109], "unknownexplan": [2, 18, 29, 40], "cvc5apiexcept": [2, 9, 16, 17, 29, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "cvc5apirecoverableexcept": [2, 9, 23, 29], "const_iter": [2, 3, 4, 26, 69, 70], "stat": [2, 23, 29, 46, 63, 90, 100], "enum": [2, 12, 13, 18, 19, 20, 21, 22, 26, 27, 29, 37, 39, 43, 49, 90, 91, 96], "configur": [2, 8, 13, 15, 20, 29, 50, 63, 89, 90, 99], "blockmodelsmod": [2, 13, 20, 29], "learnedlittyp": [2, 13, 20, 29, 44], "proofcompon": [2, 13, 20, 29, 44], "findsynthtarget": [2, 13, 20, 29], "command": [2, 6, 11, 17, 20, 24, 29, 30, 34, 41, 61, 63, 64, 65, 70, 78, 79, 80, 85, 86, 89, 90, 99, 100, 102, 104], "inputpars": [2, 24, 29, 78, 79], "parserexcept": [2, 9], "repres": [3, 4, 7, 12, 14, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 37, 38, 39, 44, 48, 51, 53, 54, 56, 57, 60, 63, 68, 90, 96, 101, 103], "retriev": [3, 4, 7, 9, 11, 15, 17, 20, 23, 26, 41, 57, 63, 85, 86], "from": [3, 4, 6, 7, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 23, 25, 26, 29, 30, 34, 37, 39, 41, 42, 43, 44, 45, 47, 48, 50, 57, 59, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 89, 90, 95, 96, 100, 101, 104, 105, 106, 109], "via": [3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 17, 18, 20, 21, 22, 23, 26, 30, 32, 37, 39, 41, 44, 50, 63, 64, 72, 78, 79, 81, 82, 84, 89, 90, 92, 96, 99, 100, 104, 106], "getdatatyp": [3, 21, 45, 70, 102, 106], "oper": [3, 4, 5, 6, 7, 10, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 29, 30, 37, 38, 39, 41, 44, 48, 53, 56, 59, 61, 65, 80, 81, 90, 96, 99, 101, 103, 104, 106, 107], "dt": [3, 90, 102, 106], "constructor": [3, 4, 5, 6, 7, 10, 12, 14, 16, 18, 20, 21, 23, 25, 26, 31, 32, 33, 34, 37, 39, 44, 45, 55, 70, 90, 96, 102, 106], "destructor": [3, 4, 5, 6, 7, 10, 14, 20, 21, 23, 26, 90, 102], "size_t": [3, 4, 6, 12, 14, 20, 21, 22, 26, 44, 85, 86], "idx": [3, 52, 54, 55, 60, 63], "given": [3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 18, 20, 21, 22, 23, 25, 26, 27, 31, 32, 33, 37, 39, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 63, 67, 69, 77, 85, 86, 89, 90, 91, 96, 100, 101, 102, 104], "index": [3, 4, 12, 14, 20, 21, 22, 26, 31, 32, 37, 38, 39, 44, 45, 48, 68, 88, 89, 90, 96, 102, 105], "linear": [3, 4, 12, 31, 32, 37, 71, 90, 98, 109], "search": [3, 4, 13, 31, 32, 89, 90], "through": [3, 4, 31, 32, 67, 68, 69, 70, 73, 75, 77, 81, 82, 83, 84, 85, 86, 98, 106], "so": [3, 4, 6, 13, 20, 29, 31, 32, 34, 44, 56, 61, 65, 68, 70, 90, 103], "case": [3, 4, 12, 13, 17, 20, 21, 24, 25, 26, 30, 31, 32, 37, 39, 41, 44, 45, 47, 48, 61, 65, 80, 90, 96, 99, 100, 105, 107], "multipl": [3, 4, 12, 13, 20, 31, 32, 37, 39, 44, 51, 53, 56, 57, 66, 68, 79, 90, 96, 101, 103], "similarli": [3, 4, 20, 31, 32, 44], "first": [3, 4, 7, 11, 12, 13, 14, 17, 20, 26, 30, 31, 32, 35, 37, 39, 41, 44, 55, 61, 65, 67, 68, 70, 80, 90, 92, 96, 103, 105], "getconstructor": [3, 4, 31, 70], "getselector": [3, 4, 7, 31, 32, 70, 102, 106], "selector": [3, 4, 5, 7, 12, 21, 31, 32, 33, 35, 37, 39, 45, 55, 70, 90, 96, 102, 106], "getnam": [3, 4, 6, 7, 31, 32, 34, 35], "getnumconstructor": [3, 6, 31, 34], "number": [3, 4, 6, 12, 14, 16, 19, 20, 21, 26, 29, 31, 32, 34, 37, 38, 39, 43, 44, 48, 51, 53, 54, 55, 56, 57, 60, 63, 68, 75, 88, 90, 96, 99, 101, 102, 108, 109], "vector": [3, 5, 10, 12, 14, 15, 17, 20, 21, 22, 26, 30, 37, 39, 41, 44, 45, 48, 56, 57, 59, 61, 63, 65, 70, 71, 75, 80, 85, 86, 89, 90, 96, 102, 105, 106, 108], "getparamet": [3, 31], "parametr": [3, 4, 6, 20, 21, 31, 32, 34, 45, 90], "experiment": [3, 4, 6, 12, 20, 21, 31, 32, 34, 37, 44, 45, 48, 90], "mai": [3, 4, 6, 9, 12, 13, 19, 20, 21, 22, 23, 26, 31, 32, 34, 37, 39, 44, 45, 48, 51, 53, 56, 89, 90, 96, 99, 106], "chang": [3, 4, 6, 12, 20, 21, 23, 31, 32, 34, 37, 44, 45, 48, 89, 90, 100], "futur": [3, 4, 6, 12, 20, 21, 31, 32, 34, 37, 44, 45, 48, 90], "version": [3, 4, 6, 12, 17, 20, 21, 30, 31, 32, 34, 37, 39, 41, 44, 45, 48, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 96, 98, 100, 101, 102, 106, 109], "isparametr": [3, 6, 31, 34], "determin": [3, 4, 6, 11, 12, 13, 14, 18, 20, 21, 23, 25, 26, 31, 32, 37, 39, 42, 44, 45, 47, 63, 89, 90, 96], "iscodatatyp": [3, 20, 31, 44, 55], "correspond": [3, 4, 10, 12, 13, 14, 17, 20, 26, 30, 31, 32, 36, 37, 39, 41, 44, 61, 65, 80, 90, 91, 93, 95, 96, 99], "co": [3, 31, 90, 98, 102, 109], "istupl": [3, 21, 31, 45], "tupl": [3, 12, 20, 21, 22, 26, 31, 37, 44, 45, 48, 51, 53, 54, 55, 56, 81, 90, 106], "isrecord": [3, 21, 31, 45], "record": [3, 20, 21, 31, 44, 45, 93, 95, 102], "isfinit": [3, 31], "finit": [3, 12, 20, 21, 22, 26, 31, 37, 44, 45, 48, 59, 71, 81, 98, 105, 108], "iswellfound": [3, 31], "well": [3, 15, 23, 31, 90, 92, 100, 108], "found": [3, 13, 20, 29, 31, 44, 89, 90, 106], "If": [3, 9, 11, 12, 13, 15, 16, 17, 19, 20, 23, 26, 30, 31, 37, 39, 41, 43, 44, 48, 50, 51, 53, 54, 55, 56, 57, 60, 61, 63, 65, 67, 68, 73, 80, 89, 90, 96, 105], "codatatyp": [3, 20, 31, 44], "fals": [3, 12, 13, 20, 23, 31, 37, 39, 44, 46, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 72, 85, 86, 90, 91, 92, 93, 95, 96, 105], "valu": [3, 12, 13, 15, 17, 18, 19, 20, 22, 23, 25, 26, 27, 29, 30, 31, 37, 39, 41, 42, 43, 44, 46, 47, 48, 49, 51, 53, 54, 56, 57, 58, 61, 63, 65, 66, 67, 68, 69, 70, 74, 75, 77, 80, 82, 83, 89, 90, 96, 100, 101, 102, 103, 105, 106], "size": [3, 12, 17, 20, 21, 22, 26, 29, 30, 31, 37, 41, 44, 45, 51, 53, 54, 56, 57, 61, 65, 68, 74, 80, 85, 86, 90], "object": [3, 4, 6, 7, 8, 9, 15, 16, 20, 21, 23, 29, 31, 32, 33, 34, 35, 44, 48, 51, 54, 55, 58, 60, 63, 70, 85, 96, 99, 100, 101, 102, 103, 104, 105, 106], "begin": [3, 4, 23, 26, 46, 69, 70, 85, 86, 90], "an": [3, 4, 5, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 33, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 63, 65, 66, 70, 72, 74, 75, 77, 78, 79, 80, 83, 88, 89, 90, 91, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106], "iter": [3, 4, 23, 26, 29, 31, 32, 48, 69, 70, 100], "end": [3, 4, 17, 23, 26, 30, 41, 61, 65, 69, 70, 78, 79, 80, 85, 86, 91], "one": [3, 4, 11, 12, 17, 19, 23, 26, 30, 32, 37, 39, 41, 43, 44, 48, 54, 55, 61, 65, 66, 67, 69, 70, 80, 83, 85, 86, 90, 96, 99, 101, 102, 104, 106], "off": [3, 4, 26, 90], "last": [3, 4, 20, 26, 44, 63, 89, 90], "type": [3, 4, 5, 8, 9, 12, 13, 15, 17, 20, 21, 23, 26, 30, 32, 37, 39, 41, 44, 51, 54, 61, 63, 65, 67, 70, 72, 75, 80, 84, 90, 91, 96, 98, 100, 102, 104], "iterator_categori": [3, 4, 26], "forward_iterator_tag": [3, 4, 26], "tag": [3, 4, 20, 26, 55, 88, 90], "value_typ": [3, 4, 26], "item": [3, 4, 26], "pointer": [3, 4, 26, 54, 60], "refer": [3, 4, 20, 26, 39, 54, 55, 58, 63, 70, 88, 89, 90, 96], "difference_typ": [3, 4, 26], "ptrdiff_t": [3, 4, 26], "when": [3, 4, 7, 9, 12, 13, 20, 21, 22, 23, 24, 26, 37, 39, 44, 48, 60, 78, 89, 90, 91, 96, 99, 100, 103, 104, 106], "two": [3, 4, 9, 12, 17, 18, 19, 22, 26, 30, 37, 41, 43, 50, 53, 55, 61, 65, 66, 67, 68, 70, 77, 83, 89, 90, 96, 100, 101, 106, 109], "subtract": [3, 4, 12, 17, 26, 30, 37, 41, 51, 53, 56, 57, 61, 65, 80, 101], "nullari": [3, 4, 6, 10, 12, 14, 18, 25, 26, 32, 37, 42], "requir": [3, 4, 11, 12, 13, 14, 17, 20, 26, 27, 30, 32, 37, 38, 39, 41, 44, 49, 75, 85, 86, 89, 90, 92, 96, 99, 104], "cython": [3, 4, 10, 50, 89], "assign": [3, 4, 17, 20, 23, 26, 30, 41, 54, 61, 65, 67, 70, 80, 90], "after": [3, 4, 8, 11, 12, 13, 20, 26, 37, 39, 44, 55, 65, 67, 70, 72, 78, 90, 91, 96, 99, 100, 105], "equal": [3, 4, 12, 13, 14, 17, 18, 19, 21, 26, 30, 37, 39, 41, 43, 48, 51, 53, 55, 56, 61, 65, 66, 67, 69, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 86, 90, 92, 93, 95, 96, 100, 101, 103, 106], "compar": [3, 4, 14, 18, 21, 26, 39, 50, 96], "disequ": [3, 4, 12, 14, 18, 21, 26, 37, 54, 90], "increment": [3, 4, 17, 20, 26, 30, 41, 44, 61, 63, 65, 66, 67, 69, 74, 80, 83, 85, 86, 90, 98, 100, 101, 106, 109], "prefix": [3, 4, 12, 26, 29, 37, 39, 51, 54, 65, 89, 90, 96, 105], "int": [3, 4, 12, 17, 20, 21, 26, 30, 32, 37, 41, 44, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 101, 102, 104, 105, 106, 107, 109], "postfix": [3, 4, 26], "derefer": [3, 4, 26], "dtype": 3, "serial": [3, 4, 5, 6, 7, 10, 12, 13, 14, 18, 21, 22, 25, 26, 27], "specifi": [4, 7, 12, 13, 19, 20, 37, 39, 44, 54, 70, 89, 90, 96, 109], "con": [4, 12, 32, 37, 55, 70, 90, 102], "getterm": [4, 7, 12, 32, 35, 37, 70, 102], "special": [4, 12, 13, 15, 32, 37, 39, 59, 75, 90, 96, 102], "like": [4, 7, 8, 12, 20, 26, 32, 35, 37, 44, 50, 63, 90, 96, 99, 100, 109], "whose": [4, 5, 12, 13, 20, 22, 26, 32, 33, 37, 39, 44, 48, 90, 93, 95, 96, 102, 104], "isdatatypeconstructor": [4, 21, 32, 45], "all": [4, 9, 11, 12, 15, 16, 17, 20, 21, 23, 26, 30, 31, 32, 37, 39, 41, 44, 45, 46, 48, 54, 55, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 90, 91, 93, 95, 96, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109], "includ": [4, 8, 12, 13, 15, 17, 20, 23, 26, 30, 32, 37, 41, 44, 46, 50, 54, 60, 61, 62, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 96, 100, 101, 102, 106, 109], "ones": [4, 12, 17, 20, 30, 32, 37, 41, 44, 61, 65, 80, 90, 106], "should": [4, 7, 9, 11, 12, 17, 20, 22, 30, 32, 35, 37, 39, 41, 44, 61, 63, 65, 68, 74, 77, 78, 80, 85, 86, 89, 95, 96, 100, 109], "argument": [4, 7, 12, 13, 20, 21, 22, 32, 35, 37, 39, 44, 45, 52, 53, 54, 55, 56, 58, 63, 70, 90, 96, 99, 102], "apply_constructor": [4, 12, 32, 37, 70, 102], "nil": [4, 12, 20, 32, 37, 44, 55, 70, 102, 104], "list": [4, 12, 13, 15, 17, 20, 21, 26, 30, 32, 37, 39, 41, 44, 45, 48, 51, 54, 55, 56, 58, 60, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 96, 101, 102, 106, 109], "mkterm": [4, 12, 14, 17, 20, 26, 30, 32, 37, 41, 44, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 86, 101, 102, 103, 104, 105, 106, 109], "t": [4, 12, 13, 14, 15, 17, 20, 21, 26, 30, 32, 37, 39, 41, 44, 48, 54, 61, 63, 65, 69, 70, 79, 80, 85, 86, 89, 90, 91, 96, 98, 101, 102, 103, 104, 105, 106, 109], "where": [4, 12, 13, 20, 23, 26, 31, 32, 37, 39, 44, 48, 55, 68, 90, 96, 97, 99, 101, 102, 103, 104, 105, 107], "instead": [4, 17, 20, 26, 30, 32, 41, 44, 61, 65, 80, 90, 95, 96, 106], "getinstantiatedterm": [4, 32], "below": [4, 11, 32, 37, 39, 51, 53, 56, 78, 89, 90, 96, 99, 101, 102, 103, 105, 106, 107], "retsort": [4, 32], "intend": [4, 20, 23, 32, 44, 88, 91, 96], "seen": [4, 32, 39, 96, 102], "ha": [4, 6, 8, 11, 12, 15, 20, 21, 22, 23, 24, 25, 26, 32, 37, 39, 44, 45, 47, 48, 54, 55, 67, 70, 76, 79, 89, 90, 91, 96, 99, 100, 102, 105], "been": [4, 6, 8, 17, 20, 21, 23, 24, 30, 32, 39, 41, 44, 45, 61, 65, 67, 70, 76, 80, 91, 96, 99], "explicitli": [4, 12, 15, 17, 22, 30, 32, 37, 41, 44, 61, 65, 80, 90, 99], "cast": [4, 32, 51, 53, 54, 56, 57, 102], "cannot": [4, 20, 26, 32, 39, 44, 54, 96], "infer": [4, 20, 32, 39, 90, 96], "declar": [4, 5, 6, 12, 17, 20, 24, 30, 32, 33, 34, 37, 41, 44, 54, 59, 61, 63, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 93, 101, 103, 104, 105, 106, 109], "par": [4, 32, 70, 102], "head": [4, 32, 70, 102], "tail": [4, 32, 55, 70, 102], "must": [4, 11, 12, 14, 20, 32, 37, 39, 44, 48, 54, 55, 67, 83, 90, 96, 102, 104], "user": [4, 11, 12, 15, 32, 37, 50, 59, 89, 90, 91, 93, 96, 104], "smt": [4, 6, 12, 17, 19, 20, 21, 30, 32, 34, 37, 41, 43, 44, 45, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 88, 89, 92, 93, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109], "2": [4, 6, 10, 12, 17, 19, 20, 26, 30, 32, 34, 36, 37, 39, 41, 48, 51, 53, 54, 55, 57, 60, 61, 63, 65, 66, 67, 68, 74, 75, 77, 80, 83, 89, 90, 91, 93, 95, 96, 98, 100, 101, 102, 104, 106, 109], "6": [4, 6, 17, 29, 30, 32, 34, 41, 51, 53, 61, 65, 80, 89, 98, 102, 104], "done": [4, 11, 32, 39, 89, 90, 96, 99], "syntax": [4, 6, 12, 32, 34, 37, 59, 63, 90, 106], "qualifi": [4, 32], "identifi": [4, 20, 23, 32, 39, 44, 54, 90, 96], "equival": [4, 12, 13, 20, 26, 32, 37, 39, 44, 48, 67, 70, 85, 86, 90, 96, 102], "appli": [4, 12, 13, 21, 26, 32, 37, 39, 45, 48, 54, 55, 63, 70, 90, 96, 99, 102], "abov": [4, 12, 13, 15, 17, 20, 26, 30, 32, 37, 39, 41, 44, 61, 65, 67, 78, 79, 80, 85, 86, 89, 90, 96, 102, 106], "desir": [4, 32, 89], "gettesterterm": [4, 12, 32, 37, 70, 102], "tester": [4, 12, 21, 32, 37, 39, 45, 55, 59, 70, 90, 96, 102], "similar": [4, 7, 12, 32, 35, 37, 39, 63, 89, 90, 96, 106], "which": [4, 9, 10, 11, 12, 13, 19, 20, 21, 23, 24, 25, 26, 36, 37, 39, 44, 45, 46, 47, 48, 51, 70, 85, 86, 89, 90, 93, 95, 96, 100, 102, 106], "apply_test": [4, 12, 32, 37, 70, 102], "getnumselector": [4, 32], "far": [4, 6, 32, 34], "th": [4, 39, 96, 98, 105, 107], "ctor": [4, 6, 20, 34, 44, 70], "mkdatatypeconstructordecl": [5, 20, 44, 70], "itself": [5, 6, 8, 33, 34, 39, 55, 70, 96, 99, 102], "see": [5, 6, 12, 17, 20, 21, 23, 24, 26, 27, 30, 34, 37, 39, 40, 41, 44, 45, 46, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 93, 94, 96, 99, 101, 103, 104, 106, 109], "specif": [5, 6, 17, 20, 27, 29, 30, 33, 34, 41, 49, 55, 61, 65, 70, 80, 100], "creat": [5, 6, 10, 12, 14, 17, 20, 21, 22, 23, 26, 30, 33, 34, 37, 41, 44, 45, 48, 51, 53, 54, 55, 56, 57, 60, 61, 62, 63, 65, 67, 70, 72, 75, 76, 80, 82, 85, 90, 93, 95, 101, 102, 103, 104, 105, 106], "mkdatatypesort": [5, 6, 20, 22, 34, 44, 70, 102], "decl": [5, 6, 54, 63, 70, 90], "addselector": [5, 7, 33, 70], "add": [5, 6, 10, 12, 14, 17, 20, 30, 33, 34, 36, 37, 41, 44, 50, 51, 57, 58, 61, 62, 63, 65, 68, 69, 80, 85, 86, 90, 93, 103], "codomain": [5, 7, 12, 20, 21, 22, 33, 35, 37, 44, 45], "addselectorself": [5, 33, 70], "addselectorunresolv": [5, 33], "unresdataypenam": [5, 33], "unresolv": [5, 20, 33, 44], "resolv": [5, 6, 33, 70], "ctordecl": 5, "mkdatatypedecl": [6, 20, 44, 70], "coincid": [6, 10, 34, 36], "lib": [6, 19, 20, 21, 29, 34, 43, 44, 45, 63, 64, 65, 69, 89, 90, 92, 93, 98, 99, 102, 103, 104, 105, 107, 108], "singl": [6, 12, 23, 34, 37, 39, 46, 54, 57, 60, 62, 75, 89, 90, 96, 99, 105], "within": [6, 12, 21, 26, 34, 37, 39, 45, 63, 89, 90, 92, 93, 95, 96, 99], "addconstructor": [6, 34, 70], "isresolv": 6, "alreadi": [6, 11, 17, 20, 30, 41, 50, 54, 61, 65, 80, 89, 90], "dtdecl": 6, "sel": [7, 39, 90, 96, 102], "isdatatypeselector": [7, 21, 35, 45], "apply_selector": [7, 12, 35, 37, 70, 102, 106], "getupdaterterm": [7, 12, 35, 37, 70, 102], "updat": [7, 12, 21, 35, 37, 45, 52, 70, 90, 105, 107], "isdatatypeupdat": [7, 21, 35, 45], "apply_updat": [7, 12, 35, 37, 70, 102], "getcodomainsort": [7, 35], "stor": [7, 70], "safe": [8, 9, 15, 48, 63, 90, 99], "access": [8, 15, 20, 21, 23, 26, 55, 90, 105], "few": [8, 29, 75, 90, 99], "option": [8, 12, 13, 15, 17, 20, 22, 30, 37, 39, 41, 44, 61, 63, 65, 66, 67, 68, 69, 72, 74, 77, 80, 81, 82, 83, 84, 85, 86, 88, 91, 93, 95, 96, 97, 100, 101, 106], "frontend": [8, 15], "commun": [8, 9, 20], "appropri": [8, 23, 39, 54, 90, 96], "regular": [8, 12, 20, 21, 22, 37, 39, 44, 45, 53, 84, 90, 91, 96], "getopt": [8, 15, 20, 44, 63, 90], "getoptioninfo": [8, 15, 20, 44, 63, 90], "err": [8, 90], "doe": [8, 12, 13, 14, 20, 23, 37, 39, 44, 50, 59, 66, 68, 70, 75, 89, 90, 96, 99, 101, 102, 104], "store": [8, 12, 20, 23, 26, 37, 39, 44, 48, 52, 68, 90, 96, 100], "onli": [8, 12, 13, 17, 20, 21, 23, 26, 27, 30, 37, 39, 41, 44, 45, 48, 49, 61, 65, 67, 80, 89, 90, 92, 93, 95, 96, 97, 99, 100, 103, 104, 105, 106, 107], "act": 8, "It": [8, 10, 12, 15, 17, 20, 21, 23, 30, 37, 39, 40, 41, 44, 45, 48, 53, 54, 55, 59, 61, 63, 65, 80, 88, 89, 90, 92, 94, 96, 99, 102, 105, 107], "thu": [8, 19, 44, 77, 89, 99, 109], "longer": [8, 9, 89], "destroi": [8, 23, 63], "istream": [8, 11], "": [8, 9, 12, 13, 17, 19, 20, 21, 23, 24, 26, 30, 37, 39, 41, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 61, 62, 63, 65, 67, 69, 70, 72, 74, 75, 80, 84, 89, 90, 92, 96, 98, 101, 102, 103, 104, 105, 106, 109], "error": [8, 9, 11, 16, 72, 90, 91], "api": [9, 10, 12, 13, 16, 17, 20, 22, 23, 25, 26, 30, 37, 41, 44, 47, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 90, 99, 100, 101, 103, 104, 105, 106, 109], "certain": [9, 14, 19, 38, 89, 91, 99], "we": [9, 11, 12, 13, 17, 20, 21, 25, 26, 30, 37, 39, 41, 44, 47, 55, 61, 63, 65, 67, 68, 70, 73, 76, 78, 79, 80, 81, 83, 89, 90, 94, 96, 101, 102, 103, 104, 105, 106], "broadli": 9, "distinguish": [9, 12, 20, 44, 96, 104], "deriv": [9, 20, 39, 44, 96], "ani": [9, 10, 12, 13, 14, 15, 20, 26, 36, 37, 39, 44, 66, 83, 90, 91, 96, 100, 101, 104, 106], "method": [9, 11, 12, 13, 20, 23, 26, 31, 32, 34, 37, 39, 44, 45, 47, 48, 54, 55, 63, 67, 85, 86, 90, 96, 98], "fail": [9, 20, 44, 51, 52, 54, 89, 90], "behav": [9, 12, 37, 89], "wa": [9, 11, 13, 15, 18, 20, 21, 25, 26, 27, 28, 42, 44, 47, 49, 90, 91, 92, 100, 103], "call": [9, 11, 12, 17, 20, 25, 26, 30, 37, 39, 41, 44, 46, 47, 48, 61, 65, 69, 80, 89, 90, 96, 99, 103], "still": [9, 16, 89, 100], "howev": [9, 12, 17, 30, 37, 41, 61, 65, 80], "associ": [9, 12, 15, 20, 21, 22, 26, 37, 39, 44, 45, 54, 55, 75, 78, 79, 90, 96, 102], "unsaf": 9, "state": [9, 20, 39, 44, 96, 99], "thrown": [9, 16, 31, 48], "subclass": [9, 16, 54], "inlin": [9, 17, 30, 41, 61, 65, 80], "str": [9, 17, 30, 41, 44, 54, 57, 58, 61, 63, 65, 80, 84, 85, 86, 107], "messag": [9, 11, 16, 99], "stringstream": [9, 78, 79, 85, 86], "getmessag": 9, "char": [9, 16], "what": [9, 12, 20, 44, 90], "noexcept": 9, "overrid": [9, 16, 54, 89, 90], "style": [9, 90], "arrai": [9, 12, 17, 20, 21, 22, 26, 30, 37, 39, 41, 44, 45, 48, 54, 57, 59, 60, 61, 62, 65, 71, 80, 96, 100, 108], "virtual": [9, 16], "tostream": [9, 16, 21], "o": [9, 15, 16, 20, 23, 90, 91, 98], "feel": 9, "free": [9, 10, 12, 13, 20, 26, 36, 37, 39, 44, 63, 90, 96, 104, 106], "redefin": 9, "overridden": 9, "recommend": [9, 89], "befor": [9, 13, 20, 44, 50, 89, 90, 91], "actual": [9, 17, 18, 23, 25, 30, 39, 41, 42, 55, 61, 63, 65, 70, 96, 99], "recover": 9, "cvc5apioptionexcept": [9, 29], "cvc5apiunsupportedexcept": 9, "sygu": [10, 13, 20, 25, 36, 44, 59, 64, 71, 90], "mkgrammar": [10, 20, 44, 85], "allow": [10, 12, 15, 20, 36, 37, 44, 50, 90, 99, 102, 106], "defin": [10, 11, 13, 17, 20, 21, 26, 30, 36, 39, 41, 44, 48, 54, 55, 58, 59, 61, 63, 65, 68, 70, 73, 74, 80, 81, 84, 85, 86, 89, 90, 91, 93, 95, 96, 101, 103, 104, 106, 108, 109], "context": [10, 11, 12, 17, 20, 30, 36, 37, 41, 44, 51, 53, 54, 56, 57, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 90, 101, 104, 106, 109], "accord": [10, 39, 96], "definit": [10, 20, 36, 39, 44, 90, 96], "IF": [10, 36, 64], "1": [10, 12, 17, 19, 20, 26, 29, 30, 36, 37, 39, 41, 44, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 77, 80, 81, 82, 83, 85, 86, 89, 90, 91, 92, 93, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107], "standard": [10, 19, 21, 26, 36, 39, 57, 65, 75, 78, 85, 86, 89, 90, 96, 98, 102, 104, 107], "Its": [10, 21, 36], "grammardef": [10, 36], "addrul": [10, 36, 85], "ntsymbol": [10, 20, 36, 44], "rule": [10, 13, 36, 39, 85, 90, 92, 93, 95, 97], "set": [10, 11, 12, 13, 15, 17, 20, 21, 22, 23, 24, 26, 30, 36, 37, 39, 41, 44, 45, 48, 54, 55, 57, 59, 61, 63, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 89, 91, 96, 98, 99, 100, 101, 102, 103, 104, 105, 108, 109], "non": [10, 12, 20, 21, 36, 37, 39, 44, 54, 72, 85, 89, 90, 92, 96, 99, 100, 102, 104, 105, 107], "termin": [10, 20, 36, 44, 85, 89, 90, 99], "ad": [10, 12, 13, 17, 20, 30, 36, 37, 39, 41, 44, 50, 61, 63, 65, 80, 90, 91, 95, 96], "addanyconst": [10, 36], "arbitrari": [10, 12, 13, 20, 26, 29, 36, 37, 39, 90, 93, 95, 96], "constant": [10, 12, 13, 17, 20, 26, 30, 36, 37, 39, 41, 44, 48, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 68, 69, 75, 77, 80, 82, 84, 90, 96, 101, 103, 105, 106, 109], "addanyvari": [10, 36], "variabl": [10, 12, 13, 17, 20, 26, 30, 36, 37, 39, 41, 44, 48, 54, 60, 61, 65, 67, 68, 69, 75, 76, 77, 80, 81, 82, 84, 85, 86, 89, 90, 96, 100, 104, 106, 109], "synth": [10, 20, 25, 36, 44, 47, 85, 86, 90, 91], "fun": [10, 20, 36, 44, 69, 74, 78, 79, 81, 85, 86, 90, 91, 93, 105, 106, 109], "inv": [10, 20, 36, 39, 44, 74, 86, 90, 96], "same": [10, 11, 12, 13, 17, 20, 30, 36, 37, 39, 41, 44, 54, 55, 61, 65, 71, 79, 80, 89, 90, 96, 99, 102, 103, 105, 106], "need": [10, 20, 21, 70, 81, 82, 83, 84, 89, 90, 106], "bookeep": 10, "cmd": [10, 20, 21, 26, 78, 79], "express": [11, 12, 20, 21, 26, 37, 39, 44, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 75, 84, 96], "expect": [11, 15, 17, 29, 30, 39, 41, 51, 54, 55, 61, 65, 67, 68, 70, 73, 75, 78, 80, 89, 96, 104], "setfileinput": 11, "setstreaminput": [11, 78, 79], "setstringinput": [11, 78, 79], "setincrementalstringinput": [11, 79], "appendincrementalstringinput": [11, 79], "Then": [11, 50, 89, 99], "nextcommand": [11, 78, 79], "nextexpress": 11, "pars": [11, 16, 59, 78, 79, 90, 91], "interact": [11, 55, 90], "current": [11, 12, 13, 15, 17, 20, 30, 37, 39, 41, 44, 48, 59, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 96, 99, 100, 101, 103, 105, 106, 108, 109], "background": 11, "logic": [11, 12, 17, 20, 24, 30, 37, 41, 44, 53, 61, 63, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 91, 95, 98, 101, 103, 105, 106, 108], "initi": [11, 12, 20, 37, 44, 55, 90], "empti": [11, 12, 18, 20, 23, 25, 28, 37, 39, 42, 44, 55, 62, 66, 81, 82, 83, 90, 96, 101, 104, 105, 106], "have": [11, 12, 17, 20, 21, 23, 26, 30, 37, 39, 41, 44, 50, 54, 55, 61, 63, 65, 67, 80, 81, 89, 90, 96, 101, 102, 103, 104, 105, 106], "compat": [11, 20, 44, 50, 62, 89], "That": [11, 106, 109], "islogicset": [11, 20, 24, 44], "upon": 11, "sourc": [11, 17, 30, 41, 50, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 88, 89, 101, 106, 109], "either": [11, 12, 17, 20, 30, 31, 32, 37, 39, 41, 44, 61, 63, 65, 75, 80, 90, 96, 99, 100, 105], "resp": [11, 39, 96], "its": [11, 12, 13, 14, 15, 20, 22, 23, 26, 37, 38, 39, 44, 48, 54, 55, 70, 79, 85, 90, 96, 97, 99, 100, 101, 103, 104], "contain": [11, 12, 13, 20, 21, 26, 37, 39, 44, 45, 48, 54, 55, 60, 63, 89, 90, 93, 95, 96, 105, 106], "tabl": [11, 12, 21, 24, 37, 54, 79, 101, 102, 103, 104, 105, 106], "map": [11, 12, 20, 21, 23, 26, 37, 39, 44, 45, 48, 54, 96, 100], "getsolv": 11, "underli": [11, 21, 45, 54, 55, 60], "getsymbolmanag": [11, 78], "inputlanguag": [11, 29, 78, 79], "lang": [11, 89, 90], "filenam": [11, 16, 90, 100], "file": [11, 16, 17, 20, 24, 29, 30, 41, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 93, 94, 95, 100, 101, 102, 106, 109], "smt_lib_2_6": [11, 78, 79], "concret": [11, 13, 54, 102], "feed": [11, 90], "append": [11, 20, 44, 63, 68, 85, 86, 90, 106, 109], "being": [11, 20, 44, 55, 60, 109], "next": [11, 13, 17, 20, 30, 41, 44, 61, 65, 69, 70, 80, 90], "Will": 11, "forc": [11, 90], "prior": 11, "read": [11, 39, 90, 96], "nextterm": [11, 79], "everi": [12, 20, 22, 37, 39, 44, 54, 63, 71, 90, 96, 99, 100], "each": [12, 17, 20, 30, 39, 41, 44, 53, 54, 55, 61, 65, 69, 70, 78, 80, 85, 89, 90, 96, 100, 102], "bit": [12, 19, 20, 21, 22, 26, 37, 39, 44, 45, 48, 56, 57, 59, 71, 75, 89, 90, 96, 100, 105, 108], "const_bitvector": [12, 37], "over": [12, 13, 17, 20, 23, 26, 30, 31, 32, 37, 39, 41, 48, 61, 62, 65, 66, 69, 70, 73, 77, 80, 81, 83, 89, 90, 93, 95, 96, 99, 100, 101, 106], "univers": [12, 20, 26, 37, 44, 48, 60, 81, 85, 90, 98, 106], "quantifi": [12, 17, 20, 30, 37, 39, 41, 44, 54, 59, 61, 65, 80, 81, 91, 92, 96, 104, 106, 108], "formula": [12, 13, 17, 20, 30, 37, 39, 41, 44, 54, 60, 61, 65, 68, 77, 80, 81, 90, 91, 93, 95, 96, 98, 104, 106, 109], "foral": [12, 20, 37, 39, 44, 60, 81, 90, 91, 96, 101, 106], "hash": [12, 14, 21, 22, 26, 54], "int32_t": [12, 22, 26], "enumer": [12, 13, 19, 20, 22, 23, 27, 37, 44, 90, 96, 100, 102], "internal_kind": [12, 37], "serv": [12, 22, 37], "abstract": [12, 20, 21, 22, 26, 37, 44, 45, 63, 90, 98], "appear": [12, 17, 22, 30, 37, 41, 61, 65, 80, 90], "queri": [12, 13, 15, 17, 18, 20, 22, 23, 25, 30, 37, 41, 42, 44, 47, 61, 63, 65, 67, 68, 69, 80, 82, 84, 90, 91, 100], "simplifi": [12, 20, 22, 26, 37, 44, 48, 52, 53, 55, 57, 63, 70, 90], "form": [12, 13, 17, 20, 22, 30, 37, 39, 41, 44, 51, 61, 63, 65, 80, 90, 96, 102], "never": [12, 22, 37, 90], "undefined_kind": [12, 37], "undefin": [12, 22, 37], "null_term": [12, 37], "other": [12, 17, 20, 21, 22, 23, 24, 26, 27, 30, 37, 39, 41, 44, 49, 52, 53, 54, 56, 57, 59, 61, 62, 63, 65, 67, 70, 80, 89, 90, 94, 96, 99, 106], "than": [12, 15, 17, 19, 20, 21, 22, 26, 30, 37, 39, 41, 43, 44, 51, 53, 61, 65, 67, 80, 89, 90, 96, 105], "uninterpreted_sort_valu": [12, 37], "uninterpret": [12, 20, 21, 22, 26, 37, 44, 45, 48, 54, 69, 92, 105, 108], "chainabl": [12, 37], "ariti": [12, 20, 21, 37, 44, 45, 54, 55, 70, 81], "n": [12, 20, 26, 37, 39, 44, 48, 50, 51, 53, 55, 58, 68, 69, 70, 77, 78, 79, 85, 86, 89, 90, 96, 98, 101, 102, 103, 104, 105], "mkop": [12, 14, 20, 37, 44, 67, 73, 75, 102], "uint32_t": [12, 14, 20, 21, 22, 26, 44, 96], "distinct": [12, 20, 37, 44, 54, 57, 66, 69, 70, 83, 101, 105, 106], "mkconst": [12, 17, 20, 26, 30, 37, 41, 44, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 101, 102, 103, 105, 106, 109], "Not": [12, 37, 39, 54, 57, 63, 69, 70, 75, 85, 96], "permit": [12, 37], "bind": [12, 23, 28, 29, 37, 50, 85], "exist": [12, 17, 20, 23, 30, 37, 39, 41, 44, 60, 65, 72, 90, 96, 104], "bound": [12, 20, 22, 26, 37, 39, 44, 48, 54, 60, 77, 90, 96, 105], "mkvar": [12, 20, 26, 37, 44, 72, 81, 85, 86, 106], "lambda": [12, 20, 37, 39, 44, 60, 85, 86, 90, 96], "bodi": [12, 20, 37, 44, 60, 68, 85, 86, 90], "sexpr": [12, 37, 51, 52, 53, 54, 56, 57, 63], "0": [12, 17, 20, 21, 26, 29, 30, 37, 39, 41, 44, 45, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 81, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 101, 102, 103, 104, 105, 106, 107, 109], "remov": [12, 20, 37, 39, 44, 62, 63, 90, 96, 101], "cpp": [12, 17, 30, 41, 50, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 98, 101, 106, 109], "variable_list": [12, 37, 81, 106], "wit": [12, 20, 37, 39, 44, 96, 98], "x": [12, 13, 17, 20, 26, 29, 30, 37, 39, 41, 44, 48, 51, 53, 54, 56, 57, 58, 60, 61, 63, 65, 66, 67, 69, 72, 73, 75, 77, 80, 81, 82, 83, 84, 85, 86, 90, 91, 96, 101, 102, 103, 104, 105, 106, 109], "f": [12, 26, 37, 39, 48, 54, 60, 63, 69, 74, 78, 79, 83, 84, 85, 86, 90, 91, 96, 102, 103, 104, 106], "element": [12, 20, 21, 22, 26, 37, 44, 45, 48, 52, 54, 55, 56, 60, 62, 63, 66, 68, 83, 90, 101, 104, 105, 106], "descript": [12, 15, 20, 37, 94, 97], "planetmath": 12, "org": [12, 55, 57, 98], "hilbertsvarepsilonoper": 12, "satisfi": [12, 17, 18, 20, 27, 30, 37, 39, 41, 42, 44, 49, 61, 63, 65, 67, 68, 69, 77, 80, 82, 88, 90, 96, 98, 103, 104], "But": [12, 37], "enforc": [12, 37, 90, 99], "axiom": [12, 37, 39, 90, 96], "ensur": [12, 37, 39, 89, 90, 96, 106], "uniqu": [12, 37, 39, 54, 96, 103], "up": [12, 37, 39, 68, 89, 90, 96], "equiv": [12, 37, 39, 90, 96], "rightarrow": [12, 20, 37, 39, 96, 101], "3": [12, 17, 18, 19, 29, 30, 37, 39, 41, 51, 53, 54, 56, 57, 61, 65, 66, 68, 74, 75, 77, 80, 83, 90, 91, 93, 96, 98, 100, 101, 102, 103, 106], "inst_pattern_list": [12, 37], "primarili": [12, 37], "model": [12, 13, 17, 20, 30, 37, 39, 41, 44, 57, 59, 61, 65, 66, 68, 69, 72, 74, 75, 80, 81, 82, 83, 84, 90, 96, 98, 101, 103, 104, 106], "arithmet": [12, 17, 19, 30, 37, 39, 41, 53, 59, 61, 65, 69, 71, 75, 80, 92, 96, 98, 108, 109], "support": [12, 20, 26, 29, 37, 44, 48, 50, 54, 55, 59, 64, 70, 81, 88, 90, 91, 92, 93, 95, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109], "moreov": [12, 37], "cautiou": [12, 37], "gener": [12, 13, 23, 26, 37, 39, 59, 63, 70, 89, 90, 91, 93, 95, 96, 99, 100], "valid": [12, 13, 15, 20, 37, 39, 90, 96], "semant": [12, 20, 26, 37, 39, 85, 90, 96], "unintuit": [12, 37], "unsatisfi": [12, 17, 18, 20, 30, 37, 41, 44, 59, 61, 63, 65, 73, 80, 104], "wherea": [12, 37], "notic": [12, 17, 30, 37, 39, 41, 61, 65, 96, 104, 106], "z": [12, 26, 37, 39, 48, 51, 53, 54, 56, 57, 74, 75, 84, 96, 103, 104, 105, 106], "const_boolean": [12, 37], "boolean": [12, 13, 17, 20, 21, 22, 23, 26, 30, 37, 39, 41, 44, 45, 48, 59, 60, 61, 63, 65, 69, 76, 80, 85, 86, 90, 96, 98, 100, 103, 104], "mktrue": [12, 20, 37, 44, 68], "mkfals": [12, 20, 37, 44], "mkboolean": [12, 20, 37, 44, 72], "NOT": [12, 37, 39, 68, 75, 81, 85, 96, 100, 106], "negat": [12, 26, 37, 39, 48, 51, 53, 54, 56, 63, 67, 69, 77, 90, 96], "AND": [12, 37, 67, 68, 69, 72, 75, 77, 82, 84, 85, 90, 100], "conjunct": [12, 26, 37, 48, 53, 90], "impli": [12, 20, 37, 39, 44, 52, 54, 67, 68, 69, 73, 75, 90, 96], "implic": [12, 26, 37, 39, 48, 54, 96], "OR": [12, 37, 39, 67, 75, 85, 96], "disjunct": [12, 20, 26, 37, 44, 48, 53, 90], "xor": [12, 37, 39, 53, 54, 67, 96], "exclus": [12, 26, 37, 48, 53, 90], "left": [12, 37, 39, 53, 96, 104, 105], "ITE": [12, 37, 39, 67, 85, 86, 90, 96], "els": [12, 17, 26, 30, 37, 41, 44, 48, 54, 61, 65, 67, 80, 90, 102], "second": [12, 17, 30, 37, 41, 44, 53, 55, 56, 61, 65, 70, 80, 90, 104], "apply_uf": [12, 26, 37, 39, 54, 69, 85, 96, 100], "instanti": [12, 14, 20, 21, 37, 38, 39, 44, 45, 59, 70, 90, 91, 96, 102], "cardinality_constraint": [12, 37], "cardin": [12, 20, 26, 37, 44, 48, 90, 98, 105, 106], "constraint": [12, 17, 20, 26, 30, 37, 41, 44, 48, 54, 59, 61, 63, 65, 77, 80, 81, 85, 86, 90, 98, 104], "interpret": [12, 20, 26, 37, 44, 63, 90, 99, 103, 104, 106], "predic": [12, 20, 21, 37, 39, 44, 45, 51, 55, 83, 90, 96, 101, 102, 104, 106], "uinterpret": [12, 37], "less": [12, 19, 21, 26, 37, 39, 43, 51, 53, 90, 96], "upper": [12, 20, 22, 26, 37, 39, 44, 48, 77, 90, 96], "mkcardinalityconstraint": [12, 20, 37, 44], "ho_appli": [12, 37, 39, 96], "higher": [12, 37, 39, 40, 90, 96], "order": [12, 20, 21, 26, 37, 39, 44, 45, 48, 55, 70, 90, 96, 103, 105], "encod": [12, 20, 37, 39, 44, 57, 67, 96], "domain": [12, 20, 21, 22, 37, 44, 45, 52, 54, 55, 59, 62, 70, 90, 101, 104, 105], "real": [12, 17, 20, 21, 22, 26, 30, 37, 39, 41, 44, 45, 48, 51, 54, 57, 60, 61, 65, 77, 80, 90, 96, 108, 109], "match": [12, 20, 31, 32, 37, 44, 54, 55, 89, 90, 104], "mult": [12, 37, 51, 58, 77, 109], "iand": [12, 37, 90], "integ": [12, 17, 20, 21, 22, 23, 26, 29, 30, 37, 39, 41, 44, 45, 48, 51, 53, 54, 55, 56, 57, 61, 63, 65, 69, 70, 72, 75, 77, 80, 81, 82, 83, 85, 86, 90, 96, 100, 103, 105, 106, 108], "wise": [12, 37, 53], "parameter": [12, 21, 22, 37, 39, 45, 70, 96], "posit": [12, 14, 19, 20, 26, 37, 38, 39, 43, 44, 48, 56, 57, 63, 75, 90, 96, 103, 105], "width": [12, 20, 21, 22, 26, 37, 44, 45, 48, 53, 67, 90], "k": [12, 20, 22, 29, 37, 39, 44, 52, 55, 58, 68, 91, 96], "_": [12, 21, 37, 39, 45, 67, 68, 70, 73, 74, 75, 90, 91, 95, 96, 102, 103, 104, 106], "i_1": [12, 37, 39, 96], "i_2": [12, 37, 39, 96], "bv2int": [12, 37, 53], "bvand": [12, 37, 53, 90], "int2bv": [12, 37, 53], "indic": [12, 13, 14, 20, 25, 26, 37, 38, 39, 44, 47, 48, 57, 90, 91, 93, 96, 99, 100], "pow2": [12, 37, 90], "power": [12, 37, 44, 51, 68, 90], "rais": [12, 20, 37, 63], "neg": [12, 19, 20, 26, 37, 39, 43, 44, 48, 51, 57, 90, 96, 99, 105], "sub": [12, 17, 26, 30, 37, 39, 41, 51, 61, 65, 77, 80, 85, 90, 96, 105], "divis": [12, 20, 37, 51, 53, 57, 90, 103], "ints_divis": [12, 37], "ints_modulu": [12, 37], "modulu": [12, 20, 37, 51, 53], "ab": [12, 37, 74, 84, 90], "absolut": [12, 26, 37, 48, 56, 57], "pow": [12, 37, 51], "exponenti": [12, 37, 39, 51, 96, 109], "sine": [12, 37, 39, 51, 90, 96, 109], "cosin": [12, 37, 51, 109], "tangent": [12, 37, 39, 51, 90, 96, 109], "cosec": [12, 37, 51, 109], "secant": [12, 37, 39, 51, 96, 109], "cotang": [12, 37, 51, 109], "arcsin": [12, 37, 51, 109], "arc": [12, 37], "arccosin": [12, 37, 51, 109], "arctang": [12, 37, 51, 109], "arccosec": [12, 37, 51, 109], "arcsec": [12, 37, 51, 109], "arccotang": [12, 37, 51, 109], "sqrt": [12, 37, 51, 109], "squar": [12, 37, 51, 57, 109], "root": [12, 37, 39, 51, 57, 96, 109], "divid": [12, 17, 30, 37, 41, 61, 65, 80], "const_rat": [12, 37], "precis": [12, 19, 20, 29, 37, 43, 57, 75, 90, 99, 109], "ration": [12, 17, 20, 26, 29, 30, 37, 39, 41, 48, 51, 61, 65, 75, 80, 96, 109], "mkreal": [12, 17, 20, 30, 37, 41, 44, 61, 65, 77, 80, 109], "int64_t": [12, 15, 17, 20, 23, 26, 30, 41, 61, 65, 80, 90, 100], "const_integ": [12, 37], "mkinteg": [12, 17, 20, 30, 37, 41, 44, 61, 65, 66, 69, 70, 77, 80, 82, 83, 84, 85, 86, 101, 105, 106], "lt": [12, 17, 30, 37, 41, 51, 57, 61, 65, 77, 80, 86, 109], "leq": [12, 17, 30, 37, 39, 41, 51, 57, 61, 65, 69, 77, 80, 85, 86, 96, 101], "gt": [12, 37, 51, 57, 70, 82, 90, 109], "greater": [12, 19, 21, 26, 37, 39, 43, 51, 53, 96], "geq": [12, 37, 39, 51, 57, 77, 81, 84, 85, 96, 101], "is_integ": [12, 37], "to_integ": [12, 37], "convert": [12, 17, 20, 30, 37, 39, 41, 44, 48, 54, 55, 61, 63, 65, 75, 80, 90, 96, 97], "floor": [12, 37, 103], "to_real": [12, 37, 51], "pi": [12, 20, 26, 37, 39, 44, 48, 51, 75, 90, 96, 109], "mkpi": [12, 20, 37, 44, 109], "isrealvalu": [12, 26, 37, 48], "fix": [12, 20, 21, 26, 37, 39, 44, 45, 48, 96, 105], "mkbitvector": [12, 20, 37, 44, 67, 68, 75], "uint64_t": [12, 15, 17, 20, 23, 26, 30, 41, 61, 65, 80, 90, 100], "bitvector_concat": [12, 37], "concaten": [12, 26, 37, 39, 48, 53, 82, 84, 96, 105], "bitvector_and": [12, 37], "bitvector_or": [12, 37], "bitvector_xor": [12, 37, 67], "bitvector_not": [12, 37], "bitvector_nand": [12, 37], "nand": [12, 37], "bitvector_nor": [12, 37], "nor": [12, 37], "bitvector_xnor": [12, 37], "xnor": [12, 37], "bitvector_comp": [12, 37], "comparison": [12, 21, 26, 37, 39, 53, 90, 96], "bitvector_mult": [12, 37, 68], "bitvector_add": [12, 37, 67], "bitvector_sub": [12, 37, 67], "bitvector_neg": [12, 37], "complement": [12, 37, 53, 62, 90, 106], "bitvector_udiv": [12, 37], "unsign": [12, 16, 37, 48, 53, 57, 68, 90], "truncat": [12, 37], "toward": [12, 19, 37, 43, 57], "divisor": [12, 37], "zero": [12, 17, 19, 20, 26, 30, 31, 32, 37, 39, 41, 43, 44, 48, 53, 57, 61, 65, 68, 69, 75, 80, 85, 86, 90, 91, 96, 99], "bitvector_urem": [12, 37], "remaind": [12, 37, 53, 57, 103], "dividend": [12, 37], "bitvector_sdiv": [12, 37], "sign": [12, 20, 26, 37, 39, 44, 48, 53, 57, 90, 96, 100], "bitvector_srem": [12, 37], "bitvector_smod": [12, 37], "bitvector_shl": [12, 37], "shift": [12, 37, 39, 53, 90, 96], "bitvector_lshr": [12, 37], "right": [12, 17, 30, 37, 39, 41, 53, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 96, 101, 104, 105, 106, 109], "bitvector_ashr": [12, 37], "bitvector_ult": [12, 37], "bitvector_ul": [12, 37], "bitvector_ugt": [12, 37], "bitvector_ug": [12, 37], "bitvector_slt": [12, 37, 68], "bitvector_sl": [12, 37], "bitvector_sgt": [12, 37, 68], "bitvector_sg": [12, 37], "bitvector_ultbv": [12, 37], "bitvector_sltbv": [12, 37], "bitvector_it": [12, 37, 90], "condit": [12, 20, 26, 37, 39, 44, 48, 86, 90, 95, 96], "bitvector_redor": [12, 37], "redor": [12, 37], "bitvector_redand": [12, 37], "redand": [12, 37], "bitvector_nego": [12, 37], "overflow": [12, 37, 68], "detect": [12, 37], "bitvector_uaddo": [12, 37], "bitvector_saddo": [12, 37], "bitvector_umulo": [12, 37], "bitvector_smulo": [12, 37], "bitvector_usubo": [12, 37], "bitvector_ssubo": [12, 37], "bitvector_sdivo": [12, 37], "bitvector_extract": [12, 14, 20, 37, 38, 67, 73], "extract": [12, 37, 53, 55, 67, 69, 71, 89, 90, 105], "lower": [12, 26, 37, 39, 48, 90, 96], "bitvector_repeat": [12, 20, 37], "repeat": [12, 37, 90], "time": [12, 17, 20, 27, 30, 37, 41, 44, 49, 53, 61, 65, 80, 90, 103], "bitvector_zero_extend": [12, 20, 37], "extens": [12, 37, 81, 88, 101, 102, 104, 106, 109], "extend": [12, 37, 39, 90, 95, 96, 109], "bitvector_sign_extend": [12, 20, 37], "bitvector_rotate_left": [12, 20, 37], "rotat": [12, 37, 53], "bitvector_rotate_right": [12, 20, 37], "int_to_bitvector": [12, 20, 37], "convers": [12, 37, 57, 90, 107], "bitvector_to_nat": [12, 37], "const_finite_field": [12, 37], "field": [12, 20, 21, 22, 26, 37, 44, 45, 48, 55, 59, 71, 98, 102, 108], "mkfinitefieldelem": [12, 20, 37, 44, 74, 103], "finite_field_neg": [12, 37], "invers": [12, 37, 56, 90], "finite_field_add": [12, 37, 74, 103], "finite_field_bitsum": [12, 37], "bitsum": [12, 37], "2y": [12, 37], "4z": [12, 37], "finite_field_mult": [12, 37, 74, 103], "const_floatingpoint": [12, 37], "float": [12, 17, 19, 20, 21, 22, 26, 30, 37, 41, 43, 44, 45, 48, 51, 54, 59, 61, 65, 71, 80, 98, 100, 108], "ieee": [12, 19, 20, 37, 44, 57, 75, 89, 98], "754": [12, 19, 20, 37, 44, 75, 89, 98], "mkfloatingpoint": [12, 20, 37, 44, 75], "const_roundingmod": [12, 37], "mkroundingmod": [12, 20, 37, 44, 75], "floatingpoint_fp": [12, 37], "liter": [12, 13, 20, 37, 39, 44, 54, 90, 91, 96, 104], "tripl": [12, 37], "expon": [12, 20, 21, 22, 26, 37, 39, 44, 45, 48, 57, 96], "significand": [12, 20, 21, 22, 26, 37, 44, 45, 48, 57], "without": [12, 17, 20, 30, 37, 41, 44, 61, 65, 75, 80, 99], "hidden": [12, 37], "floatingpoint_eq": [12, 37, 75], "floatingpoint_ab": [12, 37], "floatingpoint_neg": [12, 37], "floatingpoint_add": [12, 37, 75], "floatingpoint_sub": [12, 37], "sutract": [12, 37], "floatingpoint_mult": [12, 37], "multipli": [12, 17, 30, 37, 41, 57, 61, 65, 80], "floatingpoint_div": [12, 37], "floatingpoint_fma": [12, 37], "fuse": [12, 37, 57], "4": [12, 17, 19, 30, 37, 41, 51, 53, 56, 57, 61, 65, 66, 68, 80, 89, 90, 100, 101, 102, 106], "floatingpoint_sqrt": [12, 37], "floatingpoint_rem": [12, 37], "floatingpoint_rti": [12, 37], "round": [12, 19, 20, 21, 22, 26, 37, 43, 44, 45, 48, 59, 68, 75, 90], "integr": [12, 26, 37, 59, 89, 98, 100], "floatingpoint_min": [12, 37], "minimum": [12, 15, 37, 39, 56, 57, 89, 90, 96], "floatingpoint_max": [12, 37], "maximum": [12, 15, 37, 39, 57, 77, 89, 90, 96], "floatingpoint_leq": [12, 37, 75], "floatingpoint_lt": [12, 37, 75], "floatingpoint_geq": [12, 37], "floatingpoint_gt": [12, 37], "floatingpoint_is_norm": [12, 37, 75], "normal": [12, 20, 37, 39, 44, 57, 75, 90, 96], "floatingpoint_is_subnorm": [12, 37], "floatingpoint_is_zero": [12, 37], "floatingpoint_is_inf": [12, 37, 75], "infinit": [12, 19, 37, 43, 55, 90, 105, 106], "floatingpoint_is_nan": [12, 37, 75], "nan": [12, 20, 26, 37, 44, 57, 75], "floatingpoint_is_neg": [12, 37], "floatingpoint_is_po": [12, 37], "floatingpoint_to_fp_from_ieee_bv": [12, 20, 37], "floatingpoint_to_fp_from_fp": [12, 20, 37], "floatingpoint_to_fp_from_r": [12, 20, 37], "floatingpoint_to_fp_from_sbv": [12, 20, 37], "floatingpoint_to_fp_from_ubv": [12, 20, 37], "floatingpoint_to_ubv": [12, 20, 37], "floatingpoint_to_sbv": [12, 20, 37, 75], "floatingpoint_to_r": [12, 37, 75], "select": [12, 19, 20, 32, 37, 39, 43, 44, 52, 68, 90, 91, 96, 99, 102, 106], "const_arrai": [12, 37], "eq_rang": [12, 37], "b": [12, 17, 20, 21, 29, 30, 37, 39, 41, 45, 51, 52, 53, 54, 55, 56, 57, 61, 62, 63, 65, 66, 67, 74, 75, 78, 79, 80, 81, 83, 90, 91, 92, 93, 95, 96, 98, 101, 102, 104, 105, 106], "rang": [12, 20, 37, 39, 52, 54, 55, 62, 68, 70, 75, 84, 85, 86, 90, 96], "j": [12, 20, 37, 39, 44, 52, 55, 70, 89, 96, 98, 102, 105], "inclus": [12, 37, 90], "creation": [12, 37], "enabl": [12, 17, 20, 28, 30, 37, 41, 44, 61, 63, 65, 80, 89, 90, 91, 102, 109], "exp": [12, 20, 37, 39, 44, 57, 82, 84, 90, 96, 109], "misappli": [12, 37], "belong": [12, 13, 37, 104], "libv2": [12, 17, 30, 37, 41, 61, 64, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 90, 101, 106, 109], "l": [12, 29, 37, 39, 55, 89, 90, 96, 98, 104, 107], "h": [12, 17, 30, 37, 39, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 96, 101, 104, 106, 109], "ast": [12, 26, 37, 48, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 90], "match_bind_cas": [12, 37], "match_cas": [12, 37], "pattern": [12, 37, 59, 90], "cover": [12, 15, 37, 39, 89, 90, 96], "least": [12, 19, 20, 37, 43, 44, 54, 83, 90, 106], "catch": [12, 37, 72], "against": [12, 37], "evalu": [12, 17, 30, 37, 39, 41, 53, 61, 63, 65, 70, 80, 90, 96, 102], "binder": [12, 20, 37, 39, 44, 96], "tuple_project": [12, 20, 37, 102], "project": [12, 17, 30, 37, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 101, 102, 106, 109], "take": [12, 21, 26, 37, 39, 45, 48, 57, 62, 89, 90, 96, 99], "obtain": [12, 15, 17, 20, 23, 30, 37, 39, 41, 44, 46, 61, 65, 80, 96, 100, 105, 107], "compon": [12, 13, 17, 20, 30, 37, 39, 41, 44, 61, 65, 80, 96, 99], "10": [12, 17, 20, 26, 30, 37, 41, 44, 48, 51, 52, 53, 55, 56, 57, 61, 63, 65, 74, 79, 80, 86, 89, 90, 98], "20": [12, 37, 55, 57, 98], "30": [12, 37, 63, 73, 90], "40": [12, 37], "yield": [12, 37], "sep_nil": [12, 37], "separ": [12, 20, 37, 44, 50, 54, 77, 85, 86, 98, 108], "mksepnil": [12, 20, 37, 44, 104], "sep_emp": [12, 37], "heap": [12, 20, 37, 44, 90, 104], "mksepemp": [12, 20, 37, 44, 104], "sep_pto": [12, 37, 104], "relat": [12, 20, 21, 37, 39, 44, 59, 71, 86, 88, 90, 96, 98, 104, 108], "denot": [12, 17, 20, 21, 22, 30, 37, 39, 41, 44, 45, 61, 65, 80, 81, 96, 102, 104, 105], "locat": [12, 20, 37, 44, 89, 104], "data": [12, 20, 26, 37, 44, 48, 98, 102, 104], "sep_star": [12, 37, 104], "star": [12, 37, 104], "child": [12, 26, 37, 48, 69], "hold": [12, 15, 23, 26, 37, 39, 48, 54, 68, 75, 83, 90, 91, 95, 96, 106], "disjoint": [12, 37, 66, 81, 101, 104], "sep_wand": [12, 37, 104], "magic": [12, 37, 104], "wand": [12, 37, 104], "antecend": [12, 37], "conclus": [12, 37, 39, 90, 96], "anteced": [12, 37], "set_empti": [12, 37], "mkemptyset": [12, 20, 37, 44, 81, 83, 106], "set_union": [12, 37, 81, 83, 106], "union": [12, 26, 37, 39, 48, 55, 62, 66, 81, 83, 84, 96, 101, 104, 106], "set_int": [12, 37, 81, 83, 106], "intersect": [12, 37, 39, 62, 66, 81, 83, 90, 96, 101, 106], "set_minu": [12, 37, 106], "set_subset": [12, 37, 81, 83, 106], "subset": [12, 13, 17, 20, 30, 37, 41, 44, 61, 62, 65, 80, 81, 83, 90, 106], "set_memb": [12, 37, 81, 83, 106], "membership": [12, 37, 90, 101, 106], "member": [12, 15, 37, 62, 81, 83, 101, 106], "set_singleton": [12, 37, 83, 106], "singleton": [12, 26, 37, 48, 62, 83, 106], "set_insert": [12, 37, 106], "insert": [12, 37, 63, 85, 86, 89, 106], "set_card": [12, 37, 106], "set_compl": [12, 37, 106], "respect": [12, 15, 20, 23, 26, 37, 39, 90, 96, 99, 104, 108], "set_univers": [12, 26, 37, 48], "mkuniverseset": [12, 20, 37, 44, 81, 106], "theori": [12, 13, 19, 20, 21, 26, 27, 37, 39, 44, 49, 59, 71, 88, 92, 93, 95, 96, 98, 99, 100], "issetvalu": [12, 26, 37, 48], "set_comprehens": [12, 37], "comprehens": [12, 37, 93, 97], "x_1": [12, 20, 37, 39, 44, 96], "x_n": [12, 37, 39, 44, 96], "p": [12, 20, 26, 37, 39, 44, 54, 55, 60, 63, 69, 90, 91, 96, 98, 103], "y": [12, 17, 26, 29, 30, 37, 39, 41, 48, 51, 53, 54, 56, 57, 60, 61, 63, 65, 69, 75, 77, 80, 82, 84, 85, 90, 91, 96, 98, 101, 103, 104, 105, 106, 109], "wedg": [12, 17, 20, 30, 37, 39, 41, 44, 61, 65, 96], "leftrightarrow": [12, 37, 39, 96], "set_choos": [12, 37], "choos": [12, 17, 30, 37, 41, 61, 65, 80, 89, 90], "determinist": [12, 37, 99], "set_is_singleton": [12, 37], "set_map": [12, 37], "s_1": [12, 37, 39, 96], "s_2": [12, 37, 39, 96], "set_filt": [12, 37], "filter": [12, 13, 37, 90], "bag": [12, 20, 21, 22, 37, 44, 45, 59, 71, 108], "set_fold": [12, 37], "fold": [12, 37, 94], "combin": [12, 37, 71, 81, 88, 90, 108], "start": [12, 17, 20, 30, 31, 32, 37, 41, 44, 61, 65, 80, 85, 90, 91, 93, 95, 104, 105], "relation_join": [12, 37, 81, 106], "join": [12, 37, 81, 106], "relation_product": [12, 37, 106], "cartesian": [12, 37], "product": [12, 29, 37, 53, 56, 63, 88, 90, 106], "relation_transpos": [12, 37, 81, 106], "transpos": [12, 37, 81, 106], "relation_tclosur": [12, 37, 81, 106], "transit": [12, 20, 37, 39, 44, 81, 86, 90, 96, 106], "closur": [12, 37, 81, 106], "relation_join_imag": [12, 37], "imag": [12, 37], "relation_iden": [12, 37], "ident": [12, 14, 37, 54, 102], "relation_group": [12, 37], "group": [12, 37, 90], "rel": [12, 37, 81, 106], "n_1": [12, 37], "dot": [12, 37, 39, 44, 48, 90, 96, 97], "n_k": [12, 37], "partit": [12, 37, 90], "part": [12, 17, 20, 28, 30, 37, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 92, 99, 100, 101, 105, 106, 109], "relation_aggreg": [12, 37], "aggreg": [12, 37], "aggr": [12, 37], "natur": [12, 37, 101, 109], "t_1": [12, 37, 39, 96], "t_j": [12, 37], "relation_project": [12, 37], "bag_empti": [12, 37], "mkemptybag": [12, 20, 37, 44, 66, 101], "bag_union_max": [12, 37, 66, 101], "max": [12, 37, 54, 66, 85, 90, 101], "bag_union_disjoint": [12, 37, 66, 101], "sum": [12, 37, 39, 51, 53, 55, 56, 63, 69, 90, 96], "bag_inter_min": [12, 37, 66, 101], "min": [12, 37, 85, 90, 101, 107], "bag_difference_subtract": [12, 37, 101], "bag_difference_remov": [12, 37], "share": [12, 20, 26, 29, 37, 71, 90, 92], "bag_subbag": [12, 37, 66, 101], "bag_count": [12, 37, 66, 101], "bag_memb": [12, 37, 101], "bag_duplicate_remov": [12, 37, 101], "duplic": [12, 21, 26, 37, 45, 48, 101], "elimin": [12, 20, 37, 39, 44, 90, 96, 101], "exactli": [12, 20, 37, 44], "bag_mak": [12, 37, 66, 101], "make": [12, 20, 23, 29, 37, 44, 50, 68, 73, 75, 82, 84, 89, 90, 101, 106], "bag_card": [12, 37], "bag_choos": [12, 37], "bag_is_singleton": [12, 37], "bag_from_set": [12, 37], "bag_to_set": [12, 37], "bag_map": [12, 37], "bag_filt": [12, 37], "subbag": [12, 37, 66, 101], "bag_fold": [12, 37], "bag_partit": [12, 37], "r": [12, 18, 25, 37, 39, 54, 55, 63, 74, 75, 78, 84, 89, 91, 96, 102, 103], "table_product": [12, 37], "cross": [12, 37, 90], "table_project": [12, 37], "table_aggreg": [12, 37], "table_join": [12, 37], "m_1": [12, 37, 101], "m_k": [12, 37], "table_group": [12, 37], "string_concat": [12, 37, 84], "concat": [12, 37, 53, 57, 82, 90], "string_in_regexp": [12, 37, 84], "reglan": [12, 21, 37, 45, 84, 107], "string_length": [12, 37, 84], "length": [12, 21, 37, 39, 45, 82, 84, 85, 86, 90, 96, 105], "string_substr": [12, 37], "substr": [12, 37, 39, 96, 107], "string_upd": [12, 37], "replac": [12, 21, 26, 37, 39, 44, 45, 48, 63, 90, 96, 102, 105], "otherwis": [12, 20, 21, 24, 37, 39, 44, 48, 89, 90, 96, 105, 107], "origin": [12, 17, 30, 37, 39, 41, 61, 65, 80, 90, 96], "preserv": [12, 37], "strong": [12, 37, 90], "string_charat": [12, 37], "charact": [12, 20, 37, 44, 90, 100, 107], "string_contain": [12, 37], "whether": [12, 15, 17, 20, 23, 25, 30, 37, 39, 41, 44, 47, 54, 57, 61, 63, 65, 68, 76, 80, 90, 96, 100, 102], "anoth": [12, 17, 27, 30, 37, 41, 49, 61, 65, 67, 79, 80, 90, 99], "alwai": [12, 20, 37, 39, 44, 55, 62, 90, 96, 100, 106], "string_indexof": [12, 37], "string_indexof_r": [12, 37], "string_replac": [12, 37], "s_3": [12, 37], "unmodifi": [12, 37], "string_replace_al": [12, 37], "occurr": [12, 37, 39, 63, 96, 102, 105], "string_replace_r": [12, 37], "string_replace_re_al": [12, 37], "string_to_low": [12, 37], "string_to_upp": [12, 37], "string_rev": [12, 37], "revers": [12, 37, 39, 96, 105, 107], "string_to_cod": [12, 37], "code": [12, 37, 39, 54, 67, 68, 89, 90, 96, 107], "string_from_cod": [12, 37], "string_lt": [12, 37], "strictli": [12, 37], "lexiograph": [12, 37], "string_leq": [12, 37], "string_prefix": [12, 37], "s1": [12, 37, 84, 105], "string_suffix": [12, 37], "suffix": [12, 37, 39, 96, 105], "string_is_digit": [12, 37], "digit": [12, 19, 37, 43], "9": [12, 17, 29, 30, 37, 41, 61, 65, 80, 89], "string_from_int": [12, 37], "string_to_int": [12, 37], "total": [12, 37, 90], "const_str": [12, 37], "mkstring": [12, 20, 37, 44, 66, 84, 101], "wstring": [12, 20, 26], "string_to_regexp": [12, 37, 84], "regexp": [12, 20, 37, 45, 90], "regexp_concat": [12, 37, 84], "regexp_union": [12, 37, 84], "regexp_int": [12, 37], "regexp_diff": [12, 37], "regexp_star": [12, 37, 84], "regexp_plu": [12, 37], "regexp_opt": [12, 37], "regexp_rang": [12, 37, 84], "regexp_repeat": [12, 37], "repetit": [12, 37], "regexp_loop": [12, 37], "loop": [12, 37, 68, 69, 70, 90], "regexp_non": [12, 37], "none": [12, 13, 20, 37, 44, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 90, 92], "mkregexpnon": [12, 20, 37, 44], "regexp_al": [12, 37], "mkregexpal": [12, 20, 37, 44], "regexp_allchar": [12, 37], "mkregexpallchar": [12, 20, 37, 44], "regexp_compl": [12, 37], "seq_concat": [12, 26, 37, 82, 105], "sequenc": [12, 20, 21, 22, 26, 37, 39, 44, 45, 48, 53, 71, 90, 96, 100, 108], "seq_length": [12, 37, 82, 105], "seq_extract": [12, 37, 105], "subsequ": [12, 37], "seq_upd": [12, 37, 105], "seq_at": [12, 37, 105], "seq_contain": [12, 37, 105], "check": [12, 17, 20, 27, 30, 37, 39, 41, 44, 49, 55, 57, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 109], "seq_indexof": [12, 37, 105], "seq_replac": [12, 37, 105], "seq_replace_al": [12, 37, 105], "seq_rev": [12, 37, 105], "seq_prefix": [12, 37, 105], "seq_suffix": [12, 37, 105], "const_sequ": [12, 26, 37], "seq": [12, 26, 37, 82, 90, 105], "unit": [12, 13, 26, 37, 39, 48, 82, 90, 96, 102, 105, 106], "c1": [12, 26, 37, 48, 90, 102, 104], "cn": [12, 37, 104], "c_1": [12, 26, 37, 39, 48, 96], "c_n": [12, 26, 37, 39, 48, 96], "some": [12, 13, 15, 17, 20, 26, 30, 37, 39, 41, 44, 48, 59, 61, 65, 68, 69, 77, 80, 89, 90, 96, 99, 100, 102, 105, 107], "getsequencevalu": [12, 26, 37, 48], "mkemptysequ": [12, 20, 37, 44, 82, 105], "seq_unit": [12, 26, 37, 82, 105], "seq_nth": [12, 37, 105], "nth": [12, 37, 105], "inst_pattern": [12, 37], "existenti": [12, 37, 60, 90], "under": [12, 17, 30, 37, 39, 41, 61, 65, 80, 89, 90, 96], "inst_no_pattern": [12, 37], "inst_pool": [12, 20, 37], "pool": [12, 20, 37, 44, 90], "annot": [12, 37, 39, 90, 91, 96], "declarepool": [12, 20, 37, 44], "q": [12, 20, 37, 39, 44, 51, 54, 60, 63, 82, 84, 90, 91, 96, 103], "occur": [12, 13, 37, 39, 90, 96, 99], "altern": [12, 14, 15, 17, 26, 30, 37, 39, 41, 50, 61, 64, 65, 69, 70, 80, 89, 90, 96, 102, 109], "pair": [12, 13, 17, 20, 26, 29, 30, 37, 41, 44, 48, 55, 61, 63, 65, 80, 102], "compris": [12, 37], "verbatim": [12, 39, 90], "emb": [12, 39], "rst": [12, 39], "lead": [12, 39, 90], "asterisk": [12, 39], "warn": [12, 93, 95], "inst_add_to_pool": [12, 37], "instantanti": [12, 37], "assum": [12, 20, 37, 39, 44, 53, 54, 55, 63, 66, 67, 69, 73, 75, 83, 90, 91, 92, 93, 96, 101, 102, 103, 104, 105, 106], "skolem_add_to_pool": [12, 37], "skolem": [12, 37, 39, 90, 96], "inst_attribut": [12, 37], "attribut": [12, 20, 37, 44], "custom": [12, 37, 63, 90, 94], "properti": [12, 37, 75, 100], "ascrib": [12, 37], "keyword": [12, 20, 37, 44, 63], "last_kind": [12, 37], "mark": [12, 22, 37], "templat": [12, 14, 15, 21, 22, 26, 90], "struct": [12, 14, 15, 21, 22, 26], "blockmodel": [13, 20, 44], "pc": 13, "target": [13, 20, 44, 96], "block": [13, 20, 44, 90, 102], "how": [13, 20, 23, 39, 44, 64, 69, 71, 75, 78, 79, 85, 86, 89, 90, 96, 100, 101, 106], "blockmodelvalu": [13, 20, 44], "sat": [13, 17, 18, 20, 29, 30, 39, 41, 44, 55, 57, 61, 63, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 91, 92, 93, 95, 96, 98, 99, 101, 102, 103, 104, 105, 106, 109], "skeleton": 13, "learn": [13, 20, 44, 90], "categori": [13, 89], "getlearnedliter": [13, 20, 44], "note": [13, 20, 21, 39, 44, 45, 48, 51, 54, 57, 58, 70, 79, 89, 90, 93, 95, 96, 97, 98, 102, 103, 107], "conceptu": [13, 96], "classifi": 13, "criteria": [13, 90], "thei": [13, 15, 17, 26, 30, 39, 41, 61, 65, 80, 89, 90, 91, 96, 99], "meet": [13, 90], "preprocess_solv": 13, "turn": [13, 17, 19, 30, 41, 48, 61, 65, 80, 90], "substitut": [13, 21, 26, 39, 45, 48, 63, 90, 91, 96], "dure": [13, 21, 26, 45, 48, 89, 90, 91, 99], "preprocess": [13, 27, 49, 90, 91, 99], "particular": [13, 15, 20, 23, 39, 90, 96, 100, 102, 106], "top": [13, 17, 20, 30, 39, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 96, 101, 102, 106, 109], "level": [13, 17, 20, 30, 40, 41, 44, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 96, 101, 106, 109], "claus": [13, 39, 90, 96], "typic": 13, "interest": [13, 20, 44, 69, 89, 90], "solvabl": [13, 90], "constant_prop": 13, "made": [13, 20, 44], "propag": [13, 39, 59, 90, 96], "fall": 13, "unknown": [13, 17, 18, 20, 25, 27, 30, 39, 41, 42, 44, 47, 61, 63, 65, 80, 90, 91, 96, 99], "produc": [13, 17, 20, 30, 41, 44, 54, 61, 65, 66, 68, 69, 72, 74, 75, 80, 81, 82, 83, 84, 89, 90, 92, 93, 95, 97, 101, 106], "proof": [13, 20, 39, 44, 75, 88, 98], "raw_preprocess": 13, "g1": 13, "gn": 13, "assumpt": [13, 20, 39, 44, 63, 67, 69, 90, 96], "f1": [13, 96, 104], "fm": 13, "necessarili": 13, "gu1": 13, "gun": 13, "fu1": 13, "fum": 13, "unsat": [13, 17, 18, 20, 29, 30, 39, 41, 44, 55, 57, 61, 63, 65, 66, 67, 69, 72, 73, 74, 75, 77, 78, 80, 90, 92, 93, 95, 96, 100, 101, 103, 104, 105, 106, 109], "core": [13, 17, 20, 29, 30, 39, 41, 44, 59, 61, 65, 80, 89, 90, 96, 99, 100], "immedi": [13, 20, 44, 99], "respons": [13, 20, 26, 44, 90], "l1": [13, 55], "lk": 13, "lemma": [13, 20, 39, 44, 90, 96, 99, 100], "theory_lemma": 13, "contrast": [13, 20, 26, 44, 99], "find": [13, 20, 44, 66, 75, 81, 83, 90, 101, 106], "synthesi": [13, 20, 25, 44, 47, 59, 85, 86, 90], "findsynth": [13, 20, 44], "These": [13, 19, 51, 54, 56, 90, 92, 96], "variou": [13, 90], "rewrit": [13, 39, 90, 92, 93, 95, 96, 99], "do": [13, 17, 20, 23, 30, 41, 44, 50, 54, 61, 63, 65, 67, 68, 79, 80, 90], "8212": 13, "synthes": [13, 20, 44, 85, 86, 90, 91], "possibl": [13, 15, 17, 23, 30, 39, 41, 61, 65, 80, 89, 90, 96, 99, 106], "scratch": 13, "rewrite_unsound": 13, "test": [13, 17, 30, 41, 54, 65, 68, 70, 72, 74, 90, 91, 92, 93, 95, 100], "correct": [13, 39, 90, 96], "unsound": [13, 39, 96], "rewrite_input": 13, "between": [13, 20, 39, 44, 75, 90, 96], "matchabl": 13, "problem": [13, 20, 44, 63, 67, 68, 71, 74, 75, 81, 88, 89, 90, 91, 106], "algorithm": [13, 39, 90, 96], "gen": [13, 90], "solv": [13, 17, 20, 30, 41, 51, 53, 54, 55, 56, 59, 61, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 98, 99, 100, 106], "usual": [14, 20, 44, 48, 64, 89, 99], "children": [14, 20, 22, 26, 39, 48, 54, 55, 60, 69, 90, 96, 102], "even": [14, 17, 19, 20, 30, 39, 41, 43, 57, 61, 65, 70, 80, 90, 96, 106], "arg": [14, 17, 20, 30, 39, 41, 44, 51, 52, 53, 54, 55, 56, 61, 62, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 91, 93, 96, 101, 106, 109], "syntact": [14, 20, 26, 44], "getkind": [14, 21, 26, 38, 45, 48, 85, 86], "isindex": [14, 38], "iff": [14, 26, 38, 39, 44, 45, 48, 96, 102, 104], "getnumindic": [14, 38], "inform": [15, 17, 20, 23, 24, 30, 41, 44, 46, 55, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 91, 100, 101, 103, 106, 109], "info": [15, 20, 44, 103, 104, 105], "about": [15, 20, 44, 55, 66, 81, 82, 83, 84, 91, 96, 100, 101, 106], "alias": [15, 63, 90], "concern": 15, "inspect": [15, 23, 26, 90, 100], "valueinfo": 15, "voidinfo": 15, "nativ": [15, 26, 48, 89], "default": [15, 16, 20, 21, 23, 26, 39, 44, 46, 48, 52, 57, 62, 63, 89, 90, 94, 96, 100], "numberinfo": 15, "doubl": [15, 23, 39, 57, 90, 96, 100], "modeinfo": 15, "conveni": [15, 96], "manner": [15, 39, 90, 96], "boolvalu": 15, "stringvalu": 15, "intvalu": 15, "uintvalu": 15, "doublevalu": 15, "also": [15, 17, 20, 21, 23, 26, 30, 39, 41, 44, 45, 51, 53, 55, 56, 61, 65, 69, 70, 75, 77, 80, 89, 90, 92, 95, 96, 100, 102, 106, 108], "getdriveropt": [15, 20], "optioninfovari": 15, "variant": [15, 55], "setbyus": [15, 63], "isexpert": 15, "expert": [15, 90], "defaultvalu": 15, "currentvalu": 15, "typenam": [15, 26], "numer": [15, 17, 20, 26, 30, 31, 32, 41, 44, 51, 53, 56, 57, 61, 65, 80, 90, 103], "basic": [15, 59, 76, 90, 93, 95], "oi": 15, "parserendoffileexcept": 16, "msg": 16, "long": [16, 51, 53, 54, 56, 57, 99], "line": [16, 20, 39, 64, 89, 90, 96, 100, 109], "column": 16, "getfilenam": 16, "getlin": 16, "getcolumn": 16, "instanc": [17, 20, 23, 30, 41, 54, 55, 83, 90, 102, 106], "ask": [17, 30, 41, 61, 65, 72, 80], "setopt": [17, 20, 30, 41, 44, 61, 63, 65, 66, 68, 69, 72, 74, 75, 78, 80, 81, 82, 83, 84, 85, 86, 90, 101, 106], "simplest": [17, 30, 41, 61, 65, 80], "wai": [17, 19, 30, 39, 41, 61, 64, 65, 80, 90, 96, 99], "qf_all": [17, 30, 41, 61, 65, 80, 104, 106], "To": [17, 30, 39, 41, 55, 61, 65, 70, 80, 89, 93, 96, 99, 102, 104, 109], "optim": [17, 30, 39, 41, 61, 65, 80, 90, 96], "behavior": [17, 30, 41, 61, 65, 80], "qf_bv": [17, 30, 41, 61, 65, 67, 73, 80], "qf_aufbv": [17, 30, 41, 61, 65, 68, 80], "setlog": [17, 20, 30, 41, 44, 61, 65, 66, 67, 68, 69, 73, 74, 75, 77, 80, 81, 82, 83, 84, 85, 86, 101, 102, 103, 104, 105, 106, 109], "realsort": [17, 30, 41, 51, 53, 54, 60, 61, 65, 80], "getrealsort": [17, 20, 22, 30, 41, 44, 61, 65, 77, 80, 109], "intsort": [17, 30, 41, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 65, 69, 70, 80, 83, 105], "getintegersort": [17, 20, 22, 30, 41, 44, 61, 65, 69, 70, 72, 77, 80, 81, 82, 83, 85, 86, 102, 105, 106], "now": [17, 30, 41, 55, 61, 65, 70, 75, 78, 79, 80, 90], "regard": [17, 30, 41, 61, 65, 80], "them": [17, 30, 41, 61, 63, 65, 70, 80, 90, 91, 93, 95], "formal": [17, 30, 39, 41, 61, 65, 80, 96, 98], "Their": [17, 30, 41, 61, 65, 80], "gradual": [17, 30, 41, 61, 65, 80], "xplusi": [17, 30, 41, 61, 65, 80], "src": [17, 30, 41, 50, 61, 65, 80, 105], "cvc5_kind": [17, 30, 41, 61, 65, 80], "constraint1": [17, 30, 41, 61, 65, 80], "constraint2": [17, 30, 41, 61, 65, 80], "constraint3": [17, 30, 41, 61, 65, 80], "constraint4": [17, 30, 41, 61, 65, 80], "assertformula": [17, 20, 30, 41, 44, 61, 65, 67, 68, 69, 70, 73, 74, 75, 77, 80, 81, 106, 109], "r1": [17, 30, 41, 61, 65, 80], "checksat": [17, 18, 20, 30, 41, 42, 44, 61, 65, 67, 69, 70, 72, 74, 75, 77, 78, 80, 81, 90, 99, 106, 109], "statu": [17, 30, 39, 41, 90, 96, 103, 104, 105], "issat": [17, 18, 30, 41, 42, 66, 74, 75, 82, 83, 84, 101, 106], "isunsat": [17, 18, 30, 41, 42], "issatunknown": [17, 30, 41], "cout": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "endl": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "xval": [17, 30, 41, 61, 65, 80], "getvalu": [17, 20, 26, 30, 41, 44, 61, 65, 66, 68, 69, 74, 75, 80, 81, 82, 83, 84, 101, 106], "yval": [17, 30, 41, 61, 65, 80], "xminusi": [17, 30, 41, 61, 65, 80], "xminusyv": [17, 30, 41, 61, 65, 80], "xstr": [17, 30, 41, 61, 65, 80], "getrealvalu": [17, 26, 30, 41, 48, 61, 65, 80], "ystr": [17, 30, 41, 61, 65, 80], "xminusystr": [17, 30, 41, 61, 65, 80], "further": [17, 30, 41, 61, 65, 80, 89, 90], "xpair": [17, 30, 41, 61, 65, 80], "getreal64valu": [17, 26, 30, 41, 61, 65, 80], "ypair": [17, 30, 41, 61, 65, 80], "xminusypair": [17, 30, 41, 61, 65, 80], "independ": [17, 23, 30, 41, 61, 65, 80, 90], "comput": [17, 20, 30, 39, 41, 44, 50, 61, 65, 80, 90, 91, 95, 96, 98], "would": [17, 30, 41, 50, 61, 65, 80], "perform": [17, 27, 30, 39, 41, 49, 61, 65, 80, 89, 90, 91, 92, 95, 96, 103, 107], "manual": [17, 30, 41, 61, 63, 65, 80, 89, 93], "complex": [17, 30, 41, 61, 65, 80, 90], "easier": [17, 23, 30, 41, 61, 65, 80], "let": [17, 20, 30, 39, 41, 44, 55, 61, 65, 75, 80, 90, 91, 94, 96, 103, 107], "xminusycomput": [17, 30, 41, 61, 65, 80], "gcd": [17, 30, 41, 61, 65, 80], "correctli": [17, 30, 39, 41, 61, 65, 80, 96], "incorrectli": [17, 30, 41, 61, 65, 80], "reset": [17, 20, 30, 41, 44, 61, 63, 65, 80, 104], "resetassert": [17, 20, 30, 41, 44, 61, 63, 65, 80], "revis": [17, 30, 41, 61, 65, 80, 98], "r2": [17, 30, 41, 61, 65, 80], "unsatcor": [17, 30, 41, 61, 65, 80], "getunsatcor": [17, 20, 30, 41, 44, 61, 65, 80], "contributor": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "yoni": [17, 30, 41, 61, 65, 80, 85, 86], "zohar": [17, 30, 41, 61, 65, 80, 85, 86], "gereon": [17, 30, 41, 61, 65, 80, 98, 109], "kremer": [17, 30, 41, 61, 65, 80, 98, 109], "mathia": [17, 30, 41, 61, 65, 67, 68, 69, 73, 75, 77, 80, 81, 82, 83, 84, 85, 86, 98, 106, 109], "preiner": [17, 30, 41, 61, 65, 67, 68, 69, 73, 75, 77, 80, 81, 82, 83, 84, 85, 86, 90, 106, 109], "copyright": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 101, 106, 109], "2009": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 98, 101, 106, 109], "2022": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "author": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "directori": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 93, 95, 101, 106, 109], "institut": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "affili": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "reserv": [17, 30, 41, 57, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "copi": [17, 20, 23, 26, 30, 40, 41, 50, 53, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 101, 106, 109], "licens": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 101, 106, 109], "simpl": [17, 30, 41, 59, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 92, 93, 95, 101, 106, 109], "demonstr": [17, 30, 41, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "capabl": [17, 30, 41, 61, 65, 67, 68, 69, 70, 73, 75, 77, 80, 81, 82, 83, 84, 85, 86, 106], "iostream": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "doc": [17, 30, 41, 61, 65, 80, 89], "henc": [17, 30, 41, 61, 65, 80], "jargon": [17, 30, 41, 61, 65, 80], "5": [17, 29, 30, 41, 51, 53, 54, 55, 57, 61, 63, 65, 72, 74, 80, 89, 90, 91, 99, 100, 102], "our": [17, 30, 41, 61, 65, 70, 75, 80, 89, 106], "7": [17, 30, 41, 53, 56, 57, 61, 65, 73, 80, 89, 98, 102, 103], "8": [17, 30, 41, 51, 53, 57, 61, 65, 73, 75, 80, 90], "compound": [17, 30, 41, 61, 65, 80], "those": [17, 20, 30, 41, 44, 55, 61, 65, 70, 80, 90, 96], "did": [17, 30, 39, 41, 61, 65, 80, 90, 96], "11": [17, 30, 41, 57, 61, 65, 80, 86, 90, 91, 92, 98], "12": [17, 20, 30, 41, 61, 65, 80], "13": [17, 30, 41, 61, 65, 80, 95, 98], "14": [17, 30, 41, 61, 65, 75, 80], "15": [17, 30, 41, 61, 65, 80], "16": [17, 20, 26, 30, 41, 48, 53, 57, 61, 65, 75, 80, 90], "17": [17, 30, 41, 56, 61, 65, 80, 92, 98], "18": [17, 30, 41, 61, 65, 80, 89, 98, 109], "mudathir": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "moham": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "aina": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "niemetz": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "andr": [17, 30, 41, 61, 65, 66, 69, 72, 73, 75, 80, 81, 82, 83, 84, 85, 86, 98, 101, 106, 109], "noetzli": [17, 30, 41, 61, 65, 66, 69, 72, 73, 75, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "import": [17, 30, 41, 50, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "io": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "math": [17, 30, 39, 41, 61, 65, 68, 80, 96], "biginteg": [17, 29, 30, 41, 61, 65, 80], "util": [17, 29, 30, 41, 59, 61, 65, 67, 68, 69, 70, 74, 80, 85, 86, 90], "arraylist": [17, 30, 41, 61, 65, 68, 80, 85, 86], "static": [17, 30, 39, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 90, 96, 101, 106, 109], "throw": [17, 23, 30, 41, 61, 65, 66, 67, 68, 69, 70, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "new": [17, 20, 30, 39, 41, 44, 50, 54, 55, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 96, 98, 101, 106, 109], "system": [17, 30, 41, 61, 63, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 90, 99, 101, 106, 109], "println": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "aslist": [17, 30, 41, 61, 65, 80], "deletepoint": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "pgm": [17, 30, 41, 65, 72], "example_quickstart": [17, 30, 41, 65], "py": [17, 30, 41, 44, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "__name__": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "__main__": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "introduc": [17, 21, 30, 41, 61, 65, 67, 80, 90], "confirm": [17, 30, 41, 61, 65, 80], "m": [17, 30, 39, 41, 57, 61, 63, 65, 69, 80, 90, 96, 100, 101], "decim": [17, 20, 26, 30, 41, 44, 48, 51, 61, 65, 80, 90], "as_decim": [17, 30, 41, 51, 61, 65, 80], "fraction": [17, 30, 41, 44, 48, 51, 61, 65, 80], "as_fract": [17, 30, 41, 51, 61, 65, 80], "report": [17, 30, 41, 61, 65, 66, 77, 80, 82, 83, 84, 90, 98, 101, 106, 109], "solut": [17, 20, 25, 30, 41, 44, 47, 51, 53, 54, 55, 56, 61, 63, 65, 74, 80, 85, 86, 90, 91], "usr": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 101, 106, 109], "bin": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 89, 91, 92, 93, 95, 100, 101, 106, 109], "env": [17, 30, 41, 61, 65, 66, 67, 68, 69, 70, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 101, 106, 109], "alex": [17, 30, 41, 61, 65, 68, 69, 72, 74, 76, 80, 81, 84, 85, 86, 98, 106, 109], "ozdemir": [17, 30, 41, 61, 65, 68, 69, 72, 74, 76, 80, 81, 84, 85, 86, 98, 106, 109], "adapt": [17, 30, 41, 61, 65, 67, 76, 80], "plu": [17, 20, 30, 41, 44, 61, 63, 65, 80, 85, 90], "xpy": [17, 30, 41, 61, 65, 80], "ypy": [17, 30, 41, 61, 65, 80], "xminusypi": [17, 30, 41, 61, 65, 80], "minu": [17, 30, 39, 41, 61, 65, 80, 85, 96, 106], "len": [17, 30, 39, 41, 61, 63, 65, 80, 82, 84, 85, 86, 90, 96, 105], "smtlib": [17, 30, 41, 61, 63, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 101, 102, 104, 106, 109], "smt2": [17, 24, 30, 41, 59, 61, 65, 66, 67, 68, 69, 70, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 91, 92, 93, 95, 100, 101, 102, 106, 109], "echo": [17, 30, 41, 61, 65, 67, 69, 73, 77, 80, 83, 106], "built": [17, 28, 30, 41, 51, 53, 56, 61, 65, 80, 89, 104], "rather": [17, 30, 39, 41, 61, 65, 80, 90, 96], "explan": [18, 27, 42, 65, 90, 99], "getunknownexplan": [18, 42], "three": [18, 20, 26, 42, 44, 55, 57, 66, 67, 77, 83, 89, 101, 106], "checksatassum": [18, 20, 42, 44, 66, 67, 68, 69, 72, 73, 76, 77, 82, 83, 84, 99, 101, 106], "isunknown": [18, 25, 42, 47], "abl": [18, 42, 106], "un": [18, 42], "overload": [18, 29, 59], "mani": [19, 90], "directli": [19, 20, 26, 37, 89, 90], "iee19": [19, 98], "section": [19, 57, 90], "round_nearest_ties_to_even": [19, 43, 75], "nearest": [19, 43, 57], "bracket": [19, 43], "unrepresent": [19, 43], "signific": [19, 43, 53], "deliv": [19, 43], "round_toward_posit": [19, 43, 75], "infin": [19, 20, 26, 43, 44, 48, 75, 90], "oo": [19, 20, 26, 43, 57, 75], "shall": [19, 43], "format": [19, 20, 39, 43, 44, 63, 65, 66, 67, 68, 69, 70, 81, 82, 83, 90, 96, 97, 101, 102, 106], "possibli": [19, 39, 43, 55, 90, 96], "closest": [19, 43], "round_toward_neg": [19, 43, 75], "round_toward_zero": [19, 43], "magnitud": [19, 43], "round_nearest_ties_to_awai": [19, 43], "awai": [19, 43, 57, 70], "larger": [19, 43], "ti": [20, 57, 102], "delet": 20, "disallow": [20, 75], "getbooleansort": [20, 21, 22, 44, 69, 76, 85, 86], "getregexpsort": [20, 22, 44], "getroundingmodesort": [20, 22, 44], "getstringsort": [20, 22, 44, 66, 84, 101], "mkarraysort": [20, 22, 44, 68], "indexsort": [20, 44, 68], "elemsort": [20, 44], "mkbitvectorsort": [20, 21, 22, 44, 67, 68, 73], "mkfloatingpointsort": [20, 22, 44, 75], "sig": [20, 44, 52, 54, 57], "mkfinitefieldsort": [20, 22, 44, 74, 103], "prime": [20, 44, 103], "dtypedecl": [20, 44], "mkfunctionsort": [20, 22, 44, 69], "mkparamsort": [20, 21, 44, 45, 70], "nullopt": 20, "mkpredicatesort": [20, 44], "mkrecordsort": [20, 44, 102], "mksetsort": [20, 21, 22, 44, 81, 83, 106], "mkbagsort": [20, 21, 22, 44, 66, 101], "mksequencesort": [20, 22, 44, 82, 105], "mkabstractsort": [20, 22, 44], "unspecifi": [20, 22, 44], "array_sort": [20, 22, 44], "bitvector_sort": [20, 22, 44], "pass": [20, 23, 44, 55, 63, 72, 90, 93, 95, 99], "integer_sort": [20, 22, 44], "string_sort": [20, 22, 44], "abstract_sort": [20, 22, 44], "fulli": [20, 44, 50, 63, 70, 90], "mkuninterpretedsort": [20, 21, 22, 44, 69, 81, 106], "mkunresolveddatatypesort": [20, 44], "yet": [20, 39, 44, 50, 67, 92, 93, 95, 96, 108], "placehold": [20, 44], "mutual": [20, 44, 55, 90, 102], "recurs": [20, 39, 44, 55, 90, 96, 102], "mkuninterpretedsortconstructorsort": [20, 21, 44], "mktuplesort": [20, 22, 44, 81, 102, 106], "ari": [20, 39, 44, 96, 103], "mktupl": [20, 44, 81, 102, 106], "simpli": [20, 54], "wrap": [20, 63, 89], "val": [20, 44, 51, 53, 54, 55, 56, 57, 75], "123": 20, "34": 20, "num": [20, 63, 90, 91], "den": 20, "denomin": [20, 26, 44, 51], "re": [20, 26, 44, 84, 89, 90], "allchar": [20, 44, 90], "useescsequ": [20, 44], "escap": [20, 39, 44, 96], "u1234": [20, 44], "unicod": [20, 31, 32, 33, 44, 48, 90, 107], "fit": [20, 26], "hexadecim": [20, 26], "outsid": [20, 90], "reduc": [20, 39, 90, 96], "modulo": [20, 53, 88, 90, 98, 103], "mkconstarrai": [20, 44, 68], "mkfloatingpointposinf": [20, 44, 75], "mkfloatingpointneginf": [20, 44], "mkfloatingpointnan": [20, 44, 75], "mkfloatingpointposzero": [20, 44, 75], "mkfloatingpointnegzero": [20, 44], "rm": [20, 44, 57, 75, 90], "upperbound": 20, "fresh": [20, 39, 44, 51, 54, 65, 90, 96], "were": [20, 28, 55, 85, 86, 93, 95, 106], "previou": [20, 90], "param": [20, 21, 44, 45, 85, 86], "much": [20, 23, 44], "work": [20, 44, 50, 89, 90, 99], "involv": [20, 39, 44, 96], "engin": [20, 44, 88, 90], "simplif": [20, 44, 90, 92], "prop_liter": [20, 44], "declaredatatyp": [20, 44, 70], "datatype_decl": [20, 44], "declarefun": [20, 44], "declaresort": [20, 44, 69], "definefun": [20, 44, 86], "bound_var": [20, 44], "global": [20, 44, 51, 53, 54, 56, 57, 90, 91, 100], "function_def": [20, 44], "persist": [20, 44, 90], "pop": [20, 44, 63, 67, 75, 77], "definefunrec": [20, 44], "rec": [20, 44, 90, 102], "definefunsrec": [20, 44], "function_decl": [20, 44], "_1": [20, 39, 96], "_n": [20, 39, 44, 96], "getassert": [20, 44], "getinfo": [20, 44], "flag": [20, 23, 44, 89, 92, 93, 94, 95], "info_flag": [20, 44], "getoptionnam": [20, 44, 63, 90], "driver": [20, 100], "properli": [20, 63, 99], "getunsatassumpt": [20, 44], "unnam": [20, 44], "getunsatcorelemma": [20, 44], "getdifficulti": [20, 44], "difficulti": [20, 44, 90], "estim": [20, 44], "difficult": [20, 44], "unment": [20, 44], "gettimeoutcor": [20, 44], "timeout": [20, 27, 44, 49, 90, 99], "caus": [20, 39, 44, 96], "proceed": [20, 44, 98], "limit": [20, 27, 44, 49, 54, 55, 88, 90, 109], "ref": 20, "lbl": 20, "reason": [20, 27, 44, 49, 66, 81, 82, 83, 84, 89, 90, 91, 96, 97, 98, 101, 106], "gettimeoutcoreassum": [20, 44], "getproof": [20, 44], "recent": [20, 44, 89], "depend": [20, 39, 50, 90, 96], "prooftostr": [20, 44], "proofformat": [20, 44], "aspect": [20, 44, 91], "taken": [20, 44], "entail": [20, 39, 44, 67, 69, 73, 76, 77, 90, 96], "getmodeldomainel": [20, 44], "question": [20, 44], "ismodelcoresymbol": [20, 44], "v": [20, 26, 29, 44, 48, 51, 52, 53, 56, 57, 60, 67, 90], "essenti": [20, 44, 54], "show": [20, 23, 44, 63, 69, 71, 75, 76, 77, 78, 79, 89, 90], "getmodel": [20, 44, 72], "getquantifierelimin": [20, 44], "qe": [20, 44, 90], "complet": [20, 44, 50, 70, 75, 89, 90], "lra": [20, 44], "lia": [20, 44, 83, 85, 86, 90, 106], "bv": [20, 39, 48, 53, 90, 96], "bar": [20, 44, 63], "x_i": [20, 39, 44, 96], "y_1": [20, 39, 44, 96], "y_j": [20, 44], "x_k": [20, 44], "phi": [20, 44, 81], "y_n": [20, 39, 44, 96], "getquantifiereliminationdisjunct": [20, 44], "partial": [20, 39, 44, 90, 96], "q_n": [20, 44], "q_1": [20, 44], "q_i": [20, 44], "q_": [20, 44], "q_j": [20, 44], "eventu": [20, 44], "declaresepheap": [20, 44], "locsort": [20, 44], "datasort": [20, 44], "onc": [20, 21, 23, 26, 44, 45, 48, 90, 104], "getvaluesepheap": [20, 44], "getvaluesepnil": [20, 44], "initvalu": [20, 44], "instruct": [20, 89, 99], "document": [20, 28, 90], "declareoraclefun": 20, "fn": [20, 96, 104], "oracl": [20, 90], "ordinari": 20, "implicitli": 20, "sym": [20, 90], "text": [20, 90, 104], "nscope": [20, 44], "stack": [20, 44], "getinterpol": [20, 44], "conj": [20, 44, 90], "interpol": [20, 44, 90], "conjectur": [20, 44, 85, 86, 90], "getinterpolantnext": [20, 44], "success": [20, 44, 78, 90], "guarante": [20, 39, 44, 96, 100], "wrt": [20, 44, 90], "getabduct": [20, 44], "abduct": [20, 44, 90], "getabductnext": [20, 44], "preced": [20, 44, 89], "invalid": [20, 23, 44, 63, 72, 90, 99], "getinstanti": [20, 44], "modul": [20, 44, 85, 86, 89], "push": [20, 44, 63, 67, 75, 77, 90], "setinfo": [20, 44], "getlog": [20, 24, 44], "declaresygusvar": [20, 44, 85], "v2": [20, 44, 64, 65, 69], "var": [20, 44, 63, 76, 85, 90, 95], "boundvar": [20, 44], "treat": [20, 26, 39, 44, 48, 96], "matter": [20, 44], "pre": [20, 21, 26, 39, 44, 45, 48, 86, 90, 96, 105], "synthfun": [20, 44, 85, 86], "addsygusconstraint": [20, 44, 85], "forumla": 20, "getsygusconstraint": [20, 44], "addsygusassum": [20, 44], "getsygusassumpt": [20, 44], "addsygusinvconstraint": [20, 44, 86], "tran": [20, 39, 44, 86, 93, 95, 96, 98], "post": [20, 44, 86, 90, 96], "invari": [20, 44, 71, 90], "checksynth": [20, 25, 44, 47, 85, 86], "try": [20, 44, 51, 52, 53, 54, 56, 57, 63, 72, 75, 90], "getsynthsolut": [20, 44, 85, 86], "checksynthnext": [20, 25, 44, 47], "answer": [20, 44, 81, 90, 91, 106], "fst": [20, 44, 102], "findsynthnext": [20, 44], "getstatist": [20, 23, 44, 100], "snapshot": [20, 23, 44, 100], "decoupl": [20, 44, 100], "again": [20, 28, 44, 90, 99, 100], "printstatisticssaf": 20, "fd": 20, "descriptor": 20, "suitabl": 20, "usag": [20, 76, 90, 99], "signal": [20, 90], "handler": 20, "isoutputon": 20, "getoutput": 20, "getvers": [20, 44], "factori": [21, 26], "structur": [21, 54, 90], "hassymbol": [21, 26, 45, 48], "getsymbol": [21, 26, 45, 48], "mkunresolvedsort": 21, "raw": [21, 26, 45, 48, 90], "isboolean": [21, 45], "isinteg": [21, 45], "isreal": [21, 45], "isstr": [21, 23, 45], "isregexp": [21, 45], "isroundingmod": [21, 45], "isbitvector": [21, 45], "bitvec": [21, 45, 53, 67, 68, 72, 73], "isfloatingpoint": [21, 45], "floatingpoint": [21, 45, 57], "eb": [21, 45], "sb": [21, 45], "isdatatyp": [21, 45], "isdatatypetest": [21, 32, 45], "isfunct": [21, 45, 85, 86], "ispred": [21, 45], "isarrai": [21, 45], "isfinitefield": [21, 45, 74], "isset": [21, 45], "isbag": [21, 45], "issequ": [21, 45], "isabstract": [21, 45], "isuninterpretedsort": [21, 45], "isuninterpretedsortconstructor": [21, 45], "isinstanti": [21, 45], "getuninterpretedsortconstructor": [21, 45], "getinstantiatedparamet": [21, 45], "travers": [21, 26, 45, 48], "run": [21, 26, 29, 45, 48, 89, 90, 91, 99], "until": [21, 26, 45, 48, 78, 79, 90, 99], "d": [21, 29, 39, 45, 55, 75, 90, 92, 93, 95, 96, 98, 101], "subsort": [21, 45, 51, 53, 54], "simultan": [21, 26, 48], "earliest": [21, 26, 45, 48], "prioriti": [21, 26, 45, 48, 90], "getdatatypeconstructorar": [21, 45], "getdatatypeconstructordomainsort": [21, 45], "getdatatypeconstructorcodomainsort": [21, 45], "getdatatypeselectordomainsort": [21, 45], "getdatatypeselectorcodomainsort": [21, 45], "getdatatypetesterdomainsort": [21, 45], "getdatatypetestercodomainsort": [21, 45], "mainli": 21, "doesn": [21, 89], "getfunctionar": [21, 45], "getfunctiondomainsort": [21, 45], "getfunctioncodomainsort": [21, 45, 85, 86], "getarrayindexsort": [21, 45], "getarrayelementsort": [21, 45], "getsetelementsort": [21, 45], "getbagelementsort": [21, 45], "getsequenceelementsort": [21, 45], "getabstractedkind": [21, 45], "getuninterpretedsortconstructorar": [21, 45], "getbitvectors": [21, 45], "getfinitefields": [21, 45, 74], "getfloatingpointexponents": [21, 45], "getfloatingpointsignificands": [21, 45], "getdatatypear": [21, 45], "gettuplelength": [21, 45], "gettuplesort": [21, 45], "internal_sort_kind": 22, "undefined_sort_kind": 22, "null_sort": 22, "bag_sort": 22, "boolean_sort": 22, "datatype_sort": 22, "finite_field_sort": 22, "floatingpoint_sort": 22, "function_sort": 22, "real_sort": 22, "reglan_sort": 22, "roundingmode_sort": 22, "sequence_sort": 22, "set_sort": 22, "tuple_sort": 22, "direct": [22, 39, 67, 68, 69, 70, 73, 77, 81, 82, 83, 84, 85, 86, 90, 96, 106], "uninterpreted_sort": 22, "last_sort_kind": 22, "histogram": [23, 100], "isint": [23, 51], "isdoubl": 23, "etc": [23, 24, 39, 63, 70, 96, 99], "getint": 23, "getdoubl": 23, "kei": [23, 65], "frequenc": [23, 90], "By": 23, "def": [23, 69, 70, 72, 85, 86, 90], "visibl": [23, 46], "skip": [23, 90], "shown": 23, "isintern": [23, 100], "isdefault": [23, 100], "histogramdata": 23, "On": [23, 89, 90], "isx": 23, "getx": 23, "sole": 23, "becaus": [23, 89], "getstr": 23, "ishistogram": 23, "gethistogram": 23, "sv": 23, "meta": [24, 93, 95], "pertain": 24, "modifi": [24, 89, 99], "preload": 24, "publicli": 24, "hassolut": [25, 47, 85, 86], "hasnosolut": [25, 47], "could": [25, 39, 47, 63, 96], "best": [26, 90], "offer": [26, 50, 89, 94], "mk": 26, "unordered_set": 26, "unordered_map": 26, "id": [26, 31, 32, 39, 48, 90, 96, 102], "getnumchildren": [26, 48], "getid": [26, 48], "getsort": [26, 48, 67, 70, 85, 86], "w": [26, 39, 48, 96, 98, 107], "hasop": [26, 48], "getop": [26, 48], "notterm": [26, 48, 66, 67, 69, 73, 77, 83, 101, 106], "andterm": [26, 48], "orterm": [26, 48], "xorterm": [26, 48], "eqterm": [26, 48], "impterm": [26, 48], "iteterm": [26, 48], "getrealorintegervaluesign": [26, 48], "isint32valu": 26, "int32": 26, "getint32valu": 26, "isuint32valu": 26, "uint32": 26, "getuint32valu": 26, "isint64valu": 26, "int64": 26, "getint64valu": 26, "isuint64valu": 26, "uint64": 26, "getuint64valu": 26, "isintegervalu": [26, 48], "getintegervalu": [26, 48], "isstringvalu": [26, 48], "getstringvalu": [26, 48], "confus": [26, 48], "whatev": [26, 48], "isreal32valu": 26, "32": [26, 53, 57, 67, 68, 73, 75, 107], "getreal32valu": 26, "isreal64valu": 26, "64": [26, 53, 57, 89, 98, 100], "isconstarrai": [26, 48], "getconstarraybas": [26, 48], "isbooleanvalu": [26, 48], "getbooleanvalu": [26, 48], "isbitvectorvalu": [26, 48], "getbitvectorvalu": [26, 48], "isfinitefieldvalu": [26, 48, 74], "getfinitefieldvalu": [26, 48, 74], "smallest": [26, 48, 75], "isuninterpretedsortvalu": [26, 48], "getuninterpretedsortvalu": [26, 48], "istuplevalu": [26, 48], "gettuplevalu": [26, 48], "isroundingmodevalu": [26, 48], "getroundingmodevalu": [26, 48], "isfloatingpointposzero": [26, 48], "isfloatingpointnegzero": [26, 48], "isfloatingpointposinf": [26, 48], "isfloatingpointneginf": [26, 48], "isfloatingpointnan": [26, 48], "isfloatingpointvalu": [26, 48], "getfloatingpointvalu": [26, 48], "canon": [26, 48], "c_": [26, 39, 48, 96], "getsetvalu": [26, 48], "issequencevalu": [26, 48], "describ": [26, 39, 63, 95, 96, 102, 107, 109], "themselv": 26, "One": [26, 94], "const_sequence_": 26, "latter": [26, 31, 32, 89, 92], "former": 26, "iscardinalityconstraint": [26, 48], "getcardinalityconstraint": [26, 48], "isrealalgebraicnumb": [26, 48], "algebra": [26, 48, 90], "getrealalgebraicnumberdefiningpolynomi": [26, 48], "polynomi": [26, 39, 48, 90, 96], "getrealalgebraicnumberlowerbound": [26, 48], "getrealalgebraicnumberupperbound": [26, 48], "just": [26, 62, 91], "nodemanag": 26, "nm": 26, "shared_ptr": 26, "node": [26, 39, 44, 54, 55, 90, 94, 96, 102, 104], "requires_full_check": [27, 49], "incomplet": [27, 49, 90], "reach": [27, 49, 90, 99], "resourceout": [27, 49], "resourc": [27, 49, 88, 90], "memout": [27, 49], "memori": [27, 49, 89], "interrupt": [27, 49, 99], "unsupport": [27, 49], "encount": [27, 49, 90], "requires_check_again": [27, 49], "unknown_reason": [27, 49], "No": [27, 49, 81, 90], "disabl": [28, 69, 90, 99], "pleas": [28, 89], "build_bindings_java": 28, "cmake": [28, 29, 50, 89, 100], "build": [28, 50, 51, 52, 53, 54, 55, 56, 57, 68, 70, 75, 90, 100], "mostli": 29, "mirror": 29, "There": [29, 92, 100], "hierarchi": 29, "git": [29, 50, 89], "clone": [29, 50, 89], "cd": [29, 50, 89, 90], "sh": [29, 50, 89], "auto": [29, 50, 70, 89, 90], "download": [29, 50, 89, 93, 95], "instal": [29, 88, 93, 95], "libcvc5jni": 29, "libcvc5pars": 29, "libcvc5": 29, "libpicpoli": 29, "libpicpolyxx": 29, "libpoli": 29, "libpolyxx": 29, "dev": [29, 89], "jar": 29, "compil": 29, "javac": 29, "cp": 29, "librari": 29, "djava": 29, "path": [29, 50, 89], "triplet": 29, "proofrul": [29, 96], "__getitem__": [31, 32, 38, 46, 48, 52, 62, 63], "__iter__": [31, 32, 48], "self": [31, 32, 33, 34, 35, 36, 38, 42, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 60, 62, 63, 81, 106], "unresdatatypenam": 33, "And": [37, 39, 50, 54, 60, 63, 68, 69, 75, 77, 85, 96], "addtion": 37, "bvadd": [37, 53, 67], "alethe_rul": [39, 96], "extern": [39, 90, 96, 97, 99], "aleth": [39, 90, 96, 97], "place": [39, 51, 96, 99], "holder": [39, 96], "inferrul": [39, 96], "p_1": [39, 96], "p_n": [39, 96], "mid": [39, 96], "texttt": [39, 96], "a_1": [39, 96], "a_m": [39, 96], "premis": [39, 92, 93, 96], "calculu": [39, 93, 94, 95, 96, 97], "printer": [39, 91, 96], "endverbatim": 39, "alf_rul": [39, 96], "alethelf": [39, 90, 96, 97], "alpha_equiv": [39, 96], "alpha": [39, 90, 96], "inferrulesc": [39, 96], "z_1": [39, 96], "z_n": [39, 96], "mapsto": [39, 90, 96], "fv": [39, 90, 96], "setminu": [39, 62, 96, 101], "varphi": [39, 96, 104], "checker": [39, 92, 93, 95, 96], "and_elim": [39, 93, 95, 96], "f_1": [39, 96], "land": [39, 96], "f_n": [39, 96], "f_i": [39, 96], "and_intro": [39, 96], "builtin": [39, 51, 96, 100], "a_n": [39, 96], "anyth": [39, 96], "inferenceid": [39, 96], "arith_mult_neg": [39, 96], "factor": [39, 90, 96], "diamond": [39, 96], "cdot": [39, 48, 96], "diamond_": [39, 96], "invert": [39, 90, 96], "arith_mult_po": [39, 96], "arith_mult_sign": [39, 96], "f_k": [39, 96], "monomi": [39, 90, 96], "odd": [39, 67, 96], "arith_mult_tang": [39, 96], "plane": [39, 90, 96, 109], "sigma": [39, 96], "tplane": [39, 90, 96], "lor": [39, 96], "arith_nl_covering_direct": [39, 96], "conflict": [39, 90, 96], "irp": [39, 96], "_k": [39, 96], "poli": [39, 89, 90, 96], "indexedrootpred": [39, 96], "univari": [39, 96], "calcul": [39, 90, 96], "interv": [39, 90, 96, 109], "open": [39, 88, 91, 96], "cell": [39, 55, 96], "portion": [39, 90, 96, 107], "space": [39, 54, 88, 96], "neither": [39, 96], "bot": [39, 96], "mean": [39, 90, 93, 95, 96, 99], "topmost": [39, 96], "arith_nl_covering_recurs": [39, 96], "necessari": [39, 48, 96], "x_": [39, 96], "arith_op_elim_axiom": [39, 96], "arith": [39, 90, 96, 100], "operatorelim": [39, 96], "getaxiomfor": [39, 96], "arith_poly_norm": [39, 96], "polynorm": [39, 96], "isarithpolynorm": [39, 96], "arith_sum_ub": [39, 96], "p_i": [39, 96], "l_i": [39, 96], "diamond_i": [39, 96], "r_i": [39, 96], "furthermor": [39, 65, 96, 108], "l_1": [39, 96], "l_n": [39, 96], "r_1": [39, 96], "r_n": [39, 96], "arith_trans_exp_approx_above_neg": [39, 96], "transcendent": [39, 59, 90, 96, 98, 108], "approxim": [39, 90, 96, 109], "u": [39, 53, 56, 69, 90, 96, 102, 104], "taylor": [39, 90, 96], "maclaurin": [39, 96], "seri": [39, 96], "frac": [39, 96], "arith_trans_exp_approx_above_po": [39, 96], "po": [39, 96], "modif": [39, 90, 96], "degre": [39, 90, 96], "arith_trans_exp_approx_below": [39, 96], "sum_": [39, 69, 96], "infti": [39, 96], "arith_trans_exp_neg": [39, 96], "arith_trans_exp_posit": [39, 96], "arith_trans_exp_super_lin": [39, 96], "grow": [39, 96, 99], "super": [39, 96], "linearli": [39, 96, 99], "arith_trans_exp_zero": [39, 96], "arith_trans_pi": [39, 96], "arith_trans_sine_approx_above_neg": [39, 96], "lb": [39, 96], "ub": [39, 96], "sin": [39, 96, 109], "arith_trans_sine_approx_above_po": [39, 96], "arith_trans_sine_approx_below_neg": [39, 96], "arith_trans_sine_approx_below_po": [39, 96], "arith_trans_sine_bound": [39, 96], "arith_trans_sine_shift": [39, 96], "ite": [39, 67, 85, 86, 90, 91, 92, 93, 95, 96, 101, 107], "slolem": [39, 96], "phase": [39, 55, 89, 90, 96], "arith_trans_sine_symmetri": [39, 96], "symmetr": [39, 96], "arith_trans_sine_tangent_pi": [39, 96], "arith_trans_sine_tangent_zero": [39, 96], "arith_trichotomi": [39, 96], "trichotomi": [39, 96], "flip": [39, 96], "arrays_eq_range_expand": [39, 96], "expans": [39, 90, 94, 96], "mathit": [39, 96], "eqrang": [39, 96], "arrays_ext": [39, 96, 100], "extension": [39, 90, 96], "neq": [39, 96], "skolemcach": [39, 96], "getextindexskolem": [39, 96], "arrays_read_over_writ": [39, 96, 100], "arrays_read_over_write_1": [39, 96, 100], "arrays_read_over_write_contra": [39, 96], "contraposit": [39, 96], "leaf": [39, 55, 96], "justifi": [39, 96], "analog": [39, 96], "sai": [39, 63, 96, 106], "scope": [39, 90, 91, 96], "beta_reduc": [39, 96], "beta": [39, 96], "reduct": [39, 53, 90, 96], "t_n": [39, 96], "ldot": [39, 96, 104], "hand": [39, 96], "side": [39, 90, 95, 96], "bv_bitblast_step": [39, 96], "bitblast": [39, 90, 96], "bv_eager_atom": [39, 96], "eager": [39, 89, 90, 96], "atom": [39, 96], "bitvector_eager_atom": [39, 96], "chain_resolut": [39, 93, 96], "resolut": [39, 90, 92, 95, 96], "pol_1": [39, 96], "pol_": [39, 96], "l_": [39, 96], "view": [39, 96], "pol": [39, 96], "c_2": [39, 96], "pivot": [39, 90, 96], "polar": [39, 96], "c_i": [39, 96], "chain": [39, 90, 96], "cnf_and_neg": [39, 96], "cnf": [39, 90, 96], "cnf_and_po": [39, 96], "cnf_equiv_neg1": [39, 96], "f_2": [39, 96], "cnf_equiv_neg2": [39, 96], "cnf_equiv_pos1": [39, 93, 95, 96], "cnf_equiv_pos2": [39, 96], "cnf_implies_neg1": [39, 96], "cnf_implies_neg2": [39, 96], "cnf_implies_po": [39, 96], "cnf_ite_neg1": [39, 96], "cnf_ite_neg2": [39, 96], "cnf_ite_neg3": [39, 96], "cnf_ite_pos1": [39, 96], "cnf_ite_pos2": [39, 96], "cnf_ite_pos3": [39, 96], "cnf_or_neg": [39, 96], "Or": [39, 54, 63, 67, 75, 96], "cnf_or_po": [39, 96], "cnf_xor_neg1": [39, 96], "cnf_xor_neg2": [39, 96], "cnf_xor_pos1": [39, 96], "cnf_xor_pos2": [39, 96], "concat_conflict": [39, 96], "word": [39, 53, 56, 57, 90, 96, 106, 107], "splitconst": [39, 96], "deq": [39, 90, 96], "concat_cprop": [39, 96], "w_1": [39, 96], "t_2": [39, 96], "w_2": [39, 96], "w_3": [39, 96], "overlap": [39, 96], "suf": [39, 96, 105], "largest": [39, 96], "sinc": [39, 70, 74, 96, 104], "therefor": [39, 96, 99, 100], "roverlap": [39, 96], "concat_csplit": [39, 96], "split": [39, 90, 96], "concat_eq": [39, 96], "stand": [39, 96], "implicit": [39, 96], "conclud": [39, 96], "mathsf": [39, 96], "abc": [39, 83, 84, 96, 107], "bc": [39, 96], "concat_lprop": [39, 96], "r_t": [39, 96], "concat_split": [39, 96], "vee": [39, 96], "r_": [39, 96], "shorthand": [39, 52, 62, 96], "concat_unifi": [39, 96], "unif": [39, 90, 96], "cong": [39, 90, 92, 93, 95, 96], "congruenc": [39, 90, 96], "s_n": [39, 96], "proofrulecheck": [39, 96], "mkkindnod": [39, 96], "contra": [39, 96], "contradict": [39, 96], "dsl_rewrit": [39, 96], "dsl": [39, 90, 96], "g_1": [39, 96], "g_n": [39, 96], "g_i": [39, 96], "account": [39, 96], "t_i": [39, 96], "expr": [39, 90, 96], "narysubstitut": [39, 96], "dt_clash": [39, 96], "clash": [39, 96], "c_j": [39, 96], "dt_collaps": [39, 96], "collaps": [39, 96], "_i": [39, 96], "typenod": [39, 96], "mkgroundterm": [39, 96], "proper": [39, 96], "mkgroundvalu": [39, 96], "dt_inst": [39, 96], "_c": [39, 96], "discrimin": [39, 96, 102], "dt_split": [39, 96], "dt_unif": [39, 96], "s_i": [39, 96], "encode_pred_transform": [39, 96], "transform": [39, 96], "verifi": [39, 66, 81, 83, 90, 96, 101, 106], "rewritedbnodeconvert": [39, 96], "equiv_elim1": [39, 93, 95, 96], "equiv_elim2": [39, 96], "eq_resolv": [39, 91, 93, 95, 96], "macro": [39, 70, 90, 96], "methodid": [39, 96], "rw_evalu": [39, 96], "omit": [39, 90, 96], "false_elim": [39, 96], "elim": [39, 90, 96], "false_intro": [39, 96], "intro": [39, 90, 96], "ho_app_encod": [39, 96], "theoryufrewrit": [39, 96], "gethoapplyforapplyuf": [39, 96], "isth": [39, 96], "ho_cong": [39, 96], "implies_elim": [39, 96], "trigger": [39, 90, 96], "quantifiers_inst_e_match": [39, 96], "int_tight_lb": [39, 96], "tighten": [39, 96], "strict": [39, 90, 96], "lceil": [39, 96], "rceil": [39, 96], "int_tight_ub": [39, 96], "lfloor": [39, 96], "rfloor": [39, 96], "ite_elim1": [39, 96], "ite_elim2": [39, 96], "lfsc_rule": [39, 96], "lfsc": [39, 90, 96, 97], "macro_arith_scale_sum_ub": [39, 96], "inequ": [39, 90, 96], "k_1": [39, 96], "k_n": [39, 96], "k_i": [39, 96], "mathbb": [39, 96, 101], "fusion": [39, 96], "scale": [39, 96], "colon": [39, 96], "macro_bv_bitblast": [39, 96], "blast": [39, 89, 90, 96], "consist": [39, 63, 70, 77, 96, 109], "circuit": [39, 96], "strategi": [39, 90, 96], "bitblast_strategies_templ": [39, 96], "macro_resolut": [39, 96], "reorder": [39, 92, 93, 95, 96], "macro_resolution_trust": [39, 96], "uncheck": [39, 96], "macro_rewrit": [39, 96], "idr": [39, 96], "macro_sr_eq_intro": [39, 91, 96], "rewritten": [39, 96], "proven": [39, 96], "ida": [39, 96], "circ": [39, 96], "sigma_": [39, 96], "proof_check": [39, 96], "macro_sr_pred_elim": [39, 96], "macro_sr_pred_intro": [39, 96], "toorigin": [39, 96], "purif": [39, 96], "macro_sr_pred_transform": [39, 96], "equat": [39, 90, 96], "macro_string_infer": [39, 96], "isrev": [39, 96], "bookkeep": [39, 96], "inferproofcon": [39, 96], "modus_ponen": [39, 96], "modu": [39, 96], "ponen": [39, 96], "not_and": [39, 92, 96], "de": [39, 90, 96, 98], "morgan": [39, 67, 68, 69, 70, 74, 76, 77, 96], "not_equiv_elim1": [39, 96], "not_equiv_elim2": [39, 96], "not_implies_elim1": [39, 96], "not_implies_elim2": [39, 96], "not_ite_elim1": [39, 96], "not_ite_elim2": [39, 96], "not_not_elim": [39, 96], "not_or_elim": [39, 96], "not_xor_elim1": [39, 96], "not_xor_elim2": [39, 96], "refl": [39, 92, 93, 95, 96], "reflex": [39, 96], "remove_term_formula_axiom": [39, 96], "process": [39, 90, 91, 96, 98, 99], "removetermformula": [39, 96], "collect": [39, 90, 96, 100], "polici": [39, 90, 96], "weaken": [39, 90, 96], "re_elim": [39, 96], "regexpelimin": [39, 96], "aggress": [39, 90, 96], "re_int": [39, 96], "r_2": [39, 96], "inter": [39, 81, 83, 90, 96, 106], "re_unfold_neg": [39, 96], "unfold": [39, 90, 94, 96], "regexpopr": [39, 96], "reduceregexpneg": [39, 96], "step": [39, 70, 89, 90, 92, 93, 95, 96], "re_unfold_neg_concat_fix": [39, 96], "reduceregexpnegconcatfix": [39, 96], "getregexpconcatfix": [39, 96], "re_unfold_po": [39, 96], "reduceregexppo": [39, 96], "sat_refut": [39, 96], "refut": [39, 90, 96], "textrm": [39, 96], "dual": [39, 96], "purpos": [39, 63, 96], "close": [39, 90, 96], "skolemmanag": [39, 96], "mkskolem": [39, 96], "getwitnessform": [39, 96], "skolem_intro": [39, 96], "unpurifi": [39, 96], "string_code_inj": [39, 96], "_code": [39, 96], "string_decompos": [39, 96], "decomposit": [39, 96], "string_eager_reduct": [39, 96], "termregistri": [39, 96], "eagerreduc": [39, 96], "string_length_non_empti": [39, 96], "string_length_po": [39, 96], "string_reduct": [39, 96], "stringspreprocess": [39, 96], "string_seq_unit_inj": [39, 96], "symm": [39, 96], "symmetri": [39, 90, 96], "t_": [39, 96], "true_elim": [39, 96], "true_intro": [39, 96], "trust": [39, 90, 93, 95, 96], "tid": [39, 96], "justif": [39, 90, 93, 95, 96], "trust_theory_rewrit": [39, 93, 95, 96], "rid": [39, 96], "rw_rewrite_theory_pr": [39, 96], "rw_rewrite_theory_post": [39, 96], "rw_rewrite_eq_ext": [39, 96], "replai": [39, 90, 96], "xor_elim1": [39, 96], "xor_elim2": [39, 96], "almost": [40, 50], "exact": [40, 50], "experi": 40, "usatisfi": 42, "formuula": 44, "inv_f": [44, 86], "pre_f": [44, 86], "trans_f": [44, 86], "post_f": [44, 86], "loctyp": 44, "glbl": 44, "sym_or_fun": 44, "sort_or_term": 44, "glb": 44, "succes": 44, "dictionari": [44, 46], "term_or_list": 44, "obj": 44, "sorts_or_bool": 44, "arg0": 44, "arg1": 44, "arg2": 44, "signifcand": 44, "symbolnam": 44, "temporari": 44, "forward": 44, "kind_or_op": 44, "comma": 44, "automat": [44, 54, 55, 63, 88, 89, 90, 109], "Of": 44, "sort_or_list_1": 45, "sort_or_list_2": 45, "hexdecim": 48, "indici": 48, "held": 48, "__str__": [48, 54, 58], "then_t": 48, "else_t": 48, "term_or_list_1": 48, "term_or_list_2": 48, "topythonobj": [48, 74], "ff": [48, 56, 74, 90, 95, 103], "dict": 48, "aim": 50, "z3": [50, 51], "you": [50, 69, 70, 89], "verbos": [50, 90], "abil": 50, "everyth": 50, "visit": 50, "page": [50, 55, 89, 98, 104], "pip": 50, "machin": 50, "appl": 50, "m1": 50, "m2": 50, "chip": 50, "brew": 50, "gmp": 50, "pip3": 50, "tomli": [50, 89], "scikit": [50, 89], "pypars": [50, 89], "cvc5_python_api": 50, "jn": [50, 89], "parallel": [50, 89], "thread": [50, 89], "export": [50, 100], "pythonpath": 50, "local": [50, 89, 90], "repo": 50, "sure": [50, 89], "python3": 50, "ctx": [51, 52, 53, 54, 55, 56, 57, 60, 62, 63], "is_int": [51, 54], "is_real": [51, 57], "intval": [51, 54, 58, 62, 63, 83], "100": [51, 90], "realval": [51, 57, 75], "notat": [51, 54, 65, 96], "ratval": 51, "boolsort": [51, 52, 53, 54, 55, 60, 69], "freshint": 51, "eq": [51, 52, 53, 54, 56, 57, 73, 90], "intvector": [51, 63], "sz": [51, 53, 54, 56], "x__0": 51, "x__1": 51, "x__2": 51, "freshreal": 51, "realvector": 51, "arithref": 51, "__add__": [51, 53, 56, 57], "__sub__": [51, 53, 56, 57], "__mul__": [51, 53, 54, 56, 57], "__div__": [51, 53, 57], "__pow__": 51, "__neg__": [51, 53, 56, 57], "__gt__": [51, 53, 57], "__lt__": [51, 53, 57], "__ge__": [51, 53, 57], "__le__": [51, 53, 57], "exprref": [51, 53, 54, 56], "__eq__": [51, 53, 54, 56, 63], "__ne__": [51, 53, 54, 63], "main_ctx": [51, 54], "uminu": 51, "unari": [51, 53, 56, 57, 81, 102, 109], "deprec": 51, "kept": 51, "compatibl": 51, "div": 51, "intsmodulu": 51, "__mod__": [51, 53, 57], "toreal": [51, 54], "toint": 51, "arithemt": 51, "cbrt": 51, "cubic": 51, "prove": [51, 52, 63, 67, 68, 69, 70, 73, 77, 83, 93, 95], "is_arith": 51, "is_int_valu": 51, "is_rational_valu": 51, "is_arith_sort": 51, "is_add": 51, "is_mul": 51, "is_sub": 51, "is_div": 51, "is_idiv": 51, "is_mod": 51, "is_l": 51, "is_lt": 51, "is_g": 51, "is_gt": 51, "is_is_int": 51, "is_to_r": 51, "is_to_int": 51, "arithsortref": 51, "smtexcept": [51, 52, 54, 58], "ex": [51, 54, 89], "reverse_children": [51, 52, 53, 54, 55, 56, 57, 60, 62], "boolval": [51, 54, 72], "__pos__": [51, 53, 56, 57], "__radd__": [51, 53, 56, 57], "__rdiv__": [51, 53, 57], "__rmod__": [51, 53, 57], "__rmul__": [51, 53, 54, 56, 57], "__rpow__": 51, "__rsub__": [51, 53, 56, 57], "__rtruediv__": [51, 53, 57], "__truediv__": [51, 53, 57], "intnumref": 51, "as_binary_str": 51, "1010": 51, "as_long": [51, 53, 56], "bignum": [51, 53, 56], "as_str": [51, 57], "ratnumref": 51, "prec": [51, 90], "333": 51, "denominator_as_long": 51, "numerator_as_long": 51, "10000000000": 51, "10000000001": 51, "dom": 52, "rng": 52, "constarrai": 52, "alia": [52, 63], "arraysort": [52, 54, 68], "aa": 52, "unimpl": 52, "multi": [52, 90], "arrayref": 52, "is_array_sort": 52, "is_arrai": 52, "is_const_arrai": 52, "is_k": 52, "is_select": 52, "is_stor": 52, "is_upd": 52, "arraysortref": 52, "is_bv": [53, 57], "bitvecsort": [53, 54, 57, 68], "x2": [53, 56, 57], "bitvecv": [53, 57], "0x": [53, 56, 57], "8x": [53, 56, 57], "0x0000000a": [53, 56], "byte": 53, "bitvecref": 53, "__or__": [53, 62], "__and__": [53, 62], "__xor__": 53, "__invert__": 53, "__lshift__": 53, "__rshift__": 53, "is_sign": 53, "num_bit": 53, "bv_x": 53, "bv_x_plus_4": 53, "289": 53, "3x": 53, "121": 53, "high": [53, 89, 92, 95], "low": 53, "ul": 53, "bvsle": 53, "bvule": 53, "ult": 53, "bvslt": [53, 68], "bvult": 53, "ug": 53, "bvsge": 53, "bvuge": 53, "ugt": 53, "bvsgt": [53, 68], "bvugt": 53, "sle": 53, "slt": 53, "sge": 53, "sgt": 53, "udiv": 53, "bvsdiv": 53, "bvudiv": 53, "urem": 53, "srem": 53, "bvsmod": 53, "bvurem": 53, "sdiv": 53, "smod": 53, "bvsrem": 53, "lshr": 53, "bvashr": 53, "bvlshr": 53, "as_signed_long": [53, 56], "rotateleft": 53, "rotateright": 53, "signext": 53, "extra": 53, "24": [53, 57, 75, 90], "v0": 53, "254": 53, "fe": 53, "zeroext": 53, "repeatbitvec": 53, "aaaa": 53, "bvredand": 53, "bvredor": 53, "bvmult": 53, "bvsub": [53, 67], "bvor": 53, "bvxor": [53, 67], "bvneg": 53, "bvnot": 53, "bitwis": [53, 90], "is_bv_sort": 53, "is_bv_valu": 53, "bitvecsortref": 53, "b00000000000000000000000000001010": 53, "setsort": [53, 54, 62], "bvshl": 53, "mod": [53, 57, 90], "__rand__": 53, "__rlshift__": 53, "__ror__": 53, "__rrshift__": 53, "__rxor__": 53, "bitvecnumref": 53, "0xbadc0d": 53, "195936478": 53, "0x0badc0d": 53, "is_tru": 54, "is_fals": 54, "is_bool": 54, "freshbool": 54, "b1": 54, "b2": 54, "blank": 54, "boolvector": 54, "p__0": 54, "p__1": 54, "p__2": 54, "freshconst": 54, "freshfunct": 54, "probe": [54, 59], "p__3": 54, "p__4": 54, "mk_not": 54, "strip": 54, "present": [54, 96, 106], "is_bool_valu": 54, "is_and": 54, "is_or": 54, "is_impli": 54, "is_not": 54, "is_eq": 54, "is_distinct": 54, "is_const": [54, 60], "is_func_decl": 54, "__bool__": 54, "__hash__": [54, 63], "__init__": [54, 55, 58, 63], "__nonzero__": 54, "__repr__": [54, 55, 63], "repr": [54, 55, 63], "__weakref__": [54, 55, 58, 63], "weak": [54, 55, 58, 63, 90], "as_ast": [54, 60], "n1": [54, 55, 102], "n2": [54, 55], "get_id": 54, "hashcod": 54, "num_arg": 54, "sortref": 54, "pretti": 54, "boolref": 54, "boolsortref": 54, "is_expr": [54, 58], "funcdeclref": 54, "__call__": [54, 55], "coercion": [54, 55], "isinst": [54, 63], "manipul": 55, "happen": [55, 90], "intlist": 55, "third": 55, "finish": [55, 78, 79, 90, 99], "tool": [55, 89], "is_nil": [55, 70], "is_con": [55, 70], "testor": 55, "recogn": 55, "accessor": [55, 70], "ambigu": [55, 102], "datatypesortref": 55, "unambigu": 55, "createdatatyp": 55, "codatayp": 55, "intstream": 55, "helper": [55, 109], "tree": [55, 81, 90, 102], "treelist": 55, "car": 55, "cdr": 55, "tuplesort": [55, 106], "mk_pair": 55, "disjointsum": 55, "en": [55, 57], "wikipedia": [55, 57], "wiki": [55, 57], "tagged_union": 55, "injector": 55, "extractor": 55, "inject0": 55, "extract0": 55, "inject1": 55, "extract1": 55, "num_constructor": [55, 70], "num_acc": 55, "is_nam": 55, "datatypeconstructorref": 55, "datatypeselectorref": 55, "datatyperecognizerref": 55, "datatyperef": 55, "finitefieldelem": [56, 74], "is_ff": 56, "finitefieldsort": [56, 74], "finitefieldv": 56, "29": 56, "f7": 56, "finitefieldref": 56, "ffadd": 56, "ffsub": 56, "ffneg": 56, "elemetn": 56, "ffmult": 56, "is_ff_sort": 56, "is_ff_valu": 56, "finitefieldsortref": 56, "31": [56, 73], "f10m31": 56, "finitefieldnumref": 56, "28": 56, "fpsort": 57, "is_fp": 57, "ebit": 57, "sbit": 57, "fpmul": 57, "rne": 57, "fpadd": 57, "fpval": [57, 75], "25": [57, 90, 98], "exponent_as_long": 57, "0x00000004": 57, "125": 57, "fpnan": 57, "set_fpa_pretti": 57, "pb": [57, 90], "get_fpa_pretti": 57, "fpplusinfin": 57, "fpminusinfin": 57, "fpinfin": 57, "fppluszero": 57, "fpminuszero": 57, "fpzero": 57, "53": [57, 90], "float16": 57, "half": 57, "floathalf": 57, "float32": [57, 75, 90], "floatsingl": 57, "float64": [57, 90], "floatdoubl": 57, "float128": 57, "128": 57, "quadrupl": 57, "floatquadrupl": 57, "fpref": 57, "fpab": 57, "fpneg": 57, "rtz": 57, "fpsub": 57, "fpdiv": 57, "fprem": 57, "fpmin": 57, "fpmax": 57, "fpfma": 57, "fpsqrt": 57, "fproundtointegr": 57, "roundtointegr": 57, "fpisnan": [57, 75], "isnan": 57, "fpisinf": [57, 75], "isinfinit": 57, "fpiszero": 57, "iszero": 57, "fpisnorm": 57, "isnorm": 57, "fpissubnorm": 57, "issubnorm": 57, "fpisneg": 57, "isneg": 57, "fpisposit": 57, "isposit": 57, "fplt": 57, "fpleq": 57, "fpgt": 57, "fpgeq": 57, "fpeq": [57, 75], "fpneq": 57, "fpfp": 57, "sgn": 57, "22": 57, "23": 57, "fptofp": 57, "127": 57, "4194304": [57, 90], "xv": 57, "slvr": 57, "a1": 57, "a2": 57, "a3": 57, "x_db": 57, "x_r": 57, "x_sign": 57, "fpbvtofp": 57, "x_bv": 57, "0x3f800000": 57, "x_fp": 57, "1065353216": 57, "fpfptofp": 57, "x_sgl": 57, "x_dbl": 57, "fprealtofp": 57, "fpsignedtofp": 57, "4294967291": 57, "fpunsignedtofp": 57, "fptofpunsign": 57, "fptosbv": 57, "fptoubv": 57, "fptoreal": 57, "is_fp_sort": 57, "is_fp_valu": 57, "is_fprm_sort": 57, "is_fprm": 57, "is_fprm_valu": 57, "roundnearesttiestoeven": [57, 75], "broken": 57, "doi": [57, 98], "1109": [57, 98], "ieeestd": [57, 98], "2019": [57, 90, 98], "8766229": [57, 98], "point_arithmet": 57, "rounding_mod": 57, "roundnearesttiestoawai": 57, "rna": 57, "roundtowardposit": 57, "rtp": [57, 75], "roundtowardneg": 57, "rtn": [57, 75], "roundtowardzero": 57, "get_default_rounding_mod": 57, "set_default_rounding_mod": [57, 75], "sum1": 57, "sum2": 57, "solverfor": [57, 63, 77], "qf_fp": [57, 75], "explicit": [57, 61], "get_default_fp_sort": 57, "set_default_fp_sort": 57, "fpsortref": 57, "b0": 57, "b01111111": 57, "b00000000000000000000000": 57, "fpnumref": 57, "bias": [57, 90], "isinf": 57, "subnorm": 57, "significand_as_long": 57, "miss": [57, 59, 89], "2097152": 57, "fprmref": 57, "is_sort": 58, "is_app": 58, "is_app_of": 58, "z3py": 59, "pseudo": [59, 90], "count": [59, 66, 100, 101], "atmost": 59, "atleast": 59, "partialord": 59, "linearord": 59, "html": [59, 89], "hook": 59, "fixedpoint": 59, "builder": 59, "overview": [59, 93], "finitefield": [59, 74, 103], "fp": [59, 75, 90], "mem0": 60, "lo": 60, "hi": 60, "mem1": 60, "is_var": 60, "is_quantifi": 60, "quantifierref": 60, "is_exist": 60, "is_foral": 60, "is_lambda": 60, "num_var": 60, "var_nam": 60, "displai": [60, 69], "var_sort": 60, "With": [61, 91], "elem_sort": 62, "emptyset": [62, 83, 104, 106], "fullset": 62, "setunion": 62, "setintersect": 62, "setadd": 62, "setdel": 62, "setdiffer": 62, "setcompl": 62, "ismemb": [62, 83], "issubset": [62, 83], "setref": 62, "setsortref": 62, "kwarg": 63, "solve_us": 63, "claim": 63, "tri": [63, 90, 91], "counterexampl": [63, 75, 90], "logfil": 63, "uiowa": 63, "edu": 63, "simplesolv": 63, "__iadd__": 63, "fml": 63, "assert_expr": 63, "eval": [63, 90], "ackermann": [63, 90], "initfromlog": 63, "num_scop": 63, "backtrack": 63, "reason_unknown": 63, "why": [63, 90, 91], "recreat": 63, "crash": [63, 90], "foo": 63, "lisp": 63, "checksatresult": 63, "modelref": 63, "aka": 63, "__len__": 63, "model_complet": 63, "a__0": 63, "a__1": 63, "a__2": 63, "a__3": 63, "a__4": 63, "easiest": 64, "later": [65, 90], "written": 65, "slv": [66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 82, 83, 84, 85, 86, 101, 106, 109], "intersectionac": [66, 83, 101, 106], "intersectionbc": [66, 83, 101, 106], "distribut": [66, 81, 83, 89, 90, 101, 106], "uniondisjointab": [66, 101], "lh": [66, 75, 83, 84, 101, 106], "rh": [66, 75, 83, 84, 101, 106], "guess": [66, 90, 101], "unionmaxab": [66, 101], "theorem": [66, 83, 88, 101, 106], "emptbag": [66, 101], "emptybag": [66, 101], "four": [66, 101], "bag_a_2": [66, 101], "bag_b_3": [66, 101], "bag_b_1": [66, 101], "bag_c_2": [66, 101], "bag_a_2_b_3": [66, 101], "bag_b_1_c_2": [66, 101], "union_disjoint": [66, 101], "count_x": [66, 101], "uniondisjoint": [66, 101], "inter_min": [66, 101], "union_max": [66, 101], "bitvector": 67, "liana": [67, 68, 74, 98], "hadarean": [67, 68, 74, 98], "book": 67, "hacker": 67, "delight": 67, "henri": 67, "warren": 67, "want": [67, 68, 89], "straightforward": [67, 106], "effici": [67, 90, 93], "piec": 67, "bitvector32": [67, 73], "x_eq_a": 67, "x_eq_b": 67, "new_x": 67, "execut": [67, 78, 79, 99, 104], "new_x_": 67, "assignment0": 67, "a_xor_b_xor_x": 67, "assignment1": 67, "new_x_eq_new_x_": 67, "a_plus_b": 67, "a_plus_b_minus_x": 67, "assignment2": 67, "x_neq_x": 67, "extract_op": 67, "lsb_of_a": 67, "a_odd": 67, "1u": 67, "deter": [67, 68, 69, 70, 74, 76, 77], "x_is_a_or_b": 67, "new_x0": 67, "per": [67, 90, 99], "new_x1": 67, "new_x2": 67, "makai": [67, 68, 69, 70, 73, 75, 76, 77, 82, 83, 84, 106], "mann": [67, 68, 69, 70, 73, 75, 76, 77, 82, 83, 84, 106], "andrew": [67, 70, 73, 74, 76, 78, 79, 85, 86, 98], "reynold": [67, 70, 73, 74, 76, 78, 79, 85, 86, 98], "translat": [67, 68, 69, 70, 73, 77, 81, 82, 83, 84, 85, 86, 90, 96, 106], "satisifi": 67, "lsb": 67, "bv1": [67, 68, 90], "bitvectors_and_arrai": 68, "cmath": 68, "previous": [68, 102], "current_arrai": 68, "throughout": 68, "unrol": 68, "index_s": 68, "log2": [68, 90], "elementsort": [68, 101, 106], "0u": 68, "current_array0": 68, "current_array0_gt_0": 68, "old_curr": 68, "2u": 68, "new_curr": 68, "current_slt_new_curr": 68, "push_back": [68, 102], "bitvectorsandarrai": 68, "privat": [68, 69, 70, 85, 86], "log": [68, 90, 98], "toarrai": [68, 85, 86], "idx_bit": 68, "ceil": 68, "init_arrai": 68, "init_arr": 68, "larg": [68, 88], "enough": 68, "constarr0": 68, "zeroi": 68, "bv0": 68, "onei": 68, "twoi": 68, "bv2": 68, "threei": 68, "bv3": 68, "twoe": 68, "unroll1": 68, "bvmul": 68, "current_array_": 68, "unroll2": 68, "current_array__": 68, "unroll3": 68, "current_array___": 68, "tim": [69, 76, 77, 98], "king": [69, 76, 77, 98], "prefixprintgetvalu": 69, "dag": [69, 90, 92], "thresh": [69, 90, 92], "dagifi": [69, 90], "qf_uflira": 69, "utoint": 69, "intpr": 69, "f_x": 69, "f_y": 69, "p_0": 69, "p_f_y": 69, "nest": [69, 90], "it2": 69, "it1": 69, "hasnext": [69, 70], "print_val": 69, "print_all_subterm": 69, "ncvc5": 69, "induct": [70, 73, 90, 98, 102, 104], "conslistsort": 70, "old": [70, 90], "conslistspec": 70, "useless": 70, "relev": [70, 90], "spec": 70, "datatypesort": 70, "fill": 70, "conslist": 70, "too": 70, "though": [70, 106], "t2": [70, 92, 93, 95, 104], "cours": 70, "t_is_con": 70, "t_updat": 70, "paramconslistspec": 70, "paramlist": 70, "paramcon": 70, "paramnil": 70, "paramconslistsort": 70, "paramconsintlistsort": 70, "paramconslist": 70, "head_a": 70, "50": [70, 90], "keep": [70, 90], "mind": 70, "selfsort": 70, "cons2": 70, "nil2": 70, "conslistsort2": 70, "list2": 70, "nsort": 70, "nsimplifi": 70, "qf_ufdtlia": 70, "singular": 70, "parlist": 70, "parhead": 70, "partail": 70, "parlistint": 70, "ahead": 70, "mechan": [71, 90, 99], "hello": 71, "world": 71, "handl": [71, 90], "execpt": 72, "exit": [72, 90], "invalidterm": 72, "legaci": 72, "sy": [72, 85, 86, 91], "em": 72, "example_except": 72, "clark": [73, 98], "barrett": [73, 98], "ext_31_1": 73, "x_31_1": 73, "ext_30_0": 73, "x_30_0": 73, "ext_31_31": 73, "x_31_31": 73, "ext_0_0": 73, "x_0_0": 73, "eq2": 73, "01234567": 73, "visual": [73, 94, 97], "1234567": 73, "0123456": 73, "a_31_1": 73, "a_30_0": 73, "a_31_31": 73, "a_0_0": 73, "finite_field": 74, "cassert": [74, 75], "f5": 74, "aistwo": 74, "bistwo": 74, "qf_ff": [74, 103], "mul": [74, 103], "ff1": 74, "ff2": 74, "floating_point_arith": 75, "toi": 75, "2008": [75, 98], "fpt32": 75, "restrict": [75, 90, 99], "inf": [75, 90], "someth": [75, 90], "to_sbv": 75, "final": [75, 90, 91], "trick": [75, 90], "0b001": 75, "floatingpointarith": 75, "floating_point": 75, "commut": 75, "is_tautologi": 75, "succe": 75, "contribut": 75, "eva": 75, "darulova": 75, "symfpu": 75, "fp32": 75, "constrain": [75, 90], "11000000010010001111010111000011": 75, "01000000010010001111010111000011": 75, "bounds_x": 75, "bounds_i": 75, "bounds_z": 75, "veri": 76, "noth": 76, "helloworld": 76, "tutori": 76, "qf_uf": 76, "firstli": 77, "secondli": 77, "tight": 77, "linear_arith": 77, "qf_lira": 77, "neg2": 77, "two_third": 77, "three_i": 77, "diff": [77, 90], "x_geq_3i": 77, "x_leq_i": 77, "neg2_lt_x": 77, "diff_leq_two_third": 77, "diff_is_two_third": 77, "lineararith": 77, "cvc5_parser": [78, 79], "ss": [78, 79, 85, 86, 90], "qf_lia": [78, 79], "mystream": [78, 79], "break": [78, 79, 90], "daniel": [78, 79], "larraz": [78, 79], "2023": [78, 79, 98], "myinput": [78, 79], "parser_sym_manag": 79, "parser2": 79, "ss2": 79, "45": 79, "mystream2": 79, "parsersymbolmanag": 79, "myinput2": 79, "input2": 79, "famili": 81, "peopl": [81, 106], "male": [81, 106], "femal": [81, 106], "father": [81, 106], "mother": [81, 106], "parent": [81, 106], "ancestor": [81, 106], "descend": [81, 106], "nonempti": 81, "cap": [81, 90, 101], "bowti": 81, "subseteq": [81, 101], "cup": [81, 101], "person": [81, 106], "langl": 81, "rangl": 81, "mrtb17": [81, 98, 106], "ext": [81, 89, 90, 106], "personsort": [81, 106], "tuplearity1": [81, 106], "relationarity1": [81, 106], "tuplearity2": [81, 106], "relationarity2": [81, 106], "emptysetterm": [81, 106], "emptyrelationterm": [81, 106], "universeset": [81, 106], "isempty1": [81, 106], "isempty2": [81, 106], "peoplearetheunivers": [81, 106], "malesetisnotempti": [81, 106], "femalesetisnotempti": [81, 106], "malesfemalesintersect": [81, 106], "malesandfemalesaredisjoint": [81, 106], "isempty3": [81, 106], "isempty4": [81, 106], "fatherisnotempti": [81, 106], "motherisnotempti": [81, 106], "fathersaremal": [81, 106], "mothersarefemal": [81, 106], "unionfathermoth": [81, 106], "parentisfatherormoth": [81, 106], "tclosur": [81, 106], "transitiveclosur": [81, 106], "ancestorformula": [81, 106], "descendantformula": [81, 106], "xxtupl": [81, 106], "notmemb": [81, 106], "quantifiedvari": [81, 106], "noselfancestor": [81, 106], "set_": [81, 83, 106], "qf_slia": [82, 84, 105], "smtlib2": [82, 84], "intseq": 82, "concat_len": 82, "formula1": [82, 84], "formula2": [82, 84], "int_seq": 82, "kshitij": [83, 98, 106], "bansal": [83, 98, 106], "uf": [83, 90, 106], "qf_ufliaf": [83, 106], "unionab": [83, 106], "emptset": [83, 106], "me": [83, 106], "singleton_on": [83, 106], "singleton_two": [83, 106], "singleton_thre": [83, 106], "one_two": [83, 106], "two_thre": [83, 106], "tianyi": 84, "liang": 84, "str_ab": 84, "leni": 84, "s2": [84, 105], "formula3": 84, "to_r": 84, "in_r": 84, "abdalrhman": [85, 86], "start_bool": 85, "startbool": 85, "varx": 85, "vari": [85, 90], "max_x_i": 85, "min_x_i": 85, "printsynthsolut": [85, 86], "sygusfun": 85, "print_synth_solut": [85, 86], "header": [85, 86], "ifndef": [85, 86], "cvc5__utils_h": [85, 86], "sol": [85, 86, 90], "endif": [85, 86], "definefuntostr": [85, 86], "stringbuild": [85, 86], "getchild": [85, 86], "define_fun_to_str": [85, 86], "ten": 86, "xp": 86, "sygusinv": 86, "prover": 88, "successor": 88, "cvc4": 88, "build_dir": 89, "linux": 89, "mingw": 89, "w64": 89, "arm64": 89, "homebrew": 89, "tap": 89, "link": 89, "strongli": [89, 90], "discourag": 89, "dynam": [89, 90], "win64": 89, "emscripten": 89, "sdk": 89, "emsdk": 89, "prefer": [89, 90], "latest": 89, "chanc": 89, "activ": [89, 90], "emsdk_env": 89, "environ": 89, "whenev": [89, 90, 99], "go": [89, 90], "wasm": 89, "glue": 89, "web": 89, "quot": 89, "modular": [89, 98], "prod": 89, "your": 89, "dep": 89, "gcc": 89, "clang": 89, "v6": 89, "ship": 89, "cad": 89, "nonlinear": [89, 90, 98, 109], "multiprecis": 89, "packag": 89, "better": 89, "footprint": 89, "permiss": 89, "gpl": 89, "speed": [89, 90], "contrib": 89, "script": [89, 93, 95], "discuss": 89, "edit": 89, "tab": 89, "histori": [89, 90], "prompt": 89, "libedit": 89, "devel": 89, "flexibl": [89, 92], "simplevc": 89, "pytest": 89, "help": [89, 90], "develop": 89, "maintain": [89, 90], "contact": 89, "team": 89, "issu": 89, "tracker": 89, "doxygen": 89, "sphinx": 89, "rtd": 89, "theme": 89, "sphinxcontrib": 89, "bibtex": 89, "programoutput": 89, "breath": 89, "gh": 89, "content": 89, "readm": 89, "md": 89, "ctest": 89, "infrastructur": 89, "regex": 89, "exclud": 89, "label": 89, "le": [89, 103], "failur": [89, 90], "regressn": 89, "apitest": 89, "api_test": 89, "system_test": 89, "ourobor": 89, "unit_test": 89, "subdir": 89, "map_util_black": 89, "regress_test": 89, "regress0": [89, 91, 92, 93, 95, 100], "bug288b": 89, "preconfigur": 89, "systemtest": 89, "runexampl": 89, "coverag": 89, "gcov": 89, "commit": 89, "sha": 89, "config": [89, 90], "wget": 89, "archiv": 89, "tar": 89, "gz": 89, "xf": 89, "remain": [89, 99, 100, 105], "runtim": [90, 100], "wide": [90, 100], "letter": 90, "treatment": 90, "exhaust": [90, 99], "lang_auto": 90, "inst": 90, "gterm": 90, "benchmark": 90, "lit": 90, "deep": 90, "restart": [90, 99], "portfolio": 90, "candid": [90, 91], "back": [90, 91], "along": [90, 91], "successfulli": [90, 91], "quiet": 90, "decreas": 90, "rlimit": [90, 99], "reproduc": 90, "common": [90, 96, 109], "tlimit": 90, "millisecond": [90, 99], "wall": 90, "clock": 90, "increas": 90, "shell": 90, "seed": 90, "random": 90, "attempt": 90, "toler": 90, "conform": 90, "subexpr": 90, "don": 90, "approx": 90, "branch": 90, "depth": 90, "200": 90, "brab": 90, "cube": 90, "compliant": 90, "prop": 90, "unat": 90, "bi": 90, "decid": [90, 104], "tableau": 90, "row": 90, "shorter": 90, "cut": 90, "period": 90, "dio": 90, "decomp": 90, "leak": 90, "diophantin": 90, "griggio": [90, 98], "jsat": 90, "2012": 90, "varord": 90, "simplex": 90, "violat": 90, "fc": 90, "penalti": 90, "degener": 90, "unset": 90, "tune": 90, "maxcutsincontext": 90, "65535": 90, "miplib": 90, "tmp": 90, "nl": 90, "cov": 90, "cylindr": 90, "lift": 90, "lazard": 90, "scheme": 90, "discard": 90, "proj": [90, 102], "mccallum": 90, "prune": 90, "agress": 90, "light": 90, "approach": 90, "weight": [90, 99], "ent": 90, "conf": 90, "inc": 90, "irrat": 90, "purifi": 90, "rbound": 90, "tf": 90, "deg": 90, "interleav": 90, "icp": 90, "rlv": 90, "threshold": 90, "pp": 90, "ppassert": 90, "earli": 90, "eagerli": 90, "reject": 90, "25500": 90, "coeffici": 90, "effort": 90, "fulleffort": 90, "revert": 90, "known": 90, "cach": 90, "rr": 90, "robin": 90, "se": 90, "recheck": 90, "soi": 90, "quick": [90, 93, 95], "explain": [90, 106], "minim": 90, "infeas": 90, "invoc": 90, "bland": 90, "ineq": 90, "relationship": 90, "fcsimplex": 90, "focus": 90, "converg": 90, "fmcad": 90, "2013": [90, 98], "submiss": 90, "moura": [90, 98], "09": 90, "paper": [90, 103], "care": 90, "graph": [90, 94], "christ": 90, "hoenick": 90, "2014": 90, "diagnost": 90, "channel": 90, "managederr": 90, "stderr": 90, "stdout": 90, "managedin": 90, "stdin": 90, "managedout": 90, "rweight": [90, 99], "unchang": 90, "trace": 90, "pushpop": 90, "wildcard": 90, "lazi": 90, "booltobv": 90, "ITEs": 90, "gauss": 90, "gaussian": 90, "blaster": 90, "rw": 90, "2017": [90, 98], "scholl": 90, "smt08": 90, "minisat": 90, "cryptominisat": 90, "cadic": 90, "kissat": 90, "backend": 90, "cdt": 90, "bisimilar": 90, "cyclic": 90, "send": 90, "polit": 90, "across": [90, 100], "abort": 90, "tell": 90, "fair": 90, "height": 90, "instant": [90, 91], "agg": 90, "smart": 90, "lazili": 90, "pbe": 90, "stoponli": 90, "atgp": 90, "inspir": 90, "stop": 90, "jh": 90, "pend": 90, "do_semantic_checks_by_default": 90, "wf": 90, "groebner": 90, "basi": 90, "gb": 90, "wb": 90, "lazier": 90, "prenotifyfact": 90, "registerterm": 90, "dump": [90, 91, 92, 93, 95], "measur": [90, 99], "debug": [90, 91], "cpu": 90, "job": 90, "segv": 90, "spin": 90, "segfault": 90, "wait": 90, "gdb": 90, "pipe": 90, "emit": 90, "entir": 90, "chosen": 90, "request": 90, "scatter": 90, "c2": [90, 104], "c3": 90, "sent": [90, 100], "60": 90, "climit": 90, "partitionwhen": 90, "exceed": 90, "filesystem": 90, "b0001": 90, "flatten": 90, "ho": 90, "alf": [90, 93], "redeclar": 90, "sound": 90, "expand": 90, "opt": 90, "reconstruct": [90, 92, 98], "cluster": 90, "granular": [90, 92, 93, 95], "improv": 90, "pedant": 90, "incorrect": 90, "untrust": 90, "merg": 90, "subproof": [90, 94, 96], "processor": 90, "unus": 90, "rcon": 90, "dimac": 90, "calus": 90, "preregist": 90, "regist": 90, "freq": 90, "cdcl": 90, "cbqi": 90, "rd": 90, "qcf": 90, "irrelev": 90, "tconstraint": 90, "vo": 90, "cegi": 90, "sampl": 90, "acceler": 90, "inde": 90, "spuriou": 90, "cegqi": 90, "slack": 90, "boundari": 90, "becom": 90, "adder": 90, "resort": 90, "vt": 90, "innermost": 90, "midpoint": 90, "nopt": 90, "cond": 90, "quant": 90, "ground": 90, "stc": 90, "ind": 90, "strengthen": 90, "quantif": [90, 91], "taut": 90, "tautolog": 90, "techniqu": [90, 109], "stratifi": 90, "favor": 90, "fmf": 90, "proxi": 90, "admiss": 90, "mbqi": 90, "fmc": 90, "thesi": 90, "1000": 90, "satur": 90, "due": [90, 92, 99], "ax": 90, "db": 90, "ieval": 90, "delai": 90, "dtt": 90, "ites": 90, "smaller": [90, 105], "conserv": 90, "likewis": 90, "miniscop": 90, "prenex": 90, "norm": 90, "dsplit": 90, "wd": 90, "rep": 90, "ee": 90, "analysi": [90, 98], "connect": [90, 104], "crepair": 90, "repair": 90, "fast": [90, 91], "agnost": 90, "geometr": 90, "miner": 90, "stronger": 90, "weaker": 90, "rev": [90, 105, 107], "backward": 90, "concis": 90, "symobl": 90, "disj": 90, "insid": 90, "maxim": [90, 105], "templ": 90, "precondit": 90, "postcondit": 90, "sg": 90, "unifi": 90, "minimi": 90, "preproc": 90, "fuzz": [90, 92, 93, 95], "unsolv": 90, "subsolv": 90, "hard": [90, 91], "avoid": 90, "accel": 90, "nvar": 90, "uniform": 90, "uniformli": 90, "fashion": 90, "si": [90, 107], "10000": 90, "unlimit": 90, "igain": 90, "piecewis": 90, "indeped": 90, "barbosa": [90, 98], "et": 90, "al": 90, "unconstrain": 90, "gain": 90, "shuffl": 90, "verif": [90, 98], "databas": 90, "subterm": 90, "pat": 90, "ignor": [90, 105], "unbound": 90, "sep": [90, 104], "refin": [90, 109], "emp": [90, 104], "shorten": 90, "mayb": 90, "expens": 90, "averag": 90, "rew": 90, "prep": 90, "foreign": 90, "simp": 90, "kim": 90, "somenzi": 90, "suffici": 90, "unev": 90, "unevaluat": 90, "regardless": 90, "track": 90, "unless": 90, "sove": 90, "nonclaus": 90, "compress": 90, "simplifywithcar": 90, "simplifici": 90, "batch": 90, "save": [90, 94], "clausal": 90, "subtyp": 90, "bcp": 90, "substituion": 90, "4294967295": 90, "pure": 90, "bitwidth": 90, "monoton": 90, "bruttomesso": 90, "brummay": 90, "phd": 90, "qf_abv": 90, "prepocess": 90, "card": [90, 106], "196608": 90, "alphabet": 90, "reg": 90, "registr": 90, "preregistr": 90, "flat": 90, "mbr": 90, "2147483647": 90, "65536": 90, "posc": 90, "concatent": 90, "rexplain": 90, "regress": [90, 91, 92, 93, 95, 100], "condens": 90, "central": [90, 99], "own": 90, "tc": 90, "theoryof": 90, "conv": 90, "breaker": 90, "deharb": 90, "cade": [90, 98], "2011": [90, 98], "ll": 90, "shrink": 90, "cli": [91, 92, 93, 95, 100], "regress1": 91, "qid": 91, "myquant1": 91, "myquant2": 91, "a_int": 91, "a_bool": 91, "role": 91, "single_solut": 91, "cvc": [91, 95], "nat": 91, "succ": 91, "pred": 91, "print_sub": 91, "print_sat_lemma": 91, "print_trusted_proof_step": 91, "_let_1": 91, "_let_2": 91, "sb_default": 91, "sba_fixpoint": 91, "print_timeout_cor": 91, "564838384999": 91, "print_unsat_cor": 91, "x20": 91, "couldn": 91, "additon": 92, "coars": 92, "fine": [92, 93, 95, 98], "grain": [92, 93, 95, 98], "verit": [92, 98], "bdodeharbef09": [92, 98], "isabel": 92, "hol": 92, "bbff20": [92, 98], "sfd21": [92, 98], "coq": [92, 98], "smtcoq": [92, 98], "plugin": 92, "afgregoir": [92, 98], "emt": [92, 98], "rust": 92, "qgu": [92, 93, 95], "a0": [92, 95], "t1": [92, 93, 95, 96, 102, 104], "cl": 92, "equiv_pos2": 92, "t3": [92, 93, 95], "t4": [92, 93, 95], "all_simplifi": 92, "t5": [92, 93, 95], "t6": [92, 93, 95], "t7": [92, 93, 95], "t8": [92, 95], "t9": [92, 95], "t10": [92, 95], "t11": [92, 95], "t12": [92, 95], "equiv2": 92, "t13": [92, 95], "t14": [92, 95], "equiv1": 92, "t15": 92, "t16": 92, "t17": 92, "t18": 92, "or_neg": 92, "t19": 92, "t20": 92, "contract": 92, "t21": 92, "t22": 92, "t23": 92, "t24": 92, "t25": 92, "t26": 92, "t27": 92, "repositori": [93, 95], "alfc": 93, "framework": [93, 95, 98], "signatur": [93, 95], "often": [93, 95], "p1": [93, 95], "p2": [93, 95], "p3": [93, 95], "p4": [93, 95], "p5": [93, 95], "p6": [93, 95], "p7": [93, 95], "p8": [93, 95], "nary_cong": 93, "p9": [93, 95], "p10": [93, 95], "p11": [93, 95], "p12": [93, 95], "p13": 93, "p14": 93, "p15": 93, "p16": 93, "p17": 93, "p18": 93, "p19": 93, "p20": 93, "p21": 93, "p22": 93, "p23": 93, "p24": 93, "p25": 93, "p26": 93, "p27": 93, "p28": 93, "p29": 93, "p30": 93, "p31": 93, "p32": 93, "p33": 93, "p34": 93, "among": [94, 96], "thing": [94, 96], "leverag": 94, "dedic": 94, "suffic": 94, "upload": 94, "color": [94, 102], "stepwis": 94, "lf": 95, "sor": [95, 98], "f_and": 95, "plet": 95, "f_not": 95, "f_": 95, "tt": [95, 98], "rulenam": 96, "varphi_1": 96, "varphi_n": 96, "t_m": 96, "psi": 96, "varphi_i": 96, "tm": 96, "sometim": 96, "abus": 96, "interchang": 96, "design": 96, "categor": 96, "enclos": [96, 109], "macro_": 96, "faithfulli": 97, "reflect": [97, 99], "meant": 97, "micha": 98, "\u00eb": 98, "armand": 98, "germain": 98, "faur": 98, "benjamin": 98, "gr": 98, "\u00e9": 98, "goir": 98, "chantal": 98, "keller": 98, "laurent": 98, "ry": 98, "werner": 98, "slash": 98, "jean": 98, "pierr": 98, "jouannaud": 98, "zhong": 98, "shao": 98, "editor": 98, "certifi": 98, "volum": 98, "7086": 98, "lectur": 98, "scienc": 98, "135": 98, "150": 98, "springer": 98, "1007": 98, "978": 98, "642": 98, "25379": 98, "9_12": 98, "bbrt17": [98, 106], "cesar": 98, "tinelli": 98, "decis": [98, 99, 102, 104, 109], "procedur": [98, 102, 104, 109], "corr": 98, "arxiv": 98, "1702": 98, "06259": 98, "haniel": 98, "jasmin": 98, "christian": 98, "blanchett": 98, "fleuri": 98, "pascal": 98, "fontain": 98, "scalabl": 98, "journal": 98, "autom": 98, "485": 98, "510": 98, "2020": 98, "url": 98, "s10817": 98, "018": 98, "09502": 98, "bft17": [98, 104], "technic": 98, "depart": 98, "iowa": 98, "www": 98, "bst07": [98, 102], "igor": 98, "shikanian": 98, "satisf": 98, "21": 98, "46": 98, "2007": 98, "3233": 98, "sat190028": 98, "thoma": 98, "bouton": 98, "diego": 98, "caminha": 98, "oliveira": 98, "david": 98, "harb": 98, "pen": 98, "rustabl": 98, "fficient": 98, "olver": 98, "renat": 98, "schmidt": 98, "confer": 98, "deduct": 98, "5663": 98, "151": 98, "156": 98, "dx": 98, "02959": 98, "2_12": 98, "cgi": [98, 109], "alessandro": 98, "cimatti": 98, "alberto": 98, "ahm": 98, "irfan": 98, "marco": 98, "roveri": 98, "roberto": 98, "sebastiani": 98, "acm": 98, "19": 98, "52": [98, 104], "2018": 98, "1145": 98, "3230639": 98, "burak": 98, "ekici": 98, "alain": 98, "mebsout": 98, "gui": 98, "katz": 98, "plug": 98, "rupak": 98, "majumdar": 98, "viktor": 98, "kuncak": 98, "aid": 98, "cav": 98, "10427": 98, "126": 98, "133": 98, "319": 98, "63390": 98, "9_7": 98, "84": 98, "baoluo": 98, "meng": 98, "leonardo": 98, "26": 98, "26th": 98, "gothenburg": 98, "sweden": 98, "august": 98, "10395": 98, "148": 98, "165": 98, "63046": 98, "5_10": 98, "oktb23": [98, 103], "constantin": 98, "enea": 98, "akash": 98, "lal": 98, "13965": 98, "163": 98, "186": 98, "031": 98, "37703": 98, "7_8": 98, "rb15": [98, 102], "ami": 98, "felti": 98, "aart": 98, "middeldorp": 98, "25th": 98, "berlin": 98, "germani": 98, "2015": 98, "9195": 98, "197": 98, "213": 98, "21401": 98, "6_13": 98, "risk16": [98, 104], "radu": 98, "iosif": 98, "cristina": 98, "serban": 98, "cyril": 98, "artho": 98, "axel": 98, "legai": 98, "doron": 98, "pele": 98, "technologi": 98, "14th": 98, "symposium": 98, "atva": 98, "2016": 98, "chiba": 98, "japan": 98, "octob": 98, "9938": 98, "244": 98, "261": 98, "46520": 98, "3_16": 98, "han": 98, "\u00f6": 98, "rg": 98, "schurr": 98, "martin": 98, "desharnai": 98, "reliabl": 98, "assist": 98, "platzer": 98, "geoff": 98, "sutcliff": 98, "12699": 98, "450": 98, "467": 98, "2021": 98, "030": 98, "79876": 98, "5_26": 98, "aaron": 98, "stump": 98, "duckki": 98, "oe": 98, "syst": 98, "42": 98, "91": 98, "118": 98, "s10703": 98, "012": 98, "0163": 98, "amount": 99, "whole": 99, "lifetim": 99, "honor": 99, "subroutin": 99, "realiz": 99, "afterward": 99, "asynchron": 99, "setitim": 99, "ulimit": 99, "inher": 99, "unsuit": 99, "standalon": 99, "effect": 99, "As": [99, 103], "soon": 99, "continu": [99, 105], "intent": 99, "spent": 99, "event": 99, "restartstep": 99, "varieti": 100, "insight": 100, "enable_statist": 100, "competit": 100, "dealloc": 100, "stabl": 100, "minor": 100, "timer": 100, "look": 100, "auflia": 100, "bug336": 100, "totaltim": 100, "2m": 100, "inferenceslemma": 100, "arith_split_deq": 100, "inferencesfact": 100, "combination_split": 100, "overal": 100, "difference_subtract": 101, "duplicate_remov": 101, "multiset": 101, "uplu": [101, 104], "m_2": 101, "difference_remov": 101, "delta": 101, "qf_dt": 102, "d1": 102, "dk": 102, "nk": 102, "s11": 102, "s1i": 102, "cj": 102, "sij": 102, "red": 102, "black": 102, "fname": 102, "lname": 102, "john": 102, "smith": 102, "sugar": [102, 106], "coinduct": 102, "ci": 102, "term_1": [102, 106], "term_n": [102, 106], "upd": 102, "sort_1": [102, 104, 106], "sort_n": [102, 106], "s_int": [102, 106], "unittupl": [102, 106], "i1": 102, "snd": 102, "getselectorterm": 102, "Such": 103, "isomorph": 103, "bmod": 103, "qx": 103, "nb": 103, "ffn": 103, "ff3": 103, "ffsort": 103, "ff0": 103, "sl": 104, "loc": 104, "pto": 104, "f2": 104, "classic": 104, "variad": 104, "models_": 104, "phi_1": 104, "phi_n": 104, "h_1": 104, "h_n": 104, "h_i": 104, "phi_i": 104, "phi_2": 104, "summar": 104, "sort_2": 104, "accept": 104, "indexof": 105, "dst": 105, "replace_al": 105, "prefixof": 105, "suffixof": 105, "sgl": 106, "subtl": 106, "motiv": 106, "presenc": 106, "counter": 106, "intuit": 106, "indexof_r": 107, "w\u2082": 107, "u\u2081": 107, "w\u2081": 107, "shortest": 107, "u\u2081w\u2081u\u2082": 107, "u\u2081u\u2082u\u2083": 107, "u\u2081w\u2083u\u2083": 107, "w\u2083": 107, "u\u2082": 107, "u\u2082u\u2084": 107, "cba": 107, "to_low": 107, "ri": 107, "65": 107, "90": 107, "ascii": 107, "to_upp": 107, "97": 107, "122": 107, "beyond": 108, "mix": 108, "nra": 109, "nira": 109, "tan": 109, "qf_nrat": 109, "csc": 109, "sec": 109, "cot": 109, "arcco": 109, "arctan": 109, "arccsc": 109, "arccot": 109, "subject": 109, "said": 109, "inexact": 109, "demand": 109, "twopi": 109, "ysq": 109, "sinx": 109, "x_gt_pi": 109, "x_lt_tpi": 109, "ysq_lt_sinx": 109}, "objects": {"": [[9, 0, 1, "_CPPv4N4cvc516CVC5ApiExceptionE", "cvc5::CVC5ApiException"], [9, 1, 1, "_CPPv4N4cvc516CVC5ApiException16CVC5ApiExceptionERKNSt12stringstreamE", "cvc5::CVC5ApiException::CVC5ApiException"], [9, 1, 1, "_CPPv4N4cvc516CVC5ApiException16CVC5ApiExceptionERKNSt6stringE", "cvc5::CVC5ApiException::CVC5ApiException"], [9, 2, 1, "_CPPv4N4cvc516CVC5ApiException16CVC5ApiExceptionERKNSt6stringE", "cvc5::CVC5ApiException::CVC5ApiException::str"], [9, 2, 1, "_CPPv4N4cvc516CVC5ApiException16CVC5ApiExceptionERKNSt12stringstreamE", "cvc5::CVC5ApiException::CVC5ApiException::stream"], [9, 1, 1, "_CPPv4NK4cvc516CVC5ApiException10getMessageEv", "cvc5::CVC5ApiException::getMessage"], [9, 1, 1, "_CPPv4NK4cvc516CVC5ApiException8toStreamERNSt7ostreamE", "cvc5::CVC5ApiException::toStream"], [9, 2, 1, "_CPPv4NK4cvc516CVC5ApiException8toStreamERNSt7ostreamE", "cvc5::CVC5ApiException::toStream::os"], [9, 1, 1, "_CPPv4NK4cvc516CVC5ApiException4whatEv", "cvc5::CVC5ApiException::what"], [9, 0, 1, "_CPPv4N4cvc527CVC5ApiRecoverableExceptionE", "cvc5::CVC5ApiRecoverableException"], [9, 1, 1, "_CPPv4N4cvc527CVC5ApiRecoverableException27CVC5ApiRecoverableExceptionERKNSt12stringstreamE", "cvc5::CVC5ApiRecoverableException::CVC5ApiRecoverableException"], [9, 1, 1, "_CPPv4N4cvc527CVC5ApiRecoverableException27CVC5ApiRecoverableExceptionERKNSt6stringE", "cvc5::CVC5ApiRecoverableException::CVC5ApiRecoverableException"], [9, 2, 1, "_CPPv4N4cvc527CVC5ApiRecoverableException27CVC5ApiRecoverableExceptionERKNSt6stringE", "cvc5::CVC5ApiRecoverableException::CVC5ApiRecoverableException::str"], [9, 2, 1, "_CPPv4N4cvc527CVC5ApiRecoverableException27CVC5ApiRecoverableExceptionERKNSt12stringstreamE", "cvc5::CVC5ApiRecoverableException::CVC5ApiRecoverableException::stream"], [3, 0, 1, "_CPPv4N4cvc58DatatypeE", "cvc5::Datatype"], [3, 1, 1, "_CPPv4N4cvc58Datatype8DatatypeEv", "cvc5::Datatype::Datatype"], [3, 1, 1, "_CPPv4NK4cvc58Datatype5beginEv", "cvc5::Datatype::begin"], [3, 0, 1, "_CPPv4N4cvc58Datatype14const_iteratorE", "cvc5::Datatype::const_iterator"], [3, 1, 1, "_CPPv4N4cvc58Datatype14const_iterator14const_iteratorEv", "cvc5::Datatype::const_iterator::const_iterator"], [3, 3, 1, "_CPPv4N4cvc58Datatype14const_iterator15difference_typeE", "cvc5::Datatype::const_iterator::difference_type"], [3, 3, 1, "_CPPv4N4cvc58Datatype14const_iterator17iterator_categoryE", "cvc5::Datatype::const_iterator::iterator_category"], [3, 1, 1, "_CPPv4NK4cvc58Datatype14const_iteratorneERK14const_iterator", "cvc5::Datatype::const_iterator::operator!="], [3, 2, 1, "_CPPv4NK4cvc58Datatype14const_iteratorneERK14const_iterator", "cvc5::Datatype::const_iterator::operator!=::it"], [3, 1, 1, "_CPPv4NK4cvc58Datatype14const_iteratormlEv", "cvc5::Datatype::const_iterator::operator*"], [3, 1, 1, "_CPPv4N4cvc58Datatype14const_iteratorppEi", "cvc5::Datatype::const_iterator::operator++"], [3, 1, 1, "_CPPv4N4cvc58Datatype14const_iteratorppEv", "cvc5::Datatype::const_iterator::operator++"], [3, 1, 1, "_CPPv4NK4cvc58Datatype14const_iteratorptEv", "cvc5::Datatype::const_iterator::operator-&gt;"], [3, 1, 1, "_CPPv4N4cvc58Datatype14const_iteratoraSERK14const_iterator", "cvc5::Datatype::const_iterator::operator="], [3, 2, 1, "_CPPv4N4cvc58Datatype14const_iteratoraSERK14const_iterator", "cvc5::Datatype::const_iterator::operator=::it"], [3, 1, 1, "_CPPv4NK4cvc58Datatype14const_iteratoreqERK14const_iterator", "cvc5::Datatype::const_iterator::operator=="], [3, 2, 1, "_CPPv4NK4cvc58Datatype14const_iteratoreqERK14const_iterator", "cvc5::Datatype::const_iterator::operator==::it"], [3, 3, 1, "_CPPv4N4cvc58Datatype14const_iterator7pointerE", "cvc5::Datatype::const_iterator::pointer"], [3, 3, 1, "_CPPv4N4cvc58Datatype14const_iterator9referenceE", "cvc5::Datatype::const_iterator::reference"], [3, 3, 1, "_CPPv4N4cvc58Datatype14const_iterator10value_typeE", "cvc5::Datatype::const_iterator::value_type"], [3, 1, 1, "_CPPv4NK4cvc58Datatype3endEv", "cvc5::Datatype::end"], [3, 1, 1, "_CPPv4NK4cvc58Datatype14getConstructorERKNSt6stringE", "cvc5::Datatype::getConstructor"], [3, 2, 1, "_CPPv4NK4cvc58Datatype14getConstructorERKNSt6stringE", "cvc5::Datatype::getConstructor::name"], [3, 1, 1, "_CPPv4NK4cvc58Datatype7getNameEv", "cvc5::Datatype::getName"], [3, 1, 1, "_CPPv4NK4cvc58Datatype18getNumConstructorsEv", "cvc5::Datatype::getNumConstructors"], [3, 1, 1, "_CPPv4NK4cvc58Datatype13getParametersEv", "cvc5::Datatype::getParameters"], [3, 1, 1, "_CPPv4NK4cvc58Datatype11getSelectorERKNSt6stringE", "cvc5::Datatype::getSelector"], [3, 2, 1, "_CPPv4NK4cvc58Datatype11getSelectorERKNSt6stringE", "cvc5::Datatype::getSelector::name"], [3, 1, 1, "_CPPv4NK4cvc58Datatype12isCodatatypeEv", "cvc5::Datatype::isCodatatype"], [3, 1, 1, "_CPPv4NK4cvc58Datatype8isFiniteEv", "cvc5::Datatype::isFinite"], [3, 1, 1, "_CPPv4NK4cvc58Datatype6isNullEv", "cvc5::Datatype::isNull"], [3, 1, 1, "_CPPv4NK4cvc58Datatype12isParametricEv", "cvc5::Datatype::isParametric"], [3, 1, 1, "_CPPv4NK4cvc58Datatype8isRecordEv", "cvc5::Datatype::isRecord"], [3, 1, 1, "_CPPv4NK4cvc58Datatype7isTupleEv", "cvc5::Datatype::isTuple"], [3, 1, 1, "_CPPv4NK4cvc58Datatype13isWellFoundedEv", "cvc5::Datatype::isWellFounded"], [3, 1, 1, "_CPPv4NK4cvc58DatatypeixE6size_t", "cvc5::Datatype::operator[]"], [3, 1, 1, "_CPPv4NK4cvc58DatatypeixERKNSt6stringE", "cvc5::Datatype::operator[]"], [3, 2, 1, "_CPPv4NK4cvc58DatatypeixE6size_t", "cvc5::Datatype::operator[]::idx"], [3, 2, 1, "_CPPv4NK4cvc58DatatypeixERKNSt6stringE", "cvc5::Datatype::operator[]::name"], [3, 1, 1, "_CPPv4NK4cvc58Datatype8toStringEv", "cvc5::Datatype::toString"], [3, 1, 1, "_CPPv4N4cvc58DatatypeD0Ev", "cvc5::Datatype::~Datatype"], [4, 0, 1, "_CPPv4N4cvc519DatatypeConstructorE", "cvc5::DatatypeConstructor"], [4, 1, 1, "_CPPv4N4cvc519DatatypeConstructor19DatatypeConstructorEv", "cvc5::DatatypeConstructor::DatatypeConstructor"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor5beginEv", "cvc5::DatatypeConstructor::begin"], [4, 0, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iteratorE", "cvc5::DatatypeConstructor::const_iterator"], [4, 1, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iterator14const_iteratorEv", "cvc5::DatatypeConstructor::const_iterator::const_iterator"], [4, 3, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iterator15difference_typeE", "cvc5::DatatypeConstructor::const_iterator::difference_type"], [4, 3, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iterator17iterator_categoryE", "cvc5::DatatypeConstructor::const_iterator::iterator_category"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratorneERK14const_iterator", "cvc5::DatatypeConstructor::const_iterator::operator!="], [4, 2, 1, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratorneERK14const_iterator", "cvc5::DatatypeConstructor::const_iterator::operator!=::it"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratormlEv", "cvc5::DatatypeConstructor::const_iterator::operator*"], [4, 1, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iteratorppEi", "cvc5::DatatypeConstructor::const_iterator::operator++"], [4, 1, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iteratorppEv", "cvc5::DatatypeConstructor::const_iterator::operator++"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratorptEv", "cvc5::DatatypeConstructor::const_iterator::operator-&gt;"], [4, 1, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iteratoraSERK14const_iterator", "cvc5::DatatypeConstructor::const_iterator::operator="], [4, 2, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iteratoraSERK14const_iterator", "cvc5::DatatypeConstructor::const_iterator::operator=::it"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratoreqERK14const_iterator", "cvc5::DatatypeConstructor::const_iterator::operator=="], [4, 2, 1, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratoreqERK14const_iterator", "cvc5::DatatypeConstructor::const_iterator::operator==::it"], [4, 3, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iterator7pointerE", "cvc5::DatatypeConstructor::const_iterator::pointer"], [4, 3, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iterator9referenceE", "cvc5::DatatypeConstructor::const_iterator::reference"], [4, 3, 1, "_CPPv4N4cvc519DatatypeConstructor14const_iterator10value_typeE", "cvc5::DatatypeConstructor::const_iterator::value_type"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor3endEv", "cvc5::DatatypeConstructor::end"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor19getInstantiatedTermERK4Sort", "cvc5::DatatypeConstructor::getInstantiatedTerm"], [4, 2, 1, "_CPPv4NK4cvc519DatatypeConstructor19getInstantiatedTermERK4Sort", "cvc5::DatatypeConstructor::getInstantiatedTerm::retSort"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor7getNameEv", "cvc5::DatatypeConstructor::getName"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor15getNumSelectorsEv", "cvc5::DatatypeConstructor::getNumSelectors"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor11getSelectorERKNSt6stringE", "cvc5::DatatypeConstructor::getSelector"], [4, 2, 1, "_CPPv4NK4cvc519DatatypeConstructor11getSelectorERKNSt6stringE", "cvc5::DatatypeConstructor::getSelector::name"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor7getTermEv", "cvc5::DatatypeConstructor::getTerm"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor13getTesterTermEv", "cvc5::DatatypeConstructor::getTesterTerm"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor6isNullEv", "cvc5::DatatypeConstructor::isNull"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructorixE6size_t", "cvc5::DatatypeConstructor::operator[]"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructorixERKNSt6stringE", "cvc5::DatatypeConstructor::operator[]"], [4, 2, 1, "_CPPv4NK4cvc519DatatypeConstructorixE6size_t", "cvc5::DatatypeConstructor::operator[]::index"], [4, 2, 1, "_CPPv4NK4cvc519DatatypeConstructorixERKNSt6stringE", "cvc5::DatatypeConstructor::operator[]::name"], [4, 1, 1, "_CPPv4NK4cvc519DatatypeConstructor8toStringEv", "cvc5::DatatypeConstructor::toString"], [4, 1, 1, "_CPPv4N4cvc519DatatypeConstructorD0Ev", "cvc5::DatatypeConstructor::~DatatypeConstructor"], [5, 0, 1, "_CPPv4N4cvc523DatatypeConstructorDeclE", "cvc5::DatatypeConstructorDecl"], [5, 1, 1, "_CPPv4N4cvc523DatatypeConstructorDecl23DatatypeConstructorDeclEv", "cvc5::DatatypeConstructorDecl::DatatypeConstructorDecl"], [5, 1, 1, "_CPPv4N4cvc523DatatypeConstructorDecl11addSelectorERKNSt6stringERK4Sort", "cvc5::DatatypeConstructorDecl::addSelector"], [5, 2, 1, "_CPPv4N4cvc523DatatypeConstructorDecl11addSelectorERKNSt6stringERK4Sort", "cvc5::DatatypeConstructorDecl::addSelector::name"], [5, 2, 1, "_CPPv4N4cvc523DatatypeConstructorDecl11addSelectorERKNSt6stringERK4Sort", "cvc5::DatatypeConstructorDecl::addSelector::sort"], [5, 1, 1, "_CPPv4N4cvc523DatatypeConstructorDecl15addSelectorSelfERKNSt6stringE", "cvc5::DatatypeConstructorDecl::addSelectorSelf"], [5, 2, 1, "_CPPv4N4cvc523DatatypeConstructorDecl15addSelectorSelfERKNSt6stringE", "cvc5::DatatypeConstructorDecl::addSelectorSelf::name"], [5, 1, 1, "_CPPv4N4cvc523DatatypeConstructorDecl21addSelectorUnresolvedERKNSt6stringERKNSt6stringE", "cvc5::DatatypeConstructorDecl::addSelectorUnresolved"], [5, 2, 1, "_CPPv4N4cvc523DatatypeConstructorDecl21addSelectorUnresolvedERKNSt6stringERKNSt6stringE", "cvc5::DatatypeConstructorDecl::addSelectorUnresolved::name"], [5, 2, 1, "_CPPv4N4cvc523DatatypeConstructorDecl21addSelectorUnresolvedERKNSt6stringERKNSt6stringE", "cvc5::DatatypeConstructorDecl::addSelectorUnresolved::unresDataypeName"], [5, 1, 1, "_CPPv4NK4cvc523DatatypeConstructorDecl6isNullEv", "cvc5::DatatypeConstructorDecl::isNull"], [5, 1, 1, "_CPPv4NK4cvc523DatatypeConstructorDecl8toStringEv", "cvc5::DatatypeConstructorDecl::toString"], [5, 1, 1, "_CPPv4N4cvc523DatatypeConstructorDeclD0Ev", "cvc5::DatatypeConstructorDecl::~DatatypeConstructorDecl"], [6, 0, 1, "_CPPv4N4cvc512DatatypeDeclE", "cvc5::DatatypeDecl"], [6, 1, 1, "_CPPv4N4cvc512DatatypeDecl12DatatypeDeclEv", "cvc5::DatatypeDecl::DatatypeDecl"], [6, 1, 1, "_CPPv4N4cvc512DatatypeDecl14addConstructorERK23DatatypeConstructorDecl", "cvc5::DatatypeDecl::addConstructor"], [6, 2, 1, "_CPPv4N4cvc512DatatypeDecl14addConstructorERK23DatatypeConstructorDecl", "cvc5::DatatypeDecl::addConstructor::ctor"], [6, 1, 1, "_CPPv4NK4cvc512DatatypeDecl7getNameEv", "cvc5::DatatypeDecl::getName"], [6, 1, 1, "_CPPv4NK4cvc512DatatypeDecl18getNumConstructorsEv", "cvc5::DatatypeDecl::getNumConstructors"], [6, 1, 1, "_CPPv4NK4cvc512DatatypeDecl6isNullEv", "cvc5::DatatypeDecl::isNull"], [6, 1, 1, "_CPPv4NK4cvc512DatatypeDecl12isParametricEv", "cvc5::DatatypeDecl::isParametric"], [6, 1, 1, "_CPPv4NK4cvc512DatatypeDecl10isResolvedEv", "cvc5::DatatypeDecl::isResolved"], [6, 1, 1, "_CPPv4NK4cvc512DatatypeDecl8toStringEv", "cvc5::DatatypeDecl::toString"], [6, 1, 1, "_CPPv4N4cvc512DatatypeDeclD0Ev", "cvc5::DatatypeDecl::~DatatypeDecl"], [7, 0, 1, "_CPPv4N4cvc516DatatypeSelectorE", "cvc5::DatatypeSelector"], [7, 1, 1, "_CPPv4N4cvc516DatatypeSelector16DatatypeSelectorEv", "cvc5::DatatypeSelector::DatatypeSelector"], [7, 1, 1, "_CPPv4NK4cvc516DatatypeSelector15getCodomainSortEv", "cvc5::DatatypeSelector::getCodomainSort"], [7, 1, 1, "_CPPv4NK4cvc516DatatypeSelector7getNameEv", "cvc5::DatatypeSelector::getName"], [7, 1, 1, "_CPPv4NK4cvc516DatatypeSelector7getTermEv", "cvc5::DatatypeSelector::getTerm"], [7, 1, 1, "_CPPv4NK4cvc516DatatypeSelector14getUpdaterTermEv", "cvc5::DatatypeSelector::getUpdaterTerm"], [7, 1, 1, "_CPPv4NK4cvc516DatatypeSelector6isNullEv", "cvc5::DatatypeSelector::isNull"], [7, 1, 1, "_CPPv4NK4cvc516DatatypeSelector8toStringEv", "cvc5::DatatypeSelector::toString"], [7, 1, 1, "_CPPv4N4cvc516DatatypeSelectorD0Ev", "cvc5::DatatypeSelector::~DatatypeSelector"], [8, 0, 1, "_CPPv4N4cvc513DriverOptionsE", "cvc5::DriverOptions"], [8, 1, 1, "_CPPv4NK4cvc513DriverOptions3errEv", "cvc5::DriverOptions::err"], [8, 1, 1, "_CPPv4NK4cvc513DriverOptions2inEv", "cvc5::DriverOptions::in"], [8, 1, 1, "_CPPv4NK4cvc513DriverOptions3outEv", "cvc5::DriverOptions::out"], [10, 0, 1, "_CPPv4N4cvc57GrammarE", "cvc5::Grammar"], [10, 1, 1, "_CPPv4N4cvc57Grammar7GrammarEv", "cvc5::Grammar::Grammar"], [10, 1, 1, "_CPPv4N4cvc57Grammar14addAnyConstantERK4Term", "cvc5::Grammar::addAnyConstant"], [10, 2, 1, "_CPPv4N4cvc57Grammar14addAnyConstantERK4Term", "cvc5::Grammar::addAnyConstant::ntSymbol"], [10, 1, 1, "_CPPv4N4cvc57Grammar14addAnyVariableERK4Term", "cvc5::Grammar::addAnyVariable"], [10, 2, 1, "_CPPv4N4cvc57Grammar14addAnyVariableERK4Term", "cvc5::Grammar::addAnyVariable::ntSymbol"], [10, 1, 1, "_CPPv4N4cvc57Grammar7addRuleERK4TermRK4Term", "cvc5::Grammar::addRule"], [10, 2, 1, "_CPPv4N4cvc57Grammar7addRuleERK4TermRK4Term", "cvc5::Grammar::addRule::ntSymbol"], [10, 2, 1, "_CPPv4N4cvc57Grammar7addRuleERK4TermRK4Term", "cvc5::Grammar::addRule::rule"], [10, 1, 1, "_CPPv4N4cvc57Grammar8addRulesERK4TermRKNSt6vectorI4TermEE", "cvc5::Grammar::addRules"], [10, 2, 1, "_CPPv4N4cvc57Grammar8addRulesERK4TermRKNSt6vectorI4TermEE", "cvc5::Grammar::addRules::ntSymbol"], [10, 2, 1, "_CPPv4N4cvc57Grammar8addRulesERK4TermRKNSt6vectorI4TermEE", "cvc5::Grammar::addRules::rules"], [10, 1, 1, "_CPPv4NK4cvc57Grammar8toStringEv", "cvc5::Grammar::toString"], [10, 1, 1, "_CPPv4N4cvc57GrammarD0Ev", "cvc5::Grammar::~Grammar"], [12, 4, 1, "_CPPv4N4cvc54KindE", "cvc5::Kind"], [12, 5, 1, "_CPPv4N4cvc54Kind3ABSE", "cvc5::Kind::ABS"], [12, 5, 1, "_CPPv4N4cvc54Kind3ADDE", "cvc5::Kind::ADD"], [12, 5, 1, "_CPPv4N4cvc54Kind3ANDE", "cvc5::Kind::AND"], [12, 5, 1, "_CPPv4N4cvc54Kind17APPLY_CONSTRUCTORE", "cvc5::Kind::APPLY_CONSTRUCTOR"], [12, 5, 1, "_CPPv4N4cvc54Kind14APPLY_SELECTORE", "cvc5::Kind::APPLY_SELECTOR"], [12, 5, 1, "_CPPv4N4cvc54Kind12APPLY_TESTERE", "cvc5::Kind::APPLY_TESTER"], [12, 5, 1, "_CPPv4N4cvc54Kind8APPLY_UFE", "cvc5::Kind::APPLY_UF"], [12, 5, 1, "_CPPv4N4cvc54Kind13APPLY_UPDATERE", "cvc5::Kind::APPLY_UPDATER"], [12, 5, 1, "_CPPv4N4cvc54Kind11ARCCOSECANTE", "cvc5::Kind::ARCCOSECANT"], [12, 5, 1, "_CPPv4N4cvc54Kind9ARCCOSINEE", "cvc5::Kind::ARCCOSINE"], [12, 5, 1, "_CPPv4N4cvc54Kind12ARCCOTANGENTE", "cvc5::Kind::ARCCOTANGENT"], [12, 5, 1, "_CPPv4N4cvc54Kind9ARCSECANTE", "cvc5::Kind::ARCSECANT"], [12, 5, 1, "_CPPv4N4cvc54Kind7ARCSINEE", "cvc5::Kind::ARCSINE"], [12, 5, 1, "_CPPv4N4cvc54Kind10ARCTANGENTE", "cvc5::Kind::ARCTANGENT"], [12, 5, 1, "_CPPv4N4cvc54Kind8BAG_CARDE", "cvc5::Kind::BAG_CARD"], [12, 5, 1, "_CPPv4N4cvc54Kind10BAG_CHOOSEE", "cvc5::Kind::BAG_CHOOSE"], [12, 5, 1, "_CPPv4N4cvc54Kind9BAG_COUNTE", "cvc5::Kind::BAG_COUNT"], [12, 5, 1, "_CPPv4N4cvc54Kind21BAG_DIFFERENCE_REMOVEE", "cvc5::Kind::BAG_DIFFERENCE_REMOVE"], [12, 5, 1, "_CPPv4N4cvc54Kind23BAG_DIFFERENCE_SUBTRACTE", "cvc5::Kind::BAG_DIFFERENCE_SUBTRACT"], [12, 5, 1, "_CPPv4N4cvc54Kind21BAG_DUPLICATE_REMOVALE", "cvc5::Kind::BAG_DUPLICATE_REMOVAL"], [12, 5, 1, "_CPPv4N4cvc54Kind9BAG_EMPTYE", "cvc5::Kind::BAG_EMPTY"], [12, 5, 1, "_CPPv4N4cvc54Kind10BAG_FILTERE", "cvc5::Kind::BAG_FILTER"], [12, 5, 1, "_CPPv4N4cvc54Kind8BAG_FOLDE", "cvc5::Kind::BAG_FOLD"], [12, 5, 1, "_CPPv4N4cvc54Kind12BAG_FROM_SETE", "cvc5::Kind::BAG_FROM_SET"], [12, 5, 1, "_CPPv4N4cvc54Kind13BAG_INTER_MINE", "cvc5::Kind::BAG_INTER_MIN"], [12, 5, 1, "_CPPv4N4cvc54Kind16BAG_IS_SINGLETONE", "cvc5::Kind::BAG_IS_SINGLETON"], [12, 5, 1, "_CPPv4N4cvc54Kind8BAG_MAKEE", "cvc5::Kind::BAG_MAKE"], [12, 5, 1, "_CPPv4N4cvc54Kind7BAG_MAPE", "cvc5::Kind::BAG_MAP"], [12, 5, 1, "_CPPv4N4cvc54Kind10BAG_MEMBERE", "cvc5::Kind::BAG_MEMBER"], [12, 5, 1, "_CPPv4N4cvc54Kind13BAG_PARTITIONE", "cvc5::Kind::BAG_PARTITION"], [12, 5, 1, "_CPPv4N4cvc54Kind10BAG_SUBBAGE", "cvc5::Kind::BAG_SUBBAG"], [12, 5, 1, "_CPPv4N4cvc54Kind10BAG_TO_SETE", "cvc5::Kind::BAG_TO_SET"], [12, 5, 1, "_CPPv4N4cvc54Kind18BAG_UNION_DISJOINTE", "cvc5::Kind::BAG_UNION_DISJOINT"], [12, 5, 1, "_CPPv4N4cvc54Kind13BAG_UNION_MAXE", "cvc5::Kind::BAG_UNION_MAX"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_ADDE", "cvc5::Kind::BITVECTOR_ADD"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_ANDE", "cvc5::Kind::BITVECTOR_AND"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_ASHRE", "cvc5::Kind::BITVECTOR_ASHR"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_COMPE", "cvc5::Kind::BITVECTOR_COMP"], [12, 5, 1, "_CPPv4N4cvc54Kind16BITVECTOR_CONCATE", "cvc5::Kind::BITVECTOR_CONCAT"], [12, 5, 1, "_CPPv4N4cvc54Kind17BITVECTOR_EXTRACTE", "cvc5::Kind::BITVECTOR_EXTRACT"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_ITEE", "cvc5::Kind::BITVECTOR_ITE"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_LSHRE", "cvc5::Kind::BITVECTOR_LSHR"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_MULTE", "cvc5::Kind::BITVECTOR_MULT"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_NANDE", "cvc5::Kind::BITVECTOR_NAND"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_NEGE", "cvc5::Kind::BITVECTOR_NEG"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_NEGOE", "cvc5::Kind::BITVECTOR_NEGO"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_NORE", "cvc5::Kind::BITVECTOR_NOR"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_NOTE", "cvc5::Kind::BITVECTOR_NOT"], [12, 5, 1, "_CPPv4N4cvc54Kind12BITVECTOR_ORE", "cvc5::Kind::BITVECTOR_OR"], [12, 5, 1, "_CPPv4N4cvc54Kind16BITVECTOR_REDANDE", "cvc5::Kind::BITVECTOR_REDAND"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_REDORE", "cvc5::Kind::BITVECTOR_REDOR"], [12, 5, 1, "_CPPv4N4cvc54Kind16BITVECTOR_REPEATE", "cvc5::Kind::BITVECTOR_REPEAT"], [12, 5, 1, "_CPPv4N4cvc54Kind21BITVECTOR_ROTATE_LEFTE", "cvc5::Kind::BITVECTOR_ROTATE_LEFT"], [12, 5, 1, "_CPPv4N4cvc54Kind22BITVECTOR_ROTATE_RIGHTE", "cvc5::Kind::BITVECTOR_ROTATE_RIGHT"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_SADDOE", "cvc5::Kind::BITVECTOR_SADDO"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_SDIVE", "cvc5::Kind::BITVECTOR_SDIV"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_SDIVOE", "cvc5::Kind::BITVECTOR_SDIVO"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_SGEE", "cvc5::Kind::BITVECTOR_SGE"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_SGTE", "cvc5::Kind::BITVECTOR_SGT"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_SHLE", "cvc5::Kind::BITVECTOR_SHL"], [12, 5, 1, "_CPPv4N4cvc54Kind21BITVECTOR_SIGN_EXTENDE", "cvc5::Kind::BITVECTOR_SIGN_EXTEND"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_SLEE", "cvc5::Kind::BITVECTOR_SLE"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_SLTE", "cvc5::Kind::BITVECTOR_SLT"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_SLTBVE", "cvc5::Kind::BITVECTOR_SLTBV"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_SMODE", "cvc5::Kind::BITVECTOR_SMOD"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_SMULOE", "cvc5::Kind::BITVECTOR_SMULO"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_SREME", "cvc5::Kind::BITVECTOR_SREM"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_SSUBOE", "cvc5::Kind::BITVECTOR_SSUBO"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_SUBE", "cvc5::Kind::BITVECTOR_SUB"], [12, 5, 1, "_CPPv4N4cvc54Kind16BITVECTOR_TO_NATE", "cvc5::Kind::BITVECTOR_TO_NAT"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_UADDOE", "cvc5::Kind::BITVECTOR_UADDO"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_UDIVE", "cvc5::Kind::BITVECTOR_UDIV"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_UGEE", "cvc5::Kind::BITVECTOR_UGE"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_UGTE", "cvc5::Kind::BITVECTOR_UGT"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_ULEE", "cvc5::Kind::BITVECTOR_ULE"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_ULTE", "cvc5::Kind::BITVECTOR_ULT"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_ULTBVE", "cvc5::Kind::BITVECTOR_ULTBV"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_UMULOE", "cvc5::Kind::BITVECTOR_UMULO"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_UREME", "cvc5::Kind::BITVECTOR_UREM"], [12, 5, 1, "_CPPv4N4cvc54Kind15BITVECTOR_USUBOE", "cvc5::Kind::BITVECTOR_USUBO"], [12, 5, 1, "_CPPv4N4cvc54Kind14BITVECTOR_XNORE", "cvc5::Kind::BITVECTOR_XNOR"], [12, 5, 1, "_CPPv4N4cvc54Kind13BITVECTOR_XORE", "cvc5::Kind::BITVECTOR_XOR"], [12, 5, 1, "_CPPv4N4cvc54Kind21BITVECTOR_ZERO_EXTENDE", "cvc5::Kind::BITVECTOR_ZERO_EXTEND"], [12, 5, 1, "_CPPv4N4cvc54Kind22CARDINALITY_CONSTRAINTE", "cvc5::Kind::CARDINALITY_CONSTRAINT"], [12, 5, 1, "_CPPv4N4cvc54Kind8CONSTANTE", "cvc5::Kind::CONSTANT"], [12, 5, 1, "_CPPv4N4cvc54Kind11CONST_ARRAYE", "cvc5::Kind::CONST_ARRAY"], [12, 5, 1, "_CPPv4N4cvc54Kind15CONST_BITVECTORE", "cvc5::Kind::CONST_BITVECTOR"], [12, 5, 1, "_CPPv4N4cvc54Kind13CONST_BOOLEANE", "cvc5::Kind::CONST_BOOLEAN"], [12, 5, 1, "_CPPv4N4cvc54Kind18CONST_FINITE_FIELDE", "cvc5::Kind::CONST_FINITE_FIELD"], [12, 5, 1, "_CPPv4N4cvc54Kind19CONST_FLOATINGPOINTE", "cvc5::Kind::CONST_FLOATINGPOINT"], [12, 5, 1, "_CPPv4N4cvc54Kind13CONST_INTEGERE", "cvc5::Kind::CONST_INTEGER"], [12, 5, 1, "_CPPv4N4cvc54Kind14CONST_RATIONALE", "cvc5::Kind::CONST_RATIONAL"], [12, 5, 1, "_CPPv4N4cvc54Kind18CONST_ROUNDINGMODEE", "cvc5::Kind::CONST_ROUNDINGMODE"], [12, 5, 1, "_CPPv4N4cvc54Kind14CONST_SEQUENCEE", "cvc5::Kind::CONST_SEQUENCE"], [12, 5, 1, "_CPPv4N4cvc54Kind12CONST_STRINGE", "cvc5::Kind::CONST_STRING"], [12, 5, 1, "_CPPv4N4cvc54Kind8COSECANTE", "cvc5::Kind::COSECANT"], [12, 5, 1, "_CPPv4N4cvc54Kind6COSINEE", "cvc5::Kind::COSINE"], [12, 5, 1, "_CPPv4N4cvc54Kind9COTANGENTE", "cvc5::Kind::COTANGENT"], [12, 5, 1, "_CPPv4N4cvc54Kind8DISTINCTE", "cvc5::Kind::DISTINCT"], [12, 5, 1, "_CPPv4N4cvc54Kind9DIVISIBLEE", "cvc5::Kind::DIVISIBLE"], [12, 5, 1, "_CPPv4N4cvc54Kind8DIVISIONE", "cvc5::Kind::DIVISION"], [12, 5, 1, "_CPPv4N4cvc54Kind5EQUALE", "cvc5::Kind::EQUAL"], [12, 5, 1, "_CPPv4N4cvc54Kind8EQ_RANGEE", "cvc5::Kind::EQ_RANGE"], [12, 5, 1, "_CPPv4N4cvc54Kind6EXISTSE", "cvc5::Kind::EXISTS"], [12, 5, 1, "_CPPv4N4cvc54Kind11EXPONENTIALE", "cvc5::Kind::EXPONENTIAL"], [12, 5, 1, "_CPPv4N4cvc54Kind16FINITE_FIELD_ADDE", "cvc5::Kind::FINITE_FIELD_ADD"], [12, 5, 1, "_CPPv4N4cvc54Kind19FINITE_FIELD_BITSUME", "cvc5::Kind::FINITE_FIELD_BITSUM"], [12, 5, 1, "_CPPv4N4cvc54Kind17FINITE_FIELD_MULTE", "cvc5::Kind::FINITE_FIELD_MULT"], [12, 5, 1, "_CPPv4N4cvc54Kind16FINITE_FIELD_NEGE", "cvc5::Kind::FINITE_FIELD_NEG"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_ABSE", "cvc5::Kind::FLOATINGPOINT_ABS"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_ADDE", "cvc5::Kind::FLOATINGPOINT_ADD"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_DIVE", "cvc5::Kind::FLOATINGPOINT_DIV"], [12, 5, 1, "_CPPv4N4cvc54Kind16FLOATINGPOINT_EQE", "cvc5::Kind::FLOATINGPOINT_EQ"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_FMAE", "cvc5::Kind::FLOATINGPOINT_FMA"], [12, 5, 1, "_CPPv4N4cvc54Kind16FLOATINGPOINT_FPE", "cvc5::Kind::FLOATINGPOINT_FP"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_GEQE", "cvc5::Kind::FLOATINGPOINT_GEQ"], [12, 5, 1, "_CPPv4N4cvc54Kind16FLOATINGPOINT_GTE", "cvc5::Kind::FLOATINGPOINT_GT"], [12, 5, 1, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_INFE", "cvc5::Kind::FLOATINGPOINT_IS_INF"], [12, 5, 1, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_NANE", "cvc5::Kind::FLOATINGPOINT_IS_NAN"], [12, 5, 1, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_NEGE", "cvc5::Kind::FLOATINGPOINT_IS_NEG"], [12, 5, 1, "_CPPv4N4cvc54Kind23FLOATINGPOINT_IS_NORMALE", "cvc5::Kind::FLOATINGPOINT_IS_NORMAL"], [12, 5, 1, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_POSE", "cvc5::Kind::FLOATINGPOINT_IS_POS"], [12, 5, 1, "_CPPv4N4cvc54Kind26FLOATINGPOINT_IS_SUBNORMALE", "cvc5::Kind::FLOATINGPOINT_IS_SUBNORMAL"], [12, 5, 1, "_CPPv4N4cvc54Kind21FLOATINGPOINT_IS_ZEROE", "cvc5::Kind::FLOATINGPOINT_IS_ZERO"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_LEQE", "cvc5::Kind::FLOATINGPOINT_LEQ"], [12, 5, 1, "_CPPv4N4cvc54Kind16FLOATINGPOINT_LTE", "cvc5::Kind::FLOATINGPOINT_LT"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_MAXE", "cvc5::Kind::FLOATINGPOINT_MAX"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_MINE", "cvc5::Kind::FLOATINGPOINT_MIN"], [12, 5, 1, "_CPPv4N4cvc54Kind18FLOATINGPOINT_MULTE", "cvc5::Kind::FLOATINGPOINT_MULT"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_NEGE", "cvc5::Kind::FLOATINGPOINT_NEG"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_REME", "cvc5::Kind::FLOATINGPOINT_REM"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_RTIE", "cvc5::Kind::FLOATINGPOINT_RTI"], [12, 5, 1, "_CPPv4N4cvc54Kind18FLOATINGPOINT_SQRTE", "cvc5::Kind::FLOATINGPOINT_SQRT"], [12, 5, 1, "_CPPv4N4cvc54Kind17FLOATINGPOINT_SUBE", "cvc5::Kind::FLOATINGPOINT_SUB"], [12, 5, 1, "_CPPv4N4cvc54Kind27FLOATINGPOINT_TO_FP_FROM_FPE", "cvc5::Kind::FLOATINGPOINT_TO_FP_FROM_FP"], [12, 5, 1, "_CPPv4N4cvc54Kind32FLOATINGPOINT_TO_FP_FROM_IEEE_BVE", "cvc5::Kind::FLOATINGPOINT_TO_FP_FROM_IEEE_BV"], [12, 5, 1, "_CPPv4N4cvc54Kind29FLOATINGPOINT_TO_FP_FROM_REALE", "cvc5::Kind::FLOATINGPOINT_TO_FP_FROM_REAL"], [12, 5, 1, "_CPPv4N4cvc54Kind28FLOATINGPOINT_TO_FP_FROM_SBVE", "cvc5::Kind::FLOATINGPOINT_TO_FP_FROM_SBV"], [12, 5, 1, "_CPPv4N4cvc54Kind28FLOATINGPOINT_TO_FP_FROM_UBVE", "cvc5::Kind::FLOATINGPOINT_TO_FP_FROM_UBV"], [12, 5, 1, "_CPPv4N4cvc54Kind21FLOATINGPOINT_TO_REALE", "cvc5::Kind::FLOATINGPOINT_TO_REAL"], [12, 5, 1, "_CPPv4N4cvc54Kind20FLOATINGPOINT_TO_SBVE", "cvc5::Kind::FLOATINGPOINT_TO_SBV"], [12, 5, 1, "_CPPv4N4cvc54Kind20FLOATINGPOINT_TO_UBVE", "cvc5::Kind::FLOATINGPOINT_TO_UBV"], [12, 5, 1, "_CPPv4N4cvc54Kind6FORALLE", "cvc5::Kind::FORALL"], [12, 5, 1, "_CPPv4N4cvc54Kind3GEQE", "cvc5::Kind::GEQ"], [12, 5, 1, "_CPPv4N4cvc54Kind2GTE", "cvc5::Kind::GT"], [12, 5, 1, "_CPPv4N4cvc54Kind8HO_APPLYE", "cvc5::Kind::HO_APPLY"], [12, 5, 1, "_CPPv4N4cvc54Kind4IANDE", "cvc5::Kind::IAND"], [12, 5, 1, "_CPPv4N4cvc54Kind7IMPLIESE", "cvc5::Kind::IMPLIES"], [12, 5, 1, "_CPPv4N4cvc54Kind16INST_ADD_TO_POOLE", "cvc5::Kind::INST_ADD_TO_POOL"], [12, 5, 1, "_CPPv4N4cvc54Kind14INST_ATTRIBUTEE", "cvc5::Kind::INST_ATTRIBUTE"], [12, 5, 1, "_CPPv4N4cvc54Kind15INST_NO_PATTERNE", "cvc5::Kind::INST_NO_PATTERN"], [12, 5, 1, "_CPPv4N4cvc54Kind12INST_PATTERNE", "cvc5::Kind::INST_PATTERN"], [12, 5, 1, "_CPPv4N4cvc54Kind17INST_PATTERN_LISTE", "cvc5::Kind::INST_PATTERN_LIST"], [12, 5, 1, "_CPPv4N4cvc54Kind9INST_POOLE", "cvc5::Kind::INST_POOL"], [12, 5, 1, "_CPPv4N4cvc54Kind13INTERNAL_KINDE", "cvc5::Kind::INTERNAL_KIND"], [12, 5, 1, "_CPPv4N4cvc54Kind13INTS_DIVISIONE", "cvc5::Kind::INTS_DIVISION"], [12, 5, 1, "_CPPv4N4cvc54Kind12INTS_MODULUSE", "cvc5::Kind::INTS_MODULUS"], [12, 5, 1, "_CPPv4N4cvc54Kind16INT_TO_BITVECTORE", "cvc5::Kind::INT_TO_BITVECTOR"], [12, 5, 1, "_CPPv4N4cvc54Kind10IS_INTEGERE", "cvc5::Kind::IS_INTEGER"], [12, 5, 1, "_CPPv4N4cvc54Kind3ITEE", "cvc5::Kind::ITE"], [12, 5, 1, "_CPPv4N4cvc54Kind6LAMBDAE", "cvc5::Kind::LAMBDA"], [12, 5, 1, "_CPPv4N4cvc54Kind9LAST_KINDE", "cvc5::Kind::LAST_KIND"], [12, 5, 1, "_CPPv4N4cvc54Kind3LEQE", "cvc5::Kind::LEQ"], [12, 5, 1, "_CPPv4N4cvc54Kind2LTE", "cvc5::Kind::LT"], [12, 5, 1, "_CPPv4N4cvc54Kind5MATCHE", "cvc5::Kind::MATCH"], [12, 5, 1, "_CPPv4N4cvc54Kind15MATCH_BIND_CASEE", "cvc5::Kind::MATCH_BIND_CASE"], [12, 5, 1, "_CPPv4N4cvc54Kind10MATCH_CASEE", "cvc5::Kind::MATCH_CASE"], [12, 5, 1, "_CPPv4N4cvc54Kind4MULTE", "cvc5::Kind::MULT"], [12, 5, 1, "_CPPv4N4cvc54Kind3NEGE", "cvc5::Kind::NEG"], [12, 5, 1, "_CPPv4N4cvc54Kind3NOTE", "cvc5::Kind::NOT"], [12, 5, 1, "_CPPv4N4cvc54Kind9NULL_TERME", "cvc5::Kind::NULL_TERM"], [12, 5, 1, "_CPPv4N4cvc54Kind2ORE", "cvc5::Kind::OR"], [12, 5, 1, "_CPPv4N4cvc54Kind2PIE", "cvc5::Kind::PI"], [12, 5, 1, "_CPPv4N4cvc54Kind3POWE", "cvc5::Kind::POW"], [12, 5, 1, "_CPPv4N4cvc54Kind4POW2E", "cvc5::Kind::POW2"], [12, 5, 1, "_CPPv4N4cvc54Kind10REGEXP_ALLE", "cvc5::Kind::REGEXP_ALL"], [12, 5, 1, "_CPPv4N4cvc54Kind14REGEXP_ALLCHARE", "cvc5::Kind::REGEXP_ALLCHAR"], [12, 5, 1, "_CPPv4N4cvc54Kind17REGEXP_COMPLEMENTE", "cvc5::Kind::REGEXP_COMPLEMENT"], [12, 5, 1, "_CPPv4N4cvc54Kind13REGEXP_CONCATE", "cvc5::Kind::REGEXP_CONCAT"], [12, 5, 1, "_CPPv4N4cvc54Kind11REGEXP_DIFFE", "cvc5::Kind::REGEXP_DIFF"], [12, 5, 1, "_CPPv4N4cvc54Kind12REGEXP_INTERE", "cvc5::Kind::REGEXP_INTER"], [12, 5, 1, "_CPPv4N4cvc54Kind11REGEXP_LOOPE", "cvc5::Kind::REGEXP_LOOP"], [12, 5, 1, "_CPPv4N4cvc54Kind11REGEXP_NONEE", "cvc5::Kind::REGEXP_NONE"], [12, 5, 1, "_CPPv4N4cvc54Kind10REGEXP_OPTE", "cvc5::Kind::REGEXP_OPT"], [12, 5, 1, "_CPPv4N4cvc54Kind11REGEXP_PLUSE", "cvc5::Kind::REGEXP_PLUS"], [12, 5, 1, "_CPPv4N4cvc54Kind12REGEXP_RANGEE", "cvc5::Kind::REGEXP_RANGE"], [12, 5, 1, "_CPPv4N4cvc54Kind13REGEXP_REPEATE", "cvc5::Kind::REGEXP_REPEAT"], [12, 5, 1, "_CPPv4N4cvc54Kind11REGEXP_STARE", "cvc5::Kind::REGEXP_STAR"], [12, 5, 1, "_CPPv4N4cvc54Kind12REGEXP_UNIONE", "cvc5::Kind::REGEXP_UNION"], [12, 5, 1, "_CPPv4N4cvc54Kind18RELATION_AGGREGATEE", "cvc5::Kind::RELATION_AGGREGATE"], [12, 5, 1, "_CPPv4N4cvc54Kind14RELATION_GROUPE", "cvc5::Kind::RELATION_GROUP"], [12, 5, 1, "_CPPv4N4cvc54Kind13RELATION_IDENE", "cvc5::Kind::RELATION_IDEN"], [12, 5, 1, "_CPPv4N4cvc54Kind13RELATION_JOINE", "cvc5::Kind::RELATION_JOIN"], [12, 5, 1, "_CPPv4N4cvc54Kind19RELATION_JOIN_IMAGEE", "cvc5::Kind::RELATION_JOIN_IMAGE"], [12, 5, 1, "_CPPv4N4cvc54Kind16RELATION_PRODUCTE", "cvc5::Kind::RELATION_PRODUCT"], [12, 5, 1, "_CPPv4N4cvc54Kind16RELATION_PROJECTE", "cvc5::Kind::RELATION_PROJECT"], [12, 5, 1, "_CPPv4N4cvc54Kind17RELATION_TCLOSUREE", "cvc5::Kind::RELATION_TCLOSURE"], [12, 5, 1, "_CPPv4N4cvc54Kind18RELATION_TRANSPOSEE", "cvc5::Kind::RELATION_TRANSPOSE"], [12, 5, 1, "_CPPv4N4cvc54Kind6SECANTE", "cvc5::Kind::SECANT"], [12, 5, 1, "_CPPv4N4cvc54Kind6SELECTE", "cvc5::Kind::SELECT"], [12, 5, 1, "_CPPv4N4cvc54Kind7SEP_EMPE", "cvc5::Kind::SEP_EMP"], [12, 5, 1, "_CPPv4N4cvc54Kind7SEP_NILE", "cvc5::Kind::SEP_NIL"], [12, 5, 1, "_CPPv4N4cvc54Kind7SEP_PTOE", "cvc5::Kind::SEP_PTO"], [12, 5, 1, "_CPPv4N4cvc54Kind8SEP_STARE", "cvc5::Kind::SEP_STAR"], [12, 5, 1, "_CPPv4N4cvc54Kind8SEP_WANDE", "cvc5::Kind::SEP_WAND"], [12, 5, 1, "_CPPv4N4cvc54Kind6SEQ_ATE", "cvc5::Kind::SEQ_AT"], [12, 5, 1, "_CPPv4N4cvc54Kind10SEQ_CONCATE", "cvc5::Kind::SEQ_CONCAT"], [12, 5, 1, "_CPPv4N4cvc54Kind12SEQ_CONTAINSE", "cvc5::Kind::SEQ_CONTAINS"], [12, 5, 1, "_CPPv4N4cvc54Kind11SEQ_EXTRACTE", "cvc5::Kind::SEQ_EXTRACT"], [12, 5, 1, "_CPPv4N4cvc54Kind11SEQ_INDEXOFE", "cvc5::Kind::SEQ_INDEXOF"], [12, 5, 1, "_CPPv4N4cvc54Kind10SEQ_LENGTHE", "cvc5::Kind::SEQ_LENGTH"], [12, 5, 1, "_CPPv4N4cvc54Kind7SEQ_NTHE", "cvc5::Kind::SEQ_NTH"], [12, 5, 1, "_CPPv4N4cvc54Kind10SEQ_PREFIXE", "cvc5::Kind::SEQ_PREFIX"], [12, 5, 1, "_CPPv4N4cvc54Kind11SEQ_REPLACEE", "cvc5::Kind::SEQ_REPLACE"], [12, 5, 1, "_CPPv4N4cvc54Kind15SEQ_REPLACE_ALLE", "cvc5::Kind::SEQ_REPLACE_ALL"], [12, 5, 1, "_CPPv4N4cvc54Kind7SEQ_REVE", "cvc5::Kind::SEQ_REV"], [12, 5, 1, "_CPPv4N4cvc54Kind10SEQ_SUFFIXE", "cvc5::Kind::SEQ_SUFFIX"], [12, 5, 1, "_CPPv4N4cvc54Kind8SEQ_UNITE", "cvc5::Kind::SEQ_UNIT"], [12, 5, 1, "_CPPv4N4cvc54Kind10SEQ_UPDATEE", "cvc5::Kind::SEQ_UPDATE"], [12, 5, 1, "_CPPv4N4cvc54Kind8SET_CARDE", "cvc5::Kind::SET_CARD"], [12, 5, 1, "_CPPv4N4cvc54Kind10SET_CHOOSEE", "cvc5::Kind::SET_CHOOSE"], [12, 5, 1, "_CPPv4N4cvc54Kind14SET_COMPLEMENTE", "cvc5::Kind::SET_COMPLEMENT"], [12, 5, 1, "_CPPv4N4cvc54Kind17SET_COMPREHENSIONE", "cvc5::Kind::SET_COMPREHENSION"], [12, 5, 1, "_CPPv4N4cvc54Kind9SET_EMPTYE", "cvc5::Kind::SET_EMPTY"], [12, 5, 1, "_CPPv4N4cvc54Kind10SET_FILTERE", "cvc5::Kind::SET_FILTER"], [12, 5, 1, "_CPPv4N4cvc54Kind8SET_FOLDE", "cvc5::Kind::SET_FOLD"], [12, 5, 1, "_CPPv4N4cvc54Kind10SET_INSERTE", "cvc5::Kind::SET_INSERT"], [12, 5, 1, "_CPPv4N4cvc54Kind9SET_INTERE", "cvc5::Kind::SET_INTER"], [12, 5, 1, "_CPPv4N4cvc54Kind16SET_IS_SINGLETONE", "cvc5::Kind::SET_IS_SINGLETON"], [12, 5, 1, "_CPPv4N4cvc54Kind7SET_MAPE", "cvc5::Kind::SET_MAP"], [12, 5, 1, "_CPPv4N4cvc54Kind10SET_MEMBERE", "cvc5::Kind::SET_MEMBER"], [12, 5, 1, "_CPPv4N4cvc54Kind9SET_MINUSE", "cvc5::Kind::SET_MINUS"], [12, 5, 1, "_CPPv4N4cvc54Kind13SET_SINGLETONE", "cvc5::Kind::SET_SINGLETON"], [12, 5, 1, "_CPPv4N4cvc54Kind10SET_SUBSETE", "cvc5::Kind::SET_SUBSET"], [12, 5, 1, "_CPPv4N4cvc54Kind9SET_UNIONE", "cvc5::Kind::SET_UNION"], [12, 5, 1, "_CPPv4N4cvc54Kind12SET_UNIVERSEE", "cvc5::Kind::SET_UNIVERSE"], [12, 5, 1, "_CPPv4N4cvc54Kind5SEXPRE", "cvc5::Kind::SEXPR"], [12, 5, 1, "_CPPv4N4cvc54Kind4SINEE", "cvc5::Kind::SINE"], [12, 5, 1, "_CPPv4N4cvc54Kind18SKOLEM_ADD_TO_POOLE", "cvc5::Kind::SKOLEM_ADD_TO_POOL"], [12, 5, 1, "_CPPv4N4cvc54Kind4SQRTE", "cvc5::Kind::SQRT"], [12, 5, 1, "_CPPv4N4cvc54Kind5STOREE", "cvc5::Kind::STORE"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_CHARATE", "cvc5::Kind::STRING_CHARAT"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_CONCATE", "cvc5::Kind::STRING_CONCAT"], [12, 5, 1, "_CPPv4N4cvc54Kind15STRING_CONTAINSE", "cvc5::Kind::STRING_CONTAINS"], [12, 5, 1, "_CPPv4N4cvc54Kind16STRING_FROM_CODEE", "cvc5::Kind::STRING_FROM_CODE"], [12, 5, 1, "_CPPv4N4cvc54Kind15STRING_FROM_INTE", "cvc5::Kind::STRING_FROM_INT"], [12, 5, 1, "_CPPv4N4cvc54Kind14STRING_INDEXOFE", "cvc5::Kind::STRING_INDEXOF"], [12, 5, 1, "_CPPv4N4cvc54Kind17STRING_INDEXOF_REE", "cvc5::Kind::STRING_INDEXOF_RE"], [12, 5, 1, "_CPPv4N4cvc54Kind16STRING_IN_REGEXPE", "cvc5::Kind::STRING_IN_REGEXP"], [12, 5, 1, "_CPPv4N4cvc54Kind15STRING_IS_DIGITE", "cvc5::Kind::STRING_IS_DIGIT"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_LENGTHE", "cvc5::Kind::STRING_LENGTH"], [12, 5, 1, "_CPPv4N4cvc54Kind10STRING_LEQE", "cvc5::Kind::STRING_LEQ"], [12, 5, 1, "_CPPv4N4cvc54Kind9STRING_LTE", "cvc5::Kind::STRING_LT"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_PREFIXE", "cvc5::Kind::STRING_PREFIX"], [12, 5, 1, "_CPPv4N4cvc54Kind14STRING_REPLACEE", "cvc5::Kind::STRING_REPLACE"], [12, 5, 1, "_CPPv4N4cvc54Kind18STRING_REPLACE_ALLE", "cvc5::Kind::STRING_REPLACE_ALL"], [12, 5, 1, "_CPPv4N4cvc54Kind17STRING_REPLACE_REE", "cvc5::Kind::STRING_REPLACE_RE"], [12, 5, 1, "_CPPv4N4cvc54Kind21STRING_REPLACE_RE_ALLE", "cvc5::Kind::STRING_REPLACE_RE_ALL"], [12, 5, 1, "_CPPv4N4cvc54Kind10STRING_REVE", "cvc5::Kind::STRING_REV"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_SUBSTRE", "cvc5::Kind::STRING_SUBSTR"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_SUFFIXE", "cvc5::Kind::STRING_SUFFIX"], [12, 5, 1, "_CPPv4N4cvc54Kind14STRING_TO_CODEE", "cvc5::Kind::STRING_TO_CODE"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_TO_INTE", "cvc5::Kind::STRING_TO_INT"], [12, 5, 1, "_CPPv4N4cvc54Kind15STRING_TO_LOWERE", "cvc5::Kind::STRING_TO_LOWER"], [12, 5, 1, "_CPPv4N4cvc54Kind16STRING_TO_REGEXPE", "cvc5::Kind::STRING_TO_REGEXP"], [12, 5, 1, "_CPPv4N4cvc54Kind15STRING_TO_UPPERE", "cvc5::Kind::STRING_TO_UPPER"], [12, 5, 1, "_CPPv4N4cvc54Kind13STRING_UPDATEE", "cvc5::Kind::STRING_UPDATE"], [12, 5, 1, "_CPPv4N4cvc54Kind3SUBE", "cvc5::Kind::SUB"], [12, 5, 1, "_CPPv4N4cvc54Kind15TABLE_AGGREGATEE", "cvc5::Kind::TABLE_AGGREGATE"], [12, 5, 1, "_CPPv4N4cvc54Kind11TABLE_GROUPE", "cvc5::Kind::TABLE_GROUP"], [12, 5, 1, "_CPPv4N4cvc54Kind10TABLE_JOINE", "cvc5::Kind::TABLE_JOIN"], [12, 5, 1, "_CPPv4N4cvc54Kind13TABLE_PRODUCTE", "cvc5::Kind::TABLE_PRODUCT"], [12, 5, 1, "_CPPv4N4cvc54Kind13TABLE_PROJECTE", "cvc5::Kind::TABLE_PROJECT"], [12, 5, 1, "_CPPv4N4cvc54Kind7TANGENTE", "cvc5::Kind::TANGENT"], [12, 5, 1, "_CPPv4N4cvc54Kind10TO_INTEGERE", "cvc5::Kind::TO_INTEGER"], [12, 5, 1, "_CPPv4N4cvc54Kind7TO_REALE", "cvc5::Kind::TO_REAL"], [12, 5, 1, "_CPPv4N4cvc54Kind13TUPLE_PROJECTE", "cvc5::Kind::TUPLE_PROJECT"], [12, 5, 1, "_CPPv4N4cvc54Kind14UNDEFINED_KINDE", "cvc5::Kind::UNDEFINED_KIND"], [12, 5, 1, "_CPPv4N4cvc54Kind24UNINTERPRETED_SORT_VALUEE", "cvc5::Kind::UNINTERPRETED_SORT_VALUE"], [12, 5, 1, "_CPPv4N4cvc54Kind8VARIABLEE", "cvc5::Kind::VARIABLE"], [12, 5, 1, "_CPPv4N4cvc54Kind13VARIABLE_LISTE", "cvc5::Kind::VARIABLE_LIST"], [12, 5, 1, "_CPPv4N4cvc54Kind7WITNESSE", "cvc5::Kind::WITNESS"], [12, 5, 1, "_CPPv4N4cvc54Kind3XORE", "cvc5::Kind::XOR"], [14, 0, 1, "_CPPv4N4cvc52OpE", "cvc5::Op"], [14, 1, 1, "_CPPv4N4cvc52Op2OpEv", "cvc5::Op::Op"], [14, 1, 1, "_CPPv4NK4cvc52Op7getKindEv", "cvc5::Op::getKind"], [14, 1, 1, "_CPPv4NK4cvc52Op13getNumIndicesEv", "cvc5::Op::getNumIndices"], [14, 1, 1, "_CPPv4NK4cvc52Op9isIndexedEv", "cvc5::Op::isIndexed"], [14, 1, 1, "_CPPv4NK4cvc52Op6isNullEv", "cvc5::Op::isNull"], [14, 1, 1, "_CPPv4NK4cvc52OpneERK2Op", "cvc5::Op::operator!="], [14, 2, 1, "_CPPv4NK4cvc52OpneERK2Op", "cvc5::Op::operator!=::t"], [14, 1, 1, "_CPPv4NK4cvc52OpeqERK2Op", "cvc5::Op::operator=="], [14, 2, 1, "_CPPv4NK4cvc52OpeqERK2Op", "cvc5::Op::operator==::t"], [14, 1, 1, "_CPPv4NK4cvc52OpixE6size_t", "cvc5::Op::operator[]"], [14, 2, 1, "_CPPv4NK4cvc52OpixE6size_t", "cvc5::Op::operator[]::i"], [14, 1, 1, "_CPPv4NK4cvc52Op8toStringEv", "cvc5::Op::toString"], [14, 1, 1, "_CPPv4N4cvc52OpD0Ev", "cvc5::Op::~Op"], [15, 0, 1, "_CPPv4N4cvc510OptionInfoE", "cvc5::OptionInfo"], [15, 0, 1, "_CPPv4N4cvc510OptionInfo8ModeInfoE", "cvc5::OptionInfo::ModeInfo"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo8ModeInfo12currentValueE", "cvc5::OptionInfo::ModeInfo::currentValue"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo8ModeInfo12defaultValueE", "cvc5::OptionInfo::ModeInfo::defaultValue"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo8ModeInfo5modesE", "cvc5::OptionInfo::ModeInfo::modes"], [15, 0, 1, "_CPPv4I0EN4cvc510OptionInfo10NumberInfoE", "cvc5::OptionInfo::NumberInfo"], [15, 7, 1, "_CPPv4I0EN4cvc510OptionInfo10NumberInfoE", "cvc5::OptionInfo::NumberInfo::T"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo10NumberInfo12currentValueE", "cvc5::OptionInfo::NumberInfo::currentValue"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo10NumberInfo12defaultValueE", "cvc5::OptionInfo::NumberInfo::defaultValue"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo10NumberInfo7maximumE", "cvc5::OptionInfo::NumberInfo::maximum"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo10NumberInfo7minimumE", "cvc5::OptionInfo::NumberInfo::minimum"], [15, 3, 1, "_CPPv4N4cvc510OptionInfo17OptionInfoVariantE", "cvc5::OptionInfo::OptionInfoVariant"], [15, 0, 1, "_CPPv4I0EN4cvc510OptionInfo9ValueInfoE", "cvc5::OptionInfo::ValueInfo"], [15, 7, 1, "_CPPv4I0EN4cvc510OptionInfo9ValueInfoE", "cvc5::OptionInfo::ValueInfo::T"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo9ValueInfo12currentValueE", "cvc5::OptionInfo::ValueInfo::currentValue"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo9ValueInfo12defaultValueE", "cvc5::OptionInfo::ValueInfo::defaultValue"], [15, 0, 1, "_CPPv4N4cvc510OptionInfo8VoidInfoE", "cvc5::OptionInfo::VoidInfo"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo7aliasesE", "cvc5::OptionInfo::aliases"], [15, 1, 1, "_CPPv4NK4cvc510OptionInfo9boolValueEv", "cvc5::OptionInfo::boolValue"], [15, 1, 1, "_CPPv4NK4cvc510OptionInfo11doubleValueEv", "cvc5::OptionInfo::doubleValue"], [15, 1, 1, "_CPPv4NK4cvc510OptionInfo8intValueEv", "cvc5::OptionInfo::intValue"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo8isExpertE", "cvc5::OptionInfo::isExpert"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo4nameE", "cvc5::OptionInfo::name"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo9setByUserE", "cvc5::OptionInfo::setByUser"], [15, 1, 1, "_CPPv4NK4cvc510OptionInfo11stringValueEv", "cvc5::OptionInfo::stringValue"], [15, 1, 1, "_CPPv4NK4cvc510OptionInfo9uintValueEv", "cvc5::OptionInfo::uintValue"], [15, 6, 1, "_CPPv4N4cvc510OptionInfo9valueInfoE", "cvc5::OptionInfo::valueInfo"], [96, 4, 1, "_CPPv4N4cvc59ProofRuleE", "cvc5::ProofRule"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11ALETHE_RULEE", "cvc5::ProofRule::ALETHE_RULE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule8ALF_RULEE", "cvc5::ProofRule::ALF_RULE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11ALPHA_EQUIVE", "cvc5::ProofRule::ALPHA_EQUIV"], [96, 5, 1, "_CPPv4N4cvc59ProofRule8AND_ELIME", "cvc5::ProofRule::AND_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9AND_INTROE", "cvc5::ProofRule::AND_INTRO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10ANNOTATIONE", "cvc5::ProofRule::ANNOTATION"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14ARITH_MULT_NEGE", "cvc5::ProofRule::ARITH_MULT_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14ARITH_MULT_POSE", "cvc5::ProofRule::ARITH_MULT_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule15ARITH_MULT_SIGNE", "cvc5::ProofRule::ARITH_MULT_SIGN"], [96, 5, 1, "_CPPv4N4cvc59ProofRule18ARITH_MULT_TANGENTE", "cvc5::ProofRule::ARITH_MULT_TANGENT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule24ARITH_NL_COVERING_DIRECTE", "cvc5::ProofRule::ARITH_NL_COVERING_DIRECT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule27ARITH_NL_COVERING_RECURSIVEE", "cvc5::ProofRule::ARITH_NL_COVERING_RECURSIVE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule19ARITH_OP_ELIM_AXIOME", "cvc5::ProofRule::ARITH_OP_ELIM_AXIOM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule15ARITH_POLY_NORME", "cvc5::ProofRule::ARITH_POLY_NORM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12ARITH_SUM_UBE", "cvc5::ProofRule::ARITH_SUM_UB"], [96, 5, 1, "_CPPv4N4cvc59ProofRule32ARITH_TRANS_EXP_APPROX_ABOVE_NEGE", "cvc5::ProofRule::ARITH_TRANS_EXP_APPROX_ABOVE_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule32ARITH_TRANS_EXP_APPROX_ABOVE_POSE", "cvc5::ProofRule::ARITH_TRANS_EXP_APPROX_ABOVE_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule28ARITH_TRANS_EXP_APPROX_BELOWE", "cvc5::ProofRule::ARITH_TRANS_EXP_APPROX_BELOW"], [96, 5, 1, "_CPPv4N4cvc59ProofRule19ARITH_TRANS_EXP_NEGE", "cvc5::ProofRule::ARITH_TRANS_EXP_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule26ARITH_TRANS_EXP_POSITIVITYE", "cvc5::ProofRule::ARITH_TRANS_EXP_POSITIVITY"], [96, 5, 1, "_CPPv4N4cvc59ProofRule25ARITH_TRANS_EXP_SUPER_LINE", "cvc5::ProofRule::ARITH_TRANS_EXP_SUPER_LIN"], [96, 5, 1, "_CPPv4N4cvc59ProofRule20ARITH_TRANS_EXP_ZEROE", "cvc5::ProofRule::ARITH_TRANS_EXP_ZERO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14ARITH_TRANS_PIE", "cvc5::ProofRule::ARITH_TRANS_PI"], [96, 5, 1, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_ABOVE_NEGE", "cvc5::ProofRule::ARITH_TRANS_SINE_APPROX_ABOVE_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_ABOVE_POSE", "cvc5::ProofRule::ARITH_TRANS_SINE_APPROX_ABOVE_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_BELOW_NEGE", "cvc5::ProofRule::ARITH_TRANS_SINE_APPROX_BELOW_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_BELOW_POSE", "cvc5::ProofRule::ARITH_TRANS_SINE_APPROX_BELOW_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule23ARITH_TRANS_SINE_BOUNDSE", "cvc5::ProofRule::ARITH_TRANS_SINE_BOUNDS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule22ARITH_TRANS_SINE_SHIFTE", "cvc5::ProofRule::ARITH_TRANS_SINE_SHIFT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule25ARITH_TRANS_SINE_SYMMETRYE", "cvc5::ProofRule::ARITH_TRANS_SINE_SYMMETRY"], [96, 5, 1, "_CPPv4N4cvc59ProofRule27ARITH_TRANS_SINE_TANGENT_PIE", "cvc5::ProofRule::ARITH_TRANS_SINE_TANGENT_PI"], [96, 5, 1, "_CPPv4N4cvc59ProofRule29ARITH_TRANS_SINE_TANGENT_ZEROE", "cvc5::ProofRule::ARITH_TRANS_SINE_TANGENT_ZERO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16ARITH_TRICHOTOMYE", "cvc5::ProofRule::ARITH_TRICHOTOMY"], [96, 5, 1, "_CPPv4N4cvc59ProofRule22ARRAYS_EQ_RANGE_EXPANDE", "cvc5::ProofRule::ARRAYS_EQ_RANGE_EXPAND"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10ARRAYS_EXTE", "cvc5::ProofRule::ARRAYS_EXT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule22ARRAYS_READ_OVER_WRITEE", "cvc5::ProofRule::ARRAYS_READ_OVER_WRITE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule24ARRAYS_READ_OVER_WRITE_1E", "cvc5::ProofRule::ARRAYS_READ_OVER_WRITE_1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule29ARRAYS_READ_OVER_WRITE_CONTRAE", "cvc5::ProofRule::ARRAYS_READ_OVER_WRITE_CONTRA"], [96, 5, 1, "_CPPv4N4cvc59ProofRule6ASSUMEE", "cvc5::ProofRule::ASSUME"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11BETA_REDUCEE", "cvc5::ProofRule::BETA_REDUCE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16BV_BITBLAST_STEPE", "cvc5::ProofRule::BV_BITBLAST_STEP"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13BV_EAGER_ATOME", "cvc5::ProofRule::BV_EAGER_ATOM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16CHAIN_RESOLUTIONE", "cvc5::ProofRule::CHAIN_RESOLUTION"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11CNF_AND_NEGE", "cvc5::ProofRule::CNF_AND_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11CNF_AND_POSE", "cvc5::ProofRule::CNF_AND_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_NEG1E", "cvc5::ProofRule::CNF_EQUIV_NEG1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_NEG2E", "cvc5::ProofRule::CNF_EQUIV_NEG2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_POS1E", "cvc5::ProofRule::CNF_EQUIV_POS1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_POS2E", "cvc5::ProofRule::CNF_EQUIV_POS2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16CNF_IMPLIES_NEG1E", "cvc5::ProofRule::CNF_IMPLIES_NEG1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16CNF_IMPLIES_NEG2E", "cvc5::ProofRule::CNF_IMPLIES_NEG2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule15CNF_IMPLIES_POSE", "cvc5::ProofRule::CNF_IMPLIES_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_ITE_NEG1E", "cvc5::ProofRule::CNF_ITE_NEG1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_ITE_NEG2E", "cvc5::ProofRule::CNF_ITE_NEG2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_ITE_NEG3E", "cvc5::ProofRule::CNF_ITE_NEG3"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_ITE_POS1E", "cvc5::ProofRule::CNF_ITE_POS1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_ITE_POS2E", "cvc5::ProofRule::CNF_ITE_POS2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_ITE_POS3E", "cvc5::ProofRule::CNF_ITE_POS3"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10CNF_OR_NEGE", "cvc5::ProofRule::CNF_OR_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10CNF_OR_POSE", "cvc5::ProofRule::CNF_OR_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_XOR_NEG1E", "cvc5::ProofRule::CNF_XOR_NEG1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_XOR_NEG2E", "cvc5::ProofRule::CNF_XOR_NEG2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_XOR_POS1E", "cvc5::ProofRule::CNF_XOR_POS1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CNF_XOR_POS2E", "cvc5::ProofRule::CNF_XOR_POS2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule15CONCAT_CONFLICTE", "cvc5::ProofRule::CONCAT_CONFLICT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CONCAT_CPROPE", "cvc5::ProofRule::CONCAT_CPROP"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13CONCAT_CSPLITE", "cvc5::ProofRule::CONCAT_CSPLIT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9CONCAT_EQE", "cvc5::ProofRule::CONCAT_EQ"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CONCAT_LPROPE", "cvc5::ProofRule::CONCAT_LPROP"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CONCAT_SPLITE", "cvc5::ProofRule::CONCAT_SPLIT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12CONCAT_UNIFYE", "cvc5::ProofRule::CONCAT_UNIFY"], [96, 5, 1, "_CPPv4N4cvc59ProofRule4CONGE", "cvc5::ProofRule::CONG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule6CONTRAE", "cvc5::ProofRule::CONTRA"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11DSL_REWRITEE", "cvc5::ProofRule::DSL_REWRITE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule8DT_CLASHE", "cvc5::ProofRule::DT_CLASH"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11DT_COLLAPSEE", "cvc5::ProofRule::DT_COLLAPSE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule7DT_INSTE", "cvc5::ProofRule::DT_INST"], [96, 5, 1, "_CPPv4N4cvc59ProofRule8DT_SPLITE", "cvc5::ProofRule::DT_SPLIT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule7DT_UNIFE", "cvc5::ProofRule::DT_UNIF"], [96, 5, 1, "_CPPv4N4cvc59ProofRule21ENCODE_PRED_TRANSFORME", "cvc5::ProofRule::ENCODE_PRED_TRANSFORM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11EQUIV_ELIM1E", "cvc5::ProofRule::EQUIV_ELIM1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11EQUIV_ELIM2E", "cvc5::ProofRule::EQUIV_ELIM2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10EQ_RESOLVEE", "cvc5::ProofRule::EQ_RESOLVE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule8EVALUATEE", "cvc5::ProofRule::EVALUATE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9FACTORINGE", "cvc5::ProofRule::FACTORING"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10FALSE_ELIME", "cvc5::ProofRule::FALSE_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11FALSE_INTROE", "cvc5::ProofRule::FALSE_INTRO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13HO_APP_ENCODEE", "cvc5::ProofRule::HO_APP_ENCODE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule7HO_CONGE", "cvc5::ProofRule::HO_CONG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12IMPLIES_ELIME", "cvc5::ProofRule::IMPLIES_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11INSTANTIATEE", "cvc5::ProofRule::INSTANTIATE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12INT_TIGHT_LBE", "cvc5::ProofRule::INT_TIGHT_LB"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12INT_TIGHT_UBE", "cvc5::ProofRule::INT_TIGHT_UB"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9ITE_ELIM1E", "cvc5::ProofRule::ITE_ELIM1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9ITE_ELIM2E", "cvc5::ProofRule::ITE_ELIM2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9LFSC_RULEE", "cvc5::ProofRule::LFSC_RULE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule24MACRO_ARITH_SCALE_SUM_UBE", "cvc5::ProofRule::MACRO_ARITH_SCALE_SUM_UB"], [96, 5, 1, "_CPPv4N4cvc59ProofRule17MACRO_BV_BITBLASTE", "cvc5::ProofRule::MACRO_BV_BITBLAST"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16MACRO_RESOLUTIONE", "cvc5::ProofRule::MACRO_RESOLUTION"], [96, 5, 1, "_CPPv4N4cvc59ProofRule22MACRO_RESOLUTION_TRUSTE", "cvc5::ProofRule::MACRO_RESOLUTION_TRUST"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13MACRO_REWRITEE", "cvc5::ProofRule::MACRO_REWRITE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule17MACRO_SR_EQ_INTROE", "cvc5::ProofRule::MACRO_SR_EQ_INTRO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule18MACRO_SR_PRED_ELIME", "cvc5::ProofRule::MACRO_SR_PRED_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule19MACRO_SR_PRED_INTROE", "cvc5::ProofRule::MACRO_SR_PRED_INTRO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule23MACRO_SR_PRED_TRANSFORME", "cvc5::ProofRule::MACRO_SR_PRED_TRANSFORM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule22MACRO_STRING_INFERENCEE", "cvc5::ProofRule::MACRO_STRING_INFERENCE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12MODUS_PONENSE", "cvc5::ProofRule::MODUS_PONENS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule7NOT_ANDE", "cvc5::ProofRule::NOT_AND"], [96, 5, 1, "_CPPv4N4cvc59ProofRule15NOT_EQUIV_ELIM1E", "cvc5::ProofRule::NOT_EQUIV_ELIM1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule15NOT_EQUIV_ELIM2E", "cvc5::ProofRule::NOT_EQUIV_ELIM2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule17NOT_IMPLIES_ELIM1E", "cvc5::ProofRule::NOT_IMPLIES_ELIM1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule17NOT_IMPLIES_ELIM2E", "cvc5::ProofRule::NOT_IMPLIES_ELIM2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13NOT_ITE_ELIM1E", "cvc5::ProofRule::NOT_ITE_ELIM1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13NOT_ITE_ELIM2E", "cvc5::ProofRule::NOT_ITE_ELIM2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12NOT_NOT_ELIME", "cvc5::ProofRule::NOT_NOT_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule11NOT_OR_ELIME", "cvc5::ProofRule::NOT_OR_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13NOT_XOR_ELIM1E", "cvc5::ProofRule::NOT_XOR_ELIM1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13NOT_XOR_ELIM2E", "cvc5::ProofRule::NOT_XOR_ELIM2"], [96, 5, 1, "_CPPv4N4cvc59ProofRule4REFLE", "cvc5::ProofRule::REFL"], [96, 5, 1, "_CPPv4N4cvc59ProofRule25REMOVE_TERM_FORMULA_AXIOME", "cvc5::ProofRule::REMOVE_TERM_FORMULA_AXIOM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10REORDERINGE", "cvc5::ProofRule::REORDERING"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10RESOLUTIONE", "cvc5::ProofRule::RESOLUTION"], [96, 5, 1, "_CPPv4N4cvc59ProofRule7RE_ELIME", "cvc5::ProofRule::RE_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule8RE_INTERE", "cvc5::ProofRule::RE_INTER"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13RE_UNFOLD_NEGE", "cvc5::ProofRule::RE_UNFOLD_NEG"], [96, 5, 1, "_CPPv4N4cvc59ProofRule26RE_UNFOLD_NEG_CONCAT_FIXEDE", "cvc5::ProofRule::RE_UNFOLD_NEG_CONCAT_FIXED"], [96, 5, 1, "_CPPv4N4cvc59ProofRule13RE_UNFOLD_POSE", "cvc5::ProofRule::RE_UNFOLD_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule14SAT_REFUTATIONE", "cvc5::ProofRule::SAT_REFUTATION"], [96, 5, 1, "_CPPv4N4cvc59ProofRule5SCOPEE", "cvc5::ProofRule::SCOPE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9SKOLEMIZEE", "cvc5::ProofRule::SKOLEMIZE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule12SKOLEM_INTROE", "cvc5::ProofRule::SKOLEM_INTRO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule5SPLITE", "cvc5::ProofRule::SPLIT"], [96, 5, 1, "_CPPv4N4cvc59ProofRule15STRING_CODE_INJE", "cvc5::ProofRule::STRING_CODE_INJ"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16STRING_DECOMPOSEE", "cvc5::ProofRule::STRING_DECOMPOSE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule22STRING_EAGER_REDUCTIONE", "cvc5::ProofRule::STRING_EAGER_REDUCTION"], [96, 5, 1, "_CPPv4N4cvc59ProofRule23STRING_LENGTH_NON_EMPTYE", "cvc5::ProofRule::STRING_LENGTH_NON_EMPTY"], [96, 5, 1, "_CPPv4N4cvc59ProofRule17STRING_LENGTH_POSE", "cvc5::ProofRule::STRING_LENGTH_POS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule16STRING_REDUCTIONE", "cvc5::ProofRule::STRING_REDUCTION"], [96, 5, 1, "_CPPv4N4cvc59ProofRule19STRING_SEQ_UNIT_INJE", "cvc5::ProofRule::STRING_SEQ_UNIT_INJ"], [96, 5, 1, "_CPPv4N4cvc59ProofRule4SUBSE", "cvc5::ProofRule::SUBS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule4SYMME", "cvc5::ProofRule::SYMM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule5TRANSE", "cvc5::ProofRule::TRANS"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9TRUE_ELIME", "cvc5::ProofRule::TRUE_ELIM"], [96, 5, 1, "_CPPv4N4cvc59ProofRule10TRUE_INTROE", "cvc5::ProofRule::TRUE_INTRO"], [96, 5, 1, "_CPPv4N4cvc59ProofRule5TRUSTE", "cvc5::ProofRule::TRUST"], [96, 5, 1, "_CPPv4N4cvc59ProofRule20TRUST_THEORY_REWRITEE", "cvc5::ProofRule::TRUST_THEORY_REWRITE"], [96, 5, 1, "_CPPv4N4cvc59ProofRule7UNKNOWNE", "cvc5::ProofRule::UNKNOWN"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9XOR_ELIM1E", "cvc5::ProofRule::XOR_ELIM1"], [96, 5, 1, "_CPPv4N4cvc59ProofRule9XOR_ELIM2E", "cvc5::ProofRule::XOR_ELIM2"], [18, 0, 1, "_CPPv4N4cvc56ResultE", "cvc5::Result"], [18, 1, 1, "_CPPv4N4cvc56Result6ResultEv", "cvc5::Result::Result"], [18, 1, 1, "_CPPv4NK4cvc56Result21getUnknownExplanationEv", "cvc5::Result::getUnknownExplanation"], [18, 1, 1, "_CPPv4NK4cvc56Result6isNullEv", "cvc5::Result::isNull"], [18, 1, 1, "_CPPv4NK4cvc56Result5isSatEv", "cvc5::Result::isSat"], [18, 1, 1, "_CPPv4NK4cvc56Result9isUnknownEv", "cvc5::Result::isUnknown"], [18, 1, 1, "_CPPv4NK4cvc56Result7isUnsatEv", "cvc5::Result::isUnsat"], [18, 1, 1, "_CPPv4NK4cvc56ResultneERK6Result", "cvc5::Result::operator!="], [18, 2, 1, "_CPPv4NK4cvc56ResultneERK6Result", "cvc5::Result::operator!=::r"], [18, 1, 1, "_CPPv4NK4cvc56ResulteqERK6Result", "cvc5::Result::operator=="], [18, 2, 1, "_CPPv4NK4cvc56ResulteqERK6Result", "cvc5::Result::operator==::r"], [18, 1, 1, "_CPPv4NK4cvc56Result8toStringEv", "cvc5::Result::toString"], [19, 4, 1, "_CPPv4N4cvc512RoundingModeE", "cvc5::RoundingMode"], [19, 5, 1, "_CPPv4N4cvc512RoundingMode26ROUND_NEAREST_TIES_TO_AWAYE", "cvc5::RoundingMode::ROUND_NEAREST_TIES_TO_AWAY"], [19, 5, 1, "_CPPv4N4cvc512RoundingMode26ROUND_NEAREST_TIES_TO_EVENE", "cvc5::RoundingMode::ROUND_NEAREST_TIES_TO_EVEN"], [19, 5, 1, "_CPPv4N4cvc512RoundingMode21ROUND_TOWARD_NEGATIVEE", "cvc5::RoundingMode::ROUND_TOWARD_NEGATIVE"], [19, 5, 1, "_CPPv4N4cvc512RoundingMode21ROUND_TOWARD_POSITIVEE", "cvc5::RoundingMode::ROUND_TOWARD_POSITIVE"], [19, 5, 1, "_CPPv4N4cvc512RoundingMode17ROUND_TOWARD_ZEROE", "cvc5::RoundingMode::ROUND_TOWARD_ZERO"], [20, 0, 1, "_CPPv4N4cvc56SolverE", "cvc5::Solver"], [20, 1, 1, "_CPPv4N4cvc56Solver6SolverERK6Solver", "cvc5::Solver::Solver"], [20, 1, 1, "_CPPv4N4cvc56Solver6SolverEv", "cvc5::Solver::Solver"], [20, 1, 1, "_CPPv4NK4cvc56Solver14addSygusAssumeERK4Term", "cvc5::Solver::addSygusAssume"], [20, 2, 1, "_CPPv4NK4cvc56Solver14addSygusAssumeERK4Term", "cvc5::Solver::addSygusAssume::term"], [20, 1, 1, "_CPPv4NK4cvc56Solver18addSygusConstraintERK4Term", "cvc5::Solver::addSygusConstraint"], [20, 2, 1, "_CPPv4NK4cvc56Solver18addSygusConstraintERK4Term", "cvc5::Solver::addSygusConstraint::term"], [20, 1, 1, "_CPPv4NK4cvc56Solver21addSygusInvConstraintERK4TermRK4TermRK4TermRK4Term", "cvc5::Solver::addSygusInvConstraint"], [20, 2, 1, "_CPPv4NK4cvc56Solver21addSygusInvConstraintERK4TermRK4TermRK4TermRK4Term", "cvc5::Solver::addSygusInvConstraint::inv"], [20, 2, 1, "_CPPv4NK4cvc56Solver21addSygusInvConstraintERK4TermRK4TermRK4TermRK4Term", "cvc5::Solver::addSygusInvConstraint::post"], [20, 2, 1, "_CPPv4NK4cvc56Solver21addSygusInvConstraintERK4TermRK4TermRK4TermRK4Term", "cvc5::Solver::addSygusInvConstraint::pre"], [20, 2, 1, "_CPPv4NK4cvc56Solver21addSygusInvConstraintERK4TermRK4TermRK4TermRK4Term", "cvc5::Solver::addSygusInvConstraint::trans"], [20, 1, 1, "_CPPv4NK4cvc56Solver13assertFormulaERK4Term", "cvc5::Solver::assertFormula"], [20, 2, 1, "_CPPv4NK4cvc56Solver13assertFormulaERK4Term", "cvc5::Solver::assertFormula::term"], [20, 1, 1, "_CPPv4NK4cvc56Solver10blockModelEN5modes15BlockModelsModeE", "cvc5::Solver::blockModel"], [20, 2, 1, "_CPPv4NK4cvc56Solver10blockModelEN5modes15BlockModelsModeE", "cvc5::Solver::blockModel::mode"], [20, 1, 1, "_CPPv4NK4cvc56Solver16blockModelValuesERKNSt6vectorI4TermEE", "cvc5::Solver::blockModelValues"], [20, 2, 1, "_CPPv4NK4cvc56Solver16blockModelValuesERKNSt6vectorI4TermEE", "cvc5::Solver::blockModelValues::terms"], [20, 1, 1, "_CPPv4NK4cvc56Solver8checkSatEv", "cvc5::Solver::checkSat"], [20, 1, 1, "_CPPv4NK4cvc56Solver16checkSatAssumingERK4Term", "cvc5::Solver::checkSatAssuming"], [20, 1, 1, "_CPPv4NK4cvc56Solver16checkSatAssumingERKNSt6vectorI4TermEE", "cvc5::Solver::checkSatAssuming"], [20, 2, 1, "_CPPv4NK4cvc56Solver16checkSatAssumingERK4Term", "cvc5::Solver::checkSatAssuming::assumption"], [20, 2, 1, "_CPPv4NK4cvc56Solver16checkSatAssumingERKNSt6vectorI4TermEE", "cvc5::Solver::checkSatAssuming::assumptions"], [20, 1, 1, "_CPPv4NK4cvc56Solver10checkSynthEv", "cvc5::Solver::checkSynth"], [20, 1, 1, "_CPPv4NK4cvc56Solver14checkSynthNextEv", "cvc5::Solver::checkSynthNext"], [20, 1, 1, "_CPPv4NK4cvc56Solver15declareDatatypeERKNSt6stringERKNSt6vectorI23DatatypeConstructorDeclEE", "cvc5::Solver::declareDatatype"], [20, 2, 1, "_CPPv4NK4cvc56Solver15declareDatatypeERKNSt6stringERKNSt6vectorI23DatatypeConstructorDeclEE", "cvc5::Solver::declareDatatype::ctors"], [20, 2, 1, "_CPPv4NK4cvc56Solver15declareDatatypeERKNSt6stringERKNSt6vectorI23DatatypeConstructorDeclEE", "cvc5::Solver::declareDatatype::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver10declareFunERKNSt6stringERKNSt6vectorI4SortEERK4Sortb", "cvc5::Solver::declareFun"], [20, 2, 1, "_CPPv4NK4cvc56Solver10declareFunERKNSt6stringERKNSt6vectorI4SortEERK4Sortb", "cvc5::Solver::declareFun::fresh"], [20, 2, 1, "_CPPv4NK4cvc56Solver10declareFunERKNSt6stringERKNSt6vectorI4SortEERK4Sortb", "cvc5::Solver::declareFun::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver10declareFunERKNSt6stringERKNSt6vectorI4SortEERK4Sortb", "cvc5::Solver::declareFun::sorts"], [20, 2, 1, "_CPPv4NK4cvc56Solver10declareFunERKNSt6stringERKNSt6vectorI4SortEERK4Sortb", "cvc5::Solver::declareFun::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver16declareOracleFunERKNSt6stringERKNSt6vectorI4SortEERK4SortNSt8functionIF4TermRKNSt6vectorI4TermEEEEE", "cvc5::Solver::declareOracleFun"], [20, 2, 1, "_CPPv4NK4cvc56Solver16declareOracleFunERKNSt6stringERKNSt6vectorI4SortEERK4SortNSt8functionIF4TermRKNSt6vectorI4TermEEEEE", "cvc5::Solver::declareOracleFun::fn"], [20, 2, 1, "_CPPv4NK4cvc56Solver16declareOracleFunERKNSt6stringERKNSt6vectorI4SortEERK4SortNSt8functionIF4TermRKNSt6vectorI4TermEEEEE", "cvc5::Solver::declareOracleFun::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver16declareOracleFunERKNSt6stringERKNSt6vectorI4SortEERK4SortNSt8functionIF4TermRKNSt6vectorI4TermEEEEE", "cvc5::Solver::declareOracleFun::sorts"], [20, 2, 1, "_CPPv4NK4cvc56Solver16declareOracleFunERKNSt6stringERKNSt6vectorI4SortEERK4SortNSt8functionIF4TermRKNSt6vectorI4TermEEEEE", "cvc5::Solver::declareOracleFun::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver11declarePoolERKNSt6stringERK4SortRKNSt6vectorI4TermEE", "cvc5::Solver::declarePool"], [20, 2, 1, "_CPPv4NK4cvc56Solver11declarePoolERKNSt6stringERK4SortRKNSt6vectorI4TermEE", "cvc5::Solver::declarePool::initValue"], [20, 2, 1, "_CPPv4NK4cvc56Solver11declarePoolERKNSt6stringERK4SortRKNSt6vectorI4TermEE", "cvc5::Solver::declarePool::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver11declarePoolERKNSt6stringERK4SortRKNSt6vectorI4TermEE", "cvc5::Solver::declarePool::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver14declareSepHeapERK4SortRK4Sort", "cvc5::Solver::declareSepHeap"], [20, 2, 1, "_CPPv4NK4cvc56Solver14declareSepHeapERK4SortRK4Sort", "cvc5::Solver::declareSepHeap::dataSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver14declareSepHeapERK4SortRK4Sort", "cvc5::Solver::declareSepHeap::locSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver11declareSortERKNSt6stringE8uint32_tb", "cvc5::Solver::declareSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver11declareSortERKNSt6stringE8uint32_tb", "cvc5::Solver::declareSort::arity"], [20, 2, 1, "_CPPv4NK4cvc56Solver11declareSortERKNSt6stringE8uint32_tb", "cvc5::Solver::declareSort::fresh"], [20, 2, 1, "_CPPv4NK4cvc56Solver11declareSortERKNSt6stringE8uint32_tb", "cvc5::Solver::declareSort::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver15declareSygusVarERKNSt6stringERK4Sort", "cvc5::Solver::declareSygusVar"], [20, 2, 1, "_CPPv4NK4cvc56Solver15declareSygusVarERKNSt6stringERK4Sort", "cvc5::Solver::declareSygusVar::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver15declareSygusVarERKNSt6stringERK4Sort", "cvc5::Solver::declareSygusVar::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver9defineFunERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFun"], [20, 2, 1, "_CPPv4NK4cvc56Solver9defineFunERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFun::bound_vars"], [20, 2, 1, "_CPPv4NK4cvc56Solver9defineFunERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFun::global"], [20, 2, 1, "_CPPv4NK4cvc56Solver9defineFunERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFun::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver9defineFunERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFun::symbol"], [20, 2, 1, "_CPPv4NK4cvc56Solver9defineFunERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFun::term"], [20, 1, 1, "_CPPv4NK4cvc56Solver12defineFunRecERK4TermRKNSt6vectorI4TermEERK4Termb", "cvc5::Solver::defineFunRec"], [20, 1, 1, "_CPPv4NK4cvc56Solver12defineFunRecERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFunRec"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERK4TermRKNSt6vectorI4TermEERK4Termb", "cvc5::Solver::defineFunRec::bound_vars"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFunRec::bound_vars"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERK4TermRKNSt6vectorI4TermEERK4Termb", "cvc5::Solver::defineFunRec::fun"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERK4TermRKNSt6vectorI4TermEERK4Termb", "cvc5::Solver::defineFunRec::global"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFunRec::global"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFunRec::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFunRec::symbol"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERK4TermRKNSt6vectorI4TermEERK4Termb", "cvc5::Solver::defineFunRec::term"], [20, 2, 1, "_CPPv4NK4cvc56Solver12defineFunRecERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb", "cvc5::Solver::defineFunRec::term"], [20, 1, 1, "_CPPv4NK4cvc56Solver13defineFunsRecERKNSt6vectorI4TermEERKNSt6vectorINSt6vectorI4TermEEEERKNSt6vectorI4TermEEb", "cvc5::Solver::defineFunsRec"], [20, 2, 1, "_CPPv4NK4cvc56Solver13defineFunsRecERKNSt6vectorI4TermEERKNSt6vectorINSt6vectorI4TermEEEERKNSt6vectorI4TermEEb", "cvc5::Solver::defineFunsRec::bound_vars"], [20, 2, 1, "_CPPv4NK4cvc56Solver13defineFunsRecERKNSt6vectorI4TermEERKNSt6vectorINSt6vectorI4TermEEEERKNSt6vectorI4TermEEb", "cvc5::Solver::defineFunsRec::funs"], [20, 2, 1, "_CPPv4NK4cvc56Solver13defineFunsRecERKNSt6vectorI4TermEERKNSt6vectorINSt6vectorI4TermEEEERKNSt6vectorI4TermEEb", "cvc5::Solver::defineFunsRec::global"], [20, 2, 1, "_CPPv4NK4cvc56Solver13defineFunsRecERKNSt6vectorI4TermEERKNSt6vectorINSt6vectorI4TermEEEERKNSt6vectorI4TermEEb", "cvc5::Solver::defineFunsRec::terms"], [20, 1, 1, "_CPPv4NK4cvc56Solver9findSynthEN5modes15FindSynthTargetE", "cvc5::Solver::findSynth"], [20, 1, 1, "_CPPv4NK4cvc56Solver9findSynthEN5modes15FindSynthTargetER7Grammar", "cvc5::Solver::findSynth"], [20, 2, 1, "_CPPv4NK4cvc56Solver9findSynthEN5modes15FindSynthTargetE", "cvc5::Solver::findSynth::fst"], [20, 2, 1, "_CPPv4NK4cvc56Solver9findSynthEN5modes15FindSynthTargetER7Grammar", "cvc5::Solver::findSynth::fst"], [20, 2, 1, "_CPPv4NK4cvc56Solver9findSynthEN5modes15FindSynthTargetER7Grammar", "cvc5::Solver::findSynth::grammar"], [20, 1, 1, "_CPPv4NK4cvc56Solver13findSynthNextEv", "cvc5::Solver::findSynthNext"], [20, 1, 1, "_CPPv4NK4cvc56Solver9getAbductERK4Term", "cvc5::Solver::getAbduct"], [20, 1, 1, "_CPPv4NK4cvc56Solver9getAbductERK4TermR7Grammar", "cvc5::Solver::getAbduct"], [20, 2, 1, "_CPPv4NK4cvc56Solver9getAbductERK4Term", "cvc5::Solver::getAbduct::conj"], [20, 2, 1, "_CPPv4NK4cvc56Solver9getAbductERK4TermR7Grammar", "cvc5::Solver::getAbduct::conj"], [20, 2, 1, "_CPPv4NK4cvc56Solver9getAbductERK4TermR7Grammar", "cvc5::Solver::getAbduct::grammar"], [20, 1, 1, "_CPPv4NK4cvc56Solver13getAbductNextEv", "cvc5::Solver::getAbductNext"], [20, 1, 1, "_CPPv4NK4cvc56Solver13getAssertionsEv", "cvc5::Solver::getAssertions"], [20, 1, 1, "_CPPv4NK4cvc56Solver14getBooleanSortEv", "cvc5::Solver::getBooleanSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver13getDifficultyEv", "cvc5::Solver::getDifficulty"], [20, 1, 1, "_CPPv4NK4cvc56Solver16getDriverOptionsEv", "cvc5::Solver::getDriverOptions"], [20, 1, 1, "_CPPv4NK4cvc56Solver7getInfoERKNSt6stringE", "cvc5::Solver::getInfo"], [20, 2, 1, "_CPPv4NK4cvc56Solver7getInfoERKNSt6stringE", "cvc5::Solver::getInfo::flag"], [20, 1, 1, "_CPPv4NK4cvc56Solver17getInstantiationsEv", "cvc5::Solver::getInstantiations"], [20, 1, 1, "_CPPv4NK4cvc56Solver14getIntegerSortEv", "cvc5::Solver::getIntegerSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver14getInterpolantERK4Term", "cvc5::Solver::getInterpolant"], [20, 1, 1, "_CPPv4NK4cvc56Solver14getInterpolantERK4TermR7Grammar", "cvc5::Solver::getInterpolant"], [20, 2, 1, "_CPPv4NK4cvc56Solver14getInterpolantERK4Term", "cvc5::Solver::getInterpolant::conj"], [20, 2, 1, "_CPPv4NK4cvc56Solver14getInterpolantERK4TermR7Grammar", "cvc5::Solver::getInterpolant::conj"], [20, 2, 1, "_CPPv4NK4cvc56Solver14getInterpolantERK4TermR7Grammar", "cvc5::Solver::getInterpolant::grammar"], [20, 1, 1, "_CPPv4NK4cvc56Solver18getInterpolantNextEv", "cvc5::Solver::getInterpolantNext"], [20, 1, 1, "_CPPv4NK4cvc56Solver18getLearnedLiteralsEN5modes14LearnedLitTypeE", "cvc5::Solver::getLearnedLiterals"], [20, 2, 1, "_CPPv4NK4cvc56Solver18getLearnedLiteralsEN5modes14LearnedLitTypeE", "cvc5::Solver::getLearnedLiterals::t"], [20, 1, 1, "_CPPv4NK4cvc56Solver8getLogicEv", "cvc5::Solver::getLogic"], [20, 1, 1, "_CPPv4NK4cvc56Solver8getModelERKNSt6vectorI4SortEERKNSt6vectorI4TermEE", "cvc5::Solver::getModel"], [20, 2, 1, "_CPPv4NK4cvc56Solver8getModelERKNSt6vectorI4SortEERKNSt6vectorI4TermEE", "cvc5::Solver::getModel::consts"], [20, 2, 1, "_CPPv4NK4cvc56Solver8getModelERKNSt6vectorI4SortEERKNSt6vectorI4TermEE", "cvc5::Solver::getModel::sorts"], [20, 1, 1, "_CPPv4NK4cvc56Solver22getModelDomainElementsERK4Sort", "cvc5::Solver::getModelDomainElements"], [20, 2, 1, "_CPPv4NK4cvc56Solver22getModelDomainElementsERK4Sort", "cvc5::Solver::getModelDomainElements::s"], [20, 1, 1, "_CPPv4NK4cvc56Solver9getOptionERKNSt6stringE", "cvc5::Solver::getOption"], [20, 2, 1, "_CPPv4NK4cvc56Solver9getOptionERKNSt6stringE", "cvc5::Solver::getOption::option"], [20, 1, 1, "_CPPv4NK4cvc56Solver13getOptionInfoERKNSt6stringE", "cvc5::Solver::getOptionInfo"], [20, 2, 1, "_CPPv4NK4cvc56Solver13getOptionInfoERKNSt6stringE", "cvc5::Solver::getOptionInfo::option"], [20, 1, 1, "_CPPv4NK4cvc56Solver14getOptionNamesEv", "cvc5::Solver::getOptionNames"], [20, 1, 1, "_CPPv4NK4cvc56Solver9getOutputERKNSt6stringE", "cvc5::Solver::getOutput"], [20, 2, 1, "_CPPv4NK4cvc56Solver9getOutputERKNSt6stringE", "cvc5::Solver::getOutput::tag"], [20, 1, 1, "_CPPv4NK4cvc56Solver8getProofEN5modes14ProofComponentE", "cvc5::Solver::getProof"], [20, 2, 1, "_CPPv4NK4cvc56Solver8getProofEN5modes14ProofComponentE", "cvc5::Solver::getProof::c"], [20, 1, 1, "_CPPv4NK4cvc56Solver24getQuantifierEliminationERK4Term", "cvc5::Solver::getQuantifierElimination"], [20, 2, 1, "_CPPv4NK4cvc56Solver24getQuantifierEliminationERK4Term", "cvc5::Solver::getQuantifierElimination::q"], [20, 1, 1, "_CPPv4NK4cvc56Solver32getQuantifierEliminationDisjunctERK4Term", "cvc5::Solver::getQuantifierEliminationDisjunct"], [20, 2, 1, "_CPPv4NK4cvc56Solver32getQuantifierEliminationDisjunctERK4Term", "cvc5::Solver::getQuantifierEliminationDisjunct::q"], [20, 1, 1, "_CPPv4NK4cvc56Solver11getRealSortEv", "cvc5::Solver::getRealSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver13getRegExpSortEv", "cvc5::Solver::getRegExpSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver19getRoundingModeSortEv", "cvc5::Solver::getRoundingModeSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver13getStatisticsEv", "cvc5::Solver::getStatistics"], [20, 1, 1, "_CPPv4NK4cvc56Solver13getStringSortEv", "cvc5::Solver::getStringSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver19getSygusAssumptionsEv", "cvc5::Solver::getSygusAssumptions"], [20, 1, 1, "_CPPv4NK4cvc56Solver19getSygusConstraintsEv", "cvc5::Solver::getSygusConstraints"], [20, 1, 1, "_CPPv4NK4cvc56Solver16getSynthSolutionERK4Term", "cvc5::Solver::getSynthSolution"], [20, 2, 1, "_CPPv4NK4cvc56Solver16getSynthSolutionERK4Term", "cvc5::Solver::getSynthSolution::term"], [20, 1, 1, "_CPPv4NK4cvc56Solver17getSynthSolutionsERKNSt6vectorI4TermEE", "cvc5::Solver::getSynthSolutions"], [20, 2, 1, "_CPPv4NK4cvc56Solver17getSynthSolutionsERKNSt6vectorI4TermEE", "cvc5::Solver::getSynthSolutions::terms"], [20, 1, 1, "_CPPv4NK4cvc56Solver14getTimeoutCoreEv", "cvc5::Solver::getTimeoutCore"], [20, 1, 1, "_CPPv4NK4cvc56Solver22getTimeoutCoreAssumingERKNSt6vectorI4TermEE", "cvc5::Solver::getTimeoutCoreAssuming"], [20, 2, 1, "_CPPv4NK4cvc56Solver22getTimeoutCoreAssumingERKNSt6vectorI4TermEE", "cvc5::Solver::getTimeoutCoreAssuming::assumptions"], [20, 1, 1, "_CPPv4NK4cvc56Solver19getUnsatAssumptionsEv", "cvc5::Solver::getUnsatAssumptions"], [20, 1, 1, "_CPPv4NK4cvc56Solver12getUnsatCoreEv", "cvc5::Solver::getUnsatCore"], [20, 1, 1, "_CPPv4NK4cvc56Solver18getUnsatCoreLemmasEv", "cvc5::Solver::getUnsatCoreLemmas"], [20, 1, 1, "_CPPv4NK4cvc56Solver8getValueERK4Term", "cvc5::Solver::getValue"], [20, 1, 1, "_CPPv4NK4cvc56Solver8getValueERKNSt6vectorI4TermEE", "cvc5::Solver::getValue"], [20, 2, 1, "_CPPv4NK4cvc56Solver8getValueERK4Term", "cvc5::Solver::getValue::term"], [20, 2, 1, "_CPPv4NK4cvc56Solver8getValueERKNSt6vectorI4TermEE", "cvc5::Solver::getValue::terms"], [20, 1, 1, "_CPPv4NK4cvc56Solver15getValueSepHeapEv", "cvc5::Solver::getValueSepHeap"], [20, 1, 1, "_CPPv4NK4cvc56Solver14getValueSepNilEv", "cvc5::Solver::getValueSepNil"], [20, 1, 1, "_CPPv4NK4cvc56Solver10getVersionEv", "cvc5::Solver::getVersion"], [20, 1, 1, "_CPPv4NK4cvc56Solver10isLogicSetEv", "cvc5::Solver::isLogicSet"], [20, 1, 1, "_CPPv4NK4cvc56Solver17isModelCoreSymbolERK4Term", "cvc5::Solver::isModelCoreSymbol"], [20, 2, 1, "_CPPv4NK4cvc56Solver17isModelCoreSymbolERK4Term", "cvc5::Solver::isModelCoreSymbol::v"], [20, 1, 1, "_CPPv4NK4cvc56Solver10isOutputOnERKNSt6stringE", "cvc5::Solver::isOutputOn"], [20, 2, 1, "_CPPv4NK4cvc56Solver10isOutputOnERKNSt6stringE", "cvc5::Solver::isOutputOn::tag"], [20, 1, 1, "_CPPv4NK4cvc56Solver14mkAbstractSortE8SortKind", "cvc5::Solver::mkAbstractSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver14mkAbstractSortE8SortKind", "cvc5::Solver::mkAbstractSort::k"], [20, 1, 1, "_CPPv4NK4cvc56Solver11mkArraySortERK4SortRK4Sort", "cvc5::Solver::mkArraySort"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkArraySortERK4SortRK4Sort", "cvc5::Solver::mkArraySort::elemSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkArraySortERK4SortRK4Sort", "cvc5::Solver::mkArraySort::indexSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver9mkBagSortERK4Sort", "cvc5::Solver::mkBagSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver9mkBagSortERK4Sort", "cvc5::Solver::mkBagSort::elemSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_t8uint64_t", "cvc5::Solver::mkBitVector"], [20, 1, 1, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_tRKNSt6stringE8uint32_t", "cvc5::Solver::mkBitVector"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_tRKNSt6stringE8uint32_t", "cvc5::Solver::mkBitVector::base"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_tRKNSt6stringE8uint32_t", "cvc5::Solver::mkBitVector::s"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_t8uint64_t", "cvc5::Solver::mkBitVector::size"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_tRKNSt6stringE8uint32_t", "cvc5::Solver::mkBitVector::size"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_t8uint64_t", "cvc5::Solver::mkBitVector::val"], [20, 1, 1, "_CPPv4NK4cvc56Solver15mkBitVectorSortE8uint32_t", "cvc5::Solver::mkBitVectorSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkBitVectorSortE8uint32_t", "cvc5::Solver::mkBitVectorSort::size"], [20, 1, 1, "_CPPv4NK4cvc56Solver9mkBooleanEb", "cvc5::Solver::mkBoolean"], [20, 2, 1, "_CPPv4NK4cvc56Solver9mkBooleanEb", "cvc5::Solver::mkBoolean::val"], [20, 1, 1, "_CPPv4NK4cvc56Solver23mkCardinalityConstraintERK4Sort8uint32_t", "cvc5::Solver::mkCardinalityConstraint"], [20, 2, 1, "_CPPv4NK4cvc56Solver23mkCardinalityConstraintERK4Sort8uint32_t", "cvc5::Solver::mkCardinalityConstraint::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver23mkCardinalityConstraintERK4Sort8uint32_t", "cvc5::Solver::mkCardinalityConstraint::upperBound"], [20, 1, 1, "_CPPv4NK4cvc56Solver7mkConstERK4SortRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkConst"], [20, 2, 1, "_CPPv4NK4cvc56Solver7mkConstERK4SortRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkConst::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver7mkConstERK4SortRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkConst::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver12mkConstArrayERK4SortRK4Term", "cvc5::Solver::mkConstArray"], [20, 2, 1, "_CPPv4NK4cvc56Solver12mkConstArrayERK4SortRK4Term", "cvc5::Solver::mkConstArray::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver12mkConstArrayERK4SortRK4Term", "cvc5::Solver::mkConstArray::val"], [20, 1, 1, "_CPPv4N4cvc56Solver25mkDatatypeConstructorDeclERKNSt6stringE", "cvc5::Solver::mkDatatypeConstructorDecl"], [20, 2, 1, "_CPPv4N4cvc56Solver25mkDatatypeConstructorDeclERKNSt6stringE", "cvc5::Solver::mkDatatypeConstructorDecl::name"], [20, 1, 1, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringERKNSt6vectorI4SortEEb", "cvc5::Solver::mkDatatypeDecl"], [20, 1, 1, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringEb", "cvc5::Solver::mkDatatypeDecl"], [20, 2, 1, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringERKNSt6vectorI4SortEEb", "cvc5::Solver::mkDatatypeDecl::isCoDatatype"], [20, 2, 1, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringEb", "cvc5::Solver::mkDatatypeDecl::isCoDatatype"], [20, 2, 1, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringERKNSt6vectorI4SortEEb", "cvc5::Solver::mkDatatypeDecl::name"], [20, 2, 1, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringEb", "cvc5::Solver::mkDatatypeDecl::name"], [20, 2, 1, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringERKNSt6vectorI4SortEEb", "cvc5::Solver::mkDatatypeDecl::params"], [20, 1, 1, "_CPPv4NK4cvc56Solver14mkDatatypeSortERK12DatatypeDecl", "cvc5::Solver::mkDatatypeSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver14mkDatatypeSortERK12DatatypeDecl", "cvc5::Solver::mkDatatypeSort::dtypedecl"], [20, 1, 1, "_CPPv4NK4cvc56Solver15mkDatatypeSortsERKNSt6vectorI12DatatypeDeclEE", "cvc5::Solver::mkDatatypeSorts"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkDatatypeSortsERKNSt6vectorI12DatatypeDeclEE", "cvc5::Solver::mkDatatypeSorts::dtypedecls"], [20, 1, 1, "_CPPv4NK4cvc56Solver10mkEmptyBagERK4Sort", "cvc5::Solver::mkEmptyBag"], [20, 2, 1, "_CPPv4NK4cvc56Solver10mkEmptyBagERK4Sort", "cvc5::Solver::mkEmptyBag::sort"], [20, 1, 1, "_CPPv4NK4cvc56Solver15mkEmptySequenceERK4Sort", "cvc5::Solver::mkEmptySequence"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkEmptySequenceERK4Sort", "cvc5::Solver::mkEmptySequence::sort"], [20, 1, 1, "_CPPv4NK4cvc56Solver10mkEmptySetERK4Sort", "cvc5::Solver::mkEmptySet"], [20, 2, 1, "_CPPv4NK4cvc56Solver10mkEmptySetERK4Sort", "cvc5::Solver::mkEmptySet::sort"], [20, 1, 1, "_CPPv4NK4cvc56Solver7mkFalseEv", "cvc5::Solver::mkFalse"], [20, 1, 1, "_CPPv4NK4cvc56Solver17mkFiniteFieldElemERKNSt6stringERK4Sort8uint32_t", "cvc5::Solver::mkFiniteFieldElem"], [20, 2, 1, "_CPPv4NK4cvc56Solver17mkFiniteFieldElemERKNSt6stringERK4Sort8uint32_t", "cvc5::Solver::mkFiniteFieldElem::base"], [20, 2, 1, "_CPPv4NK4cvc56Solver17mkFiniteFieldElemERKNSt6stringERK4Sort8uint32_t", "cvc5::Solver::mkFiniteFieldElem::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver17mkFiniteFieldElemERKNSt6stringERK4Sort8uint32_t", "cvc5::Solver::mkFiniteFieldElem::value"], [20, 1, 1, "_CPPv4NK4cvc56Solver17mkFiniteFieldSortERKNSt6stringE8uint32_t", "cvc5::Solver::mkFiniteFieldSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver17mkFiniteFieldSortERKNSt6stringE8uint32_t", "cvc5::Solver::mkFiniteFieldSort::base"], [20, 2, 1, "_CPPv4NK4cvc56Solver17mkFiniteFieldSortERKNSt6stringE8uint32_t", "cvc5::Solver::mkFiniteFieldSort::size"], [20, 1, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointE8uint32_t8uint32_tRK4Term", "cvc5::Solver::mkFloatingPoint"], [20, 1, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointERK4TermRK4TermRK4Term", "cvc5::Solver::mkFloatingPoint"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointE8uint32_t8uint32_tRK4Term", "cvc5::Solver::mkFloatingPoint::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointERK4TermRK4TermRK4Term", "cvc5::Solver::mkFloatingPoint::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointE8uint32_t8uint32_tRK4Term", "cvc5::Solver::mkFloatingPoint::sig"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointERK4TermRK4TermRK4Term", "cvc5::Solver::mkFloatingPoint::sig"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointERK4TermRK4TermRK4Term", "cvc5::Solver::mkFloatingPoint::sign"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkFloatingPointE8uint32_t8uint32_tRK4Term", "cvc5::Solver::mkFloatingPoint::val"], [20, 1, 1, "_CPPv4NK4cvc56Solver18mkFloatingPointNaNE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNaN"], [20, 2, 1, "_CPPv4NK4cvc56Solver18mkFloatingPointNaNE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNaN::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver18mkFloatingPointNaNE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNaN::sig"], [20, 1, 1, "_CPPv4NK4cvc56Solver21mkFloatingPointNegInfE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNegInf"], [20, 2, 1, "_CPPv4NK4cvc56Solver21mkFloatingPointNegInfE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNegInf::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver21mkFloatingPointNegInfE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNegInf::sig"], [20, 1, 1, "_CPPv4NK4cvc56Solver22mkFloatingPointNegZeroE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNegZero"], [20, 2, 1, "_CPPv4NK4cvc56Solver22mkFloatingPointNegZeroE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNegZero::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver22mkFloatingPointNegZeroE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointNegZero::sig"], [20, 1, 1, "_CPPv4NK4cvc56Solver21mkFloatingPointPosInfE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointPosInf"], [20, 2, 1, "_CPPv4NK4cvc56Solver21mkFloatingPointPosInfE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointPosInf::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver21mkFloatingPointPosInfE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointPosInf::sig"], [20, 1, 1, "_CPPv4NK4cvc56Solver22mkFloatingPointPosZeroE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointPosZero"], [20, 2, 1, "_CPPv4NK4cvc56Solver22mkFloatingPointPosZeroE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointPosZero::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver22mkFloatingPointPosZeroE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointPosZero::sig"], [20, 1, 1, "_CPPv4NK4cvc56Solver19mkFloatingPointSortE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver19mkFloatingPointSortE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointSort::exp"], [20, 2, 1, "_CPPv4NK4cvc56Solver19mkFloatingPointSortE8uint32_t8uint32_t", "cvc5::Solver::mkFloatingPointSort::sig"], [20, 1, 1, "_CPPv4NK4cvc56Solver14mkFunctionSortERKNSt6vectorI4SortEERK4Sort", "cvc5::Solver::mkFunctionSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver14mkFunctionSortERKNSt6vectorI4SortEERK4Sort", "cvc5::Solver::mkFunctionSort::codomain"], [20, 2, 1, "_CPPv4NK4cvc56Solver14mkFunctionSortERKNSt6vectorI4SortEERK4Sort", "cvc5::Solver::mkFunctionSort::sorts"], [20, 1, 1, "_CPPv4NK4cvc56Solver9mkGrammarERKNSt6vectorI4TermEERKNSt6vectorI4TermEE", "cvc5::Solver::mkGrammar"], [20, 2, 1, "_CPPv4NK4cvc56Solver9mkGrammarERKNSt6vectorI4TermEERKNSt6vectorI4TermEE", "cvc5::Solver::mkGrammar::boundVars"], [20, 2, 1, "_CPPv4NK4cvc56Solver9mkGrammarERKNSt6vectorI4TermEERKNSt6vectorI4TermEE", "cvc5::Solver::mkGrammar::ntSymbols"], [20, 1, 1, "_CPPv4NK4cvc56Solver9mkIntegerE7int64_t", "cvc5::Solver::mkInteger"], [20, 1, 1, "_CPPv4NK4cvc56Solver9mkIntegerERKNSt6stringE", "cvc5::Solver::mkInteger"], [20, 2, 1, "_CPPv4NK4cvc56Solver9mkIntegerERKNSt6stringE", "cvc5::Solver::mkInteger::s"], [20, 2, 1, "_CPPv4NK4cvc56Solver9mkIntegerE7int64_t", "cvc5::Solver::mkInteger::val"], [20, 1, 1, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6stringE", "cvc5::Solver::mkOp"], [20, 1, 1, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6vectorI8uint32_tEE", "cvc5::Solver::mkOp"], [20, 2, 1, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6stringE", "cvc5::Solver::mkOp::arg"], [20, 2, 1, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6vectorI8uint32_tEE", "cvc5::Solver::mkOp::args"], [20, 2, 1, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6stringE", "cvc5::Solver::mkOp::kind"], [20, 2, 1, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6vectorI8uint32_tEE", "cvc5::Solver::mkOp::kind"], [20, 1, 1, "_CPPv4NK4cvc56Solver11mkParamSortERKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkParamSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkParamSortERKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkParamSort::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver4mkPiEv", "cvc5::Solver::mkPi"], [20, 1, 1, "_CPPv4NK4cvc56Solver15mkPredicateSortERKNSt6vectorI4SortEE", "cvc5::Solver::mkPredicateSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver15mkPredicateSortERKNSt6vectorI4SortEE", "cvc5::Solver::mkPredicateSort::sorts"], [20, 1, 1, "_CPPv4NK4cvc56Solver6mkRealE7int64_t", "cvc5::Solver::mkReal"], [20, 1, 1, "_CPPv4NK4cvc56Solver6mkRealE7int64_t7int64_t", "cvc5::Solver::mkReal"], [20, 1, 1, "_CPPv4NK4cvc56Solver6mkRealERKNSt6stringE", "cvc5::Solver::mkReal"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkRealE7int64_t7int64_t", "cvc5::Solver::mkReal::den"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkRealE7int64_t7int64_t", "cvc5::Solver::mkReal::num"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkRealERKNSt6stringE", "cvc5::Solver::mkReal::s"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkRealE7int64_t", "cvc5::Solver::mkReal::val"], [20, 1, 1, "_CPPv4NK4cvc56Solver12mkRecordSortERKNSt6vectorINSt4pairINSt6stringE4SortEEEE", "cvc5::Solver::mkRecordSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver12mkRecordSortERKNSt6vectorINSt4pairINSt6stringE4SortEEEE", "cvc5::Solver::mkRecordSort::fields"], [20, 1, 1, "_CPPv4NK4cvc56Solver11mkRegexpAllEv", "cvc5::Solver::mkRegexpAll"], [20, 1, 1, "_CPPv4NK4cvc56Solver15mkRegexpAllcharEv", "cvc5::Solver::mkRegexpAllchar"], [20, 1, 1, "_CPPv4NK4cvc56Solver12mkRegexpNoneEv", "cvc5::Solver::mkRegexpNone"], [20, 1, 1, "_CPPv4NK4cvc56Solver14mkRoundingModeE12RoundingMode", "cvc5::Solver::mkRoundingMode"], [20, 2, 1, "_CPPv4NK4cvc56Solver14mkRoundingModeE12RoundingMode", "cvc5::Solver::mkRoundingMode::rm"], [20, 1, 1, "_CPPv4NK4cvc56Solver8mkSepEmpEv", "cvc5::Solver::mkSepEmp"], [20, 1, 1, "_CPPv4NK4cvc56Solver8mkSepNilERK4Sort", "cvc5::Solver::mkSepNil"], [20, 2, 1, "_CPPv4NK4cvc56Solver8mkSepNilERK4Sort", "cvc5::Solver::mkSepNil::sort"], [20, 1, 1, "_CPPv4NK4cvc56Solver14mkSequenceSortERK4Sort", "cvc5::Solver::mkSequenceSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver14mkSequenceSortERK4Sort", "cvc5::Solver::mkSequenceSort::elemSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver9mkSetSortERK4Sort", "cvc5::Solver::mkSetSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver9mkSetSortERK4Sort", "cvc5::Solver::mkSetSort::elemSort"], [20, 1, 1, "_CPPv4NK4cvc56Solver8mkStringERKNSt6stringEb", "cvc5::Solver::mkString"], [20, 1, 1, "_CPPv4NK4cvc56Solver8mkStringERKNSt7wstringE", "cvc5::Solver::mkString"], [20, 2, 1, "_CPPv4NK4cvc56Solver8mkStringERKNSt6stringEb", "cvc5::Solver::mkString::s"], [20, 2, 1, "_CPPv4NK4cvc56Solver8mkStringERKNSt7wstringE", "cvc5::Solver::mkString::s"], [20, 2, 1, "_CPPv4NK4cvc56Solver8mkStringERKNSt6stringEb", "cvc5::Solver::mkString::useEscSequences"], [20, 1, 1, "_CPPv4NK4cvc56Solver6mkTermE4KindRKNSt6vectorI4TermEE", "cvc5::Solver::mkTerm"], [20, 1, 1, "_CPPv4NK4cvc56Solver6mkTermERK2OpRKNSt6vectorI4TermEE", "cvc5::Solver::mkTerm"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkTermE4KindRKNSt6vectorI4TermEE", "cvc5::Solver::mkTerm::children"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkTermERK2OpRKNSt6vectorI4TermEE", "cvc5::Solver::mkTerm::children"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkTermE4KindRKNSt6vectorI4TermEE", "cvc5::Solver::mkTerm::kind"], [20, 2, 1, "_CPPv4NK4cvc56Solver6mkTermERK2OpRKNSt6vectorI4TermEE", "cvc5::Solver::mkTerm::op"], [20, 1, 1, "_CPPv4NK4cvc56Solver6mkTrueEv", "cvc5::Solver::mkTrue"], [20, 1, 1, "_CPPv4NK4cvc56Solver7mkTupleERKNSt6vectorI4TermEE", "cvc5::Solver::mkTuple"], [20, 2, 1, "_CPPv4NK4cvc56Solver7mkTupleERKNSt6vectorI4TermEE", "cvc5::Solver::mkTuple::terms"], [20, 1, 1, "_CPPv4NK4cvc56Solver11mkTupleSortERKNSt6vectorI4SortEE", "cvc5::Solver::mkTupleSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver11mkTupleSortERKNSt6vectorI4SortEE", "cvc5::Solver::mkTupleSort::sorts"], [20, 1, 1, "_CPPv4NK4cvc56Solver19mkUninterpretedSortERKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkUninterpretedSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver19mkUninterpretedSortERKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkUninterpretedSort::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver34mkUninterpretedSortConstructorSortE6size_tRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkUninterpretedSortConstructorSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver34mkUninterpretedSortConstructorSortE6size_tRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkUninterpretedSortConstructorSort::arity"], [20, 2, 1, "_CPPv4NK4cvc56Solver34mkUninterpretedSortConstructorSortE6size_tRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkUninterpretedSortConstructorSort::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver13mkUniverseSetERK4Sort", "cvc5::Solver::mkUniverseSet"], [20, 2, 1, "_CPPv4NK4cvc56Solver13mkUniverseSetERK4Sort", "cvc5::Solver::mkUniverseSet::sort"], [20, 1, 1, "_CPPv4NK4cvc56Solver24mkUnresolvedDatatypeSortERKNSt6stringE6size_t", "cvc5::Solver::mkUnresolvedDatatypeSort"], [20, 2, 1, "_CPPv4NK4cvc56Solver24mkUnresolvedDatatypeSortERKNSt6stringE6size_t", "cvc5::Solver::mkUnresolvedDatatypeSort::arity"], [20, 2, 1, "_CPPv4NK4cvc56Solver24mkUnresolvedDatatypeSortERKNSt6stringE6size_t", "cvc5::Solver::mkUnresolvedDatatypeSort::symbol"], [20, 1, 1, "_CPPv4NK4cvc56Solver5mkVarERK4SortRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkVar"], [20, 2, 1, "_CPPv4NK4cvc56Solver5mkVarERK4SortRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkVar::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver5mkVarERK4SortRKNSt8optionalINSt6stringEEE", "cvc5::Solver::mkVar::symbol"], [20, 1, 1, "_CPPv4N4cvc56SolveraSERK6Solver", "cvc5::Solver::operator="], [20, 1, 1, "_CPPv4NK4cvc56Solver3popE8uint32_t", "cvc5::Solver::pop"], [20, 2, 1, "_CPPv4NK4cvc56Solver3popE8uint32_t", "cvc5::Solver::pop::nscopes"], [20, 1, 1, "_CPPv4NK4cvc56Solver19printStatisticsSafeEi", "cvc5::Solver::printStatisticsSafe"], [20, 2, 1, "_CPPv4NK4cvc56Solver19printStatisticsSafeEi", "cvc5::Solver::printStatisticsSafe::fd"], [20, 1, 1, "_CPPv4NK4cvc56Solver13proofToStringE5ProofN5modes11ProofFormatE", "cvc5::Solver::proofToString"], [20, 2, 1, "_CPPv4NK4cvc56Solver13proofToStringE5ProofN5modes11ProofFormatE", "cvc5::Solver::proofToString::format"], [20, 2, 1, "_CPPv4NK4cvc56Solver13proofToStringE5ProofN5modes11ProofFormatE", "cvc5::Solver::proofToString::proof"], [20, 1, 1, "_CPPv4NK4cvc56Solver4pushE8uint32_t", "cvc5::Solver::push"], [20, 2, 1, "_CPPv4NK4cvc56Solver4pushE8uint32_t", "cvc5::Solver::push::nscopes"], [20, 1, 1, "_CPPv4NK4cvc56Solver15resetAssertionsEv", "cvc5::Solver::resetAssertions"], [20, 1, 1, "_CPPv4NK4cvc56Solver7setInfoERKNSt6stringERKNSt6stringE", "cvc5::Solver::setInfo"], [20, 2, 1, "_CPPv4NK4cvc56Solver7setInfoERKNSt6stringERKNSt6stringE", "cvc5::Solver::setInfo::keyword"], [20, 2, 1, "_CPPv4NK4cvc56Solver7setInfoERKNSt6stringERKNSt6stringE", "cvc5::Solver::setInfo::value"], [20, 1, 1, "_CPPv4NK4cvc56Solver8setLogicERKNSt6stringE", "cvc5::Solver::setLogic"], [20, 2, 1, "_CPPv4NK4cvc56Solver8setLogicERKNSt6stringE", "cvc5::Solver::setLogic::logic"], [20, 1, 1, "_CPPv4NK4cvc56Solver9setOptionERKNSt6stringERKNSt6stringE", "cvc5::Solver::setOption"], [20, 2, 1, "_CPPv4NK4cvc56Solver9setOptionERKNSt6stringERKNSt6stringE", "cvc5::Solver::setOption::option"], [20, 2, 1, "_CPPv4NK4cvc56Solver9setOptionERKNSt6stringERKNSt6stringE", "cvc5::Solver::setOption::value"], [20, 1, 1, "_CPPv4N4cvc56Solver8simplifyERK4Term", "cvc5::Solver::simplify"], [20, 2, 1, "_CPPv4N4cvc56Solver8simplifyERK4Term", "cvc5::Solver::simplify::t"], [20, 1, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEE4SortR7Grammar", "cvc5::Solver::synthFun"], [20, 1, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEERK4Sort", "cvc5::Solver::synthFun"], [20, 2, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEE4SortR7Grammar", "cvc5::Solver::synthFun::boundVars"], [20, 2, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEERK4Sort", "cvc5::Solver::synthFun::boundVars"], [20, 2, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEE4SortR7Grammar", "cvc5::Solver::synthFun::grammar"], [20, 2, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEE4SortR7Grammar", "cvc5::Solver::synthFun::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEERK4Sort", "cvc5::Solver::synthFun::sort"], [20, 2, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEE4SortR7Grammar", "cvc5::Solver::synthFun::symbol"], [20, 2, 1, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEERK4Sort", "cvc5::Solver::synthFun::symbol"], [20, 1, 1, "_CPPv4N4cvc56SolverD0Ev", "cvc5::Solver::~Solver"], [21, 0, 1, "_CPPv4N4cvc54SortE", "cvc5::Sort"], [21, 1, 1, "_CPPv4N4cvc54Sort4SortEv", "cvc5::Sort::Sort"], [21, 1, 1, "_CPPv4NK4cvc54Sort17getAbstractedKindEv", "cvc5::Sort::getAbstractedKind"], [21, 1, 1, "_CPPv4NK4cvc54Sort19getArrayElementSortEv", "cvc5::Sort::getArrayElementSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort17getArrayIndexSortEv", "cvc5::Sort::getArrayIndexSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort17getBagElementSortEv", "cvc5::Sort::getBagElementSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort16getBitVectorSizeEv", "cvc5::Sort::getBitVectorSize"], [21, 1, 1, "_CPPv4NK4cvc54Sort11getDatatypeEv", "cvc5::Sort::getDatatype"], [21, 1, 1, "_CPPv4NK4cvc54Sort16getDatatypeArityEv", "cvc5::Sort::getDatatypeArity"], [21, 1, 1, "_CPPv4NK4cvc54Sort27getDatatypeConstructorArityEv", "cvc5::Sort::getDatatypeConstructorArity"], [21, 1, 1, "_CPPv4NK4cvc54Sort34getDatatypeConstructorCodomainSortEv", "cvc5::Sort::getDatatypeConstructorCodomainSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort33getDatatypeConstructorDomainSortsEv", "cvc5::Sort::getDatatypeConstructorDomainSorts"], [21, 1, 1, "_CPPv4NK4cvc54Sort31getDatatypeSelectorCodomainSortEv", "cvc5::Sort::getDatatypeSelectorCodomainSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort29getDatatypeSelectorDomainSortEv", "cvc5::Sort::getDatatypeSelectorDomainSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort29getDatatypeTesterCodomainSortEv", "cvc5::Sort::getDatatypeTesterCodomainSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort27getDatatypeTesterDomainSortEv", "cvc5::Sort::getDatatypeTesterDomainSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort18getFiniteFieldSizeEv", "cvc5::Sort::getFiniteFieldSize"], [21, 1, 1, "_CPPv4NK4cvc54Sort28getFloatingPointExponentSizeEv", "cvc5::Sort::getFloatingPointExponentSize"], [21, 1, 1, "_CPPv4NK4cvc54Sort31getFloatingPointSignificandSizeEv", "cvc5::Sort::getFloatingPointSignificandSize"], [21, 1, 1, "_CPPv4NK4cvc54Sort16getFunctionArityEv", "cvc5::Sort::getFunctionArity"], [21, 1, 1, "_CPPv4NK4cvc54Sort23getFunctionCodomainSortEv", "cvc5::Sort::getFunctionCodomainSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort22getFunctionDomainSortsEv", "cvc5::Sort::getFunctionDomainSorts"], [21, 1, 1, "_CPPv4NK4cvc54Sort25getInstantiatedParametersEv", "cvc5::Sort::getInstantiatedParameters"], [21, 1, 1, "_CPPv4NK4cvc54Sort7getKindEv", "cvc5::Sort::getKind"], [21, 1, 1, "_CPPv4NK4cvc54Sort22getSequenceElementSortEv", "cvc5::Sort::getSequenceElementSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort17getSetElementSortEv", "cvc5::Sort::getSetElementSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort9getSymbolEv", "cvc5::Sort::getSymbol"], [21, 1, 1, "_CPPv4NK4cvc54Sort14getTupleLengthEv", "cvc5::Sort::getTupleLength"], [21, 1, 1, "_CPPv4NK4cvc54Sort13getTupleSortsEv", "cvc5::Sort::getTupleSorts"], [21, 1, 1, "_CPPv4NK4cvc54Sort31getUninterpretedSortConstructorEv", "cvc5::Sort::getUninterpretedSortConstructor"], [21, 1, 1, "_CPPv4NK4cvc54Sort36getUninterpretedSortConstructorArityEv", "cvc5::Sort::getUninterpretedSortConstructorArity"], [21, 1, 1, "_CPPv4NK4cvc54Sort9hasSymbolEv", "cvc5::Sort::hasSymbol"], [21, 1, 1, "_CPPv4NK4cvc54Sort11instantiateERKNSt6vectorI4SortEE", "cvc5::Sort::instantiate"], [21, 2, 1, "_CPPv4NK4cvc54Sort11instantiateERKNSt6vectorI4SortEE", "cvc5::Sort::instantiate::params"], [21, 1, 1, "_CPPv4NK4cvc54Sort10isAbstractEv", "cvc5::Sort::isAbstract"], [21, 1, 1, "_CPPv4NK4cvc54Sort7isArrayEv", "cvc5::Sort::isArray"], [21, 1, 1, "_CPPv4NK4cvc54Sort5isBagEv", "cvc5::Sort::isBag"], [21, 1, 1, "_CPPv4NK4cvc54Sort11isBitVectorEv", "cvc5::Sort::isBitVector"], [21, 1, 1, "_CPPv4NK4cvc54Sort9isBooleanEv", "cvc5::Sort::isBoolean"], [21, 1, 1, "_CPPv4NK4cvc54Sort10isDatatypeEv", "cvc5::Sort::isDatatype"], [21, 1, 1, "_CPPv4NK4cvc54Sort21isDatatypeConstructorEv", "cvc5::Sort::isDatatypeConstructor"], [21, 1, 1, "_CPPv4NK4cvc54Sort18isDatatypeSelectorEv", "cvc5::Sort::isDatatypeSelector"], [21, 1, 1, "_CPPv4NK4cvc54Sort16isDatatypeTesterEv", "cvc5::Sort::isDatatypeTester"], [21, 1, 1, "_CPPv4NK4cvc54Sort17isDatatypeUpdaterEv", "cvc5::Sort::isDatatypeUpdater"], [21, 1, 1, "_CPPv4NK4cvc54Sort13isFiniteFieldEv", "cvc5::Sort::isFiniteField"], [21, 1, 1, "_CPPv4NK4cvc54Sort15isFloatingPointEv", "cvc5::Sort::isFloatingPoint"], [21, 1, 1, "_CPPv4NK4cvc54Sort10isFunctionEv", "cvc5::Sort::isFunction"], [21, 1, 1, "_CPPv4NK4cvc54Sort14isInstantiatedEv", "cvc5::Sort::isInstantiated"], [21, 1, 1, "_CPPv4NK4cvc54Sort9isIntegerEv", "cvc5::Sort::isInteger"], [21, 1, 1, "_CPPv4NK4cvc54Sort6isNullEv", "cvc5::Sort::isNull"], [21, 1, 1, "_CPPv4NK4cvc54Sort11isPredicateEv", "cvc5::Sort::isPredicate"], [21, 1, 1, "_CPPv4NK4cvc54Sort6isRealEv", "cvc5::Sort::isReal"], [21, 1, 1, "_CPPv4NK4cvc54Sort8isRecordEv", "cvc5::Sort::isRecord"], [21, 1, 1, "_CPPv4NK4cvc54Sort8isRegExpEv", "cvc5::Sort::isRegExp"], [21, 1, 1, "_CPPv4NK4cvc54Sort14isRoundingModeEv", "cvc5::Sort::isRoundingMode"], [21, 1, 1, "_CPPv4NK4cvc54Sort10isSequenceEv", "cvc5::Sort::isSequence"], [21, 1, 1, "_CPPv4NK4cvc54Sort5isSetEv", "cvc5::Sort::isSet"], [21, 1, 1, "_CPPv4NK4cvc54Sort8isStringEv", "cvc5::Sort::isString"], [21, 1, 1, "_CPPv4NK4cvc54Sort7isTupleEv", "cvc5::Sort::isTuple"], [21, 1, 1, "_CPPv4NK4cvc54Sort19isUninterpretedSortEv", "cvc5::Sort::isUninterpretedSort"], [21, 1, 1, "_CPPv4NK4cvc54Sort30isUninterpretedSortConstructorEv", "cvc5::Sort::isUninterpretedSortConstructor"], [21, 1, 1, "_CPPv4NK4cvc54SortneERK4Sort", "cvc5::Sort::operator!="], [21, 2, 1, "_CPPv4NK4cvc54SortneERK4Sort", "cvc5::Sort::operator!=::s"], [21, 1, 1, "_CPPv4NK4cvc54SortltERK4Sort", "cvc5::Sort::operator&lt;"], [21, 2, 1, "_CPPv4NK4cvc54SortltERK4Sort", "cvc5::Sort::operator&lt;::s"], [21, 1, 1, "_CPPv4NK4cvc54SortleERK4Sort", "cvc5::Sort::operator&lt;="], [21, 2, 1, "_CPPv4NK4cvc54SortleERK4Sort", "cvc5::Sort::operator&lt;=::s"], [21, 1, 1, "_CPPv4NK4cvc54SorteqERK4Sort", "cvc5::Sort::operator=="], [21, 2, 1, "_CPPv4NK4cvc54SorteqERK4Sort", "cvc5::Sort::operator==::s"], [21, 1, 1, "_CPPv4NK4cvc54SortgtERK4Sort", "cvc5::Sort::operator&gt;"], [21, 2, 1, "_CPPv4NK4cvc54SortgtERK4Sort", "cvc5::Sort::operator&gt;::s"], [21, 1, 1, "_CPPv4NK4cvc54SortgeERK4Sort", "cvc5::Sort::operator&gt;="], [21, 2, 1, "_CPPv4NK4cvc54SortgeERK4Sort", "cvc5::Sort::operator&gt;=::s"], [21, 1, 1, "_CPPv4NK4cvc54Sort10substituteERK4SortRK4Sort", "cvc5::Sort::substitute"], [21, 1, 1, "_CPPv4NK4cvc54Sort10substituteERKNSt6vectorI4SortEERKNSt6vectorI4SortEE", "cvc5::Sort::substitute"], [21, 2, 1, "_CPPv4NK4cvc54Sort10substituteERK4SortRK4Sort", "cvc5::Sort::substitute::replacement"], [21, 2, 1, "_CPPv4NK4cvc54Sort10substituteERKNSt6vectorI4SortEERKNSt6vectorI4SortEE", "cvc5::Sort::substitute::replacements"], [21, 2, 1, "_CPPv4NK4cvc54Sort10substituteERK4SortRK4Sort", "cvc5::Sort::substitute::sort"], [21, 2, 1, "_CPPv4NK4cvc54Sort10substituteERKNSt6vectorI4SortEERKNSt6vectorI4SortEE", "cvc5::Sort::substitute::sorts"], [21, 1, 1, "_CPPv4NK4cvc54Sort8toStreamERNSt7ostreamE", "cvc5::Sort::toStream"], [21, 2, 1, "_CPPv4NK4cvc54Sort8toStreamERNSt7ostreamE", "cvc5::Sort::toStream::out"], [21, 1, 1, "_CPPv4NK4cvc54Sort8toStringEv", "cvc5::Sort::toString"], [21, 1, 1, "_CPPv4N4cvc54SortD0Ev", "cvc5::Sort::~Sort"], [22, 4, 1, "_CPPv4N4cvc58SortKindE", "cvc5::SortKind"], [22, 5, 1, "_CPPv4N4cvc58SortKind13ABSTRACT_SORTE", "cvc5::SortKind::ABSTRACT_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind10ARRAY_SORTE", "cvc5::SortKind::ARRAY_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind8BAG_SORTE", "cvc5::SortKind::BAG_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind14BITVECTOR_SORTE", "cvc5::SortKind::BITVECTOR_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind12BOOLEAN_SORTE", "cvc5::SortKind::BOOLEAN_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind13DATATYPE_SORTE", "cvc5::SortKind::DATATYPE_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind17FINITE_FIELD_SORTE", "cvc5::SortKind::FINITE_FIELD_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind18FLOATINGPOINT_SORTE", "cvc5::SortKind::FLOATINGPOINT_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind13FUNCTION_SORTE", "cvc5::SortKind::FUNCTION_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind12INTEGER_SORTE", "cvc5::SortKind::INTEGER_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind18INTERNAL_SORT_KINDE", "cvc5::SortKind::INTERNAL_SORT_KIND"], [22, 5, 1, "_CPPv4N4cvc58SortKind14LAST_SORT_KINDE", "cvc5::SortKind::LAST_SORT_KIND"], [22, 5, 1, "_CPPv4N4cvc58SortKind9NULL_SORTE", "cvc5::SortKind::NULL_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind9REAL_SORTE", "cvc5::SortKind::REAL_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind11REGLAN_SORTE", "cvc5::SortKind::REGLAN_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind17ROUNDINGMODE_SORTE", "cvc5::SortKind::ROUNDINGMODE_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind13SEQUENCE_SORTE", "cvc5::SortKind::SEQUENCE_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind8SET_SORTE", "cvc5::SortKind::SET_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind11STRING_SORTE", "cvc5::SortKind::STRING_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind10TUPLE_SORTE", "cvc5::SortKind::TUPLE_SORT"], [22, 5, 1, "_CPPv4N4cvc58SortKind19UNDEFINED_SORT_KINDE", "cvc5::SortKind::UNDEFINED_SORT_KIND"], [22, 5, 1, "_CPPv4N4cvc58SortKind18UNINTERPRETED_SORTE", "cvc5::SortKind::UNINTERPRETED_SORT"], [23, 0, 1, "_CPPv4N4cvc54StatE", "cvc5::Stat"], [23, 3, 1, "_CPPv4N4cvc54Stat13HistogramDataE", "cvc5::Stat::HistogramData"], [23, 1, 1, "_CPPv4N4cvc54Stat4StatERK4Stat", "cvc5::Stat::Stat"], [23, 1, 1, "_CPPv4N4cvc54Stat4StatEv", "cvc5::Stat::Stat"], [23, 2, 1, "_CPPv4N4cvc54Stat4StatERK4Stat", "cvc5::Stat::Stat::s"], [23, 1, 1, "_CPPv4NK4cvc54Stat9getDoubleEv", "cvc5::Stat::getDouble"], [23, 1, 1, "_CPPv4NK4cvc54Stat12getHistogramEv", "cvc5::Stat::getHistogram"], [23, 1, 1, "_CPPv4NK4cvc54Stat6getIntEv", "cvc5::Stat::getInt"], [23, 1, 1, "_CPPv4NK4cvc54Stat9getStringEv", "cvc5::Stat::getString"], [23, 1, 1, "_CPPv4NK4cvc54Stat9isDefaultEv", "cvc5::Stat::isDefault"], [23, 1, 1, "_CPPv4NK4cvc54Stat8isDoubleEv", "cvc5::Stat::isDouble"], [23, 1, 1, "_CPPv4NK4cvc54Stat11isHistogramEv", "cvc5::Stat::isHistogram"], [23, 1, 1, "_CPPv4NK4cvc54Stat5isIntEv", "cvc5::Stat::isInt"], [23, 1, 1, "_CPPv4NK4cvc54Stat10isInternalEv", "cvc5::Stat::isInternal"], [23, 1, 1, "_CPPv4NK4cvc54Stat8isStringEv", "cvc5::Stat::isString"], [23, 1, 1, "_CPPv4N4cvc54StatlsERNSt7ostreamERK4Stat", "cvc5::Stat::operator&lt;&lt;"], [23, 2, 1, "_CPPv4N4cvc54StatlsERNSt7ostreamERK4Stat", "cvc5::Stat::operator&lt;&lt;::os"], [23, 2, 1, "_CPPv4N4cvc54StatlsERNSt7ostreamERK4Stat", "cvc5::Stat::operator&lt;&lt;::sv"], [23, 1, 1, "_CPPv4N4cvc54StataSERK4Stat", "cvc5::Stat::operator="], [23, 2, 1, "_CPPv4N4cvc54StataSERK4Stat", "cvc5::Stat::operator=::s"], [23, 1, 1, "_CPPv4N4cvc54StatD0Ev", "cvc5::Stat::~Stat"], [23, 0, 1, "_CPPv4N4cvc510StatisticsE", "cvc5::Statistics"], [23, 1, 1, "_CPPv4NK4cvc510Statistics5beginEbb", "cvc5::Statistics::begin"], [23, 2, 1, "_CPPv4NK4cvc510Statistics5beginEbb", "cvc5::Statistics::begin::defaulted"], [23, 2, 1, "_CPPv4NK4cvc510Statistics5beginEbb", "cvc5::Statistics::begin::internal"], [23, 1, 1, "_CPPv4NK4cvc510Statistics3endEv", "cvc5::Statistics::end"], [23, 1, 1, "_CPPv4N4cvc510Statistics3getERKNSt6stringE", "cvc5::Statistics::get"], [23, 2, 1, "_CPPv4N4cvc510Statistics3getERKNSt6stringE", "cvc5::Statistics::get::name"], [25, 0, 1, "_CPPv4N4cvc511SynthResultE", "cvc5::SynthResult"], [25, 1, 1, "_CPPv4N4cvc511SynthResult11SynthResultEv", "cvc5::SynthResult::SynthResult"], [25, 1, 1, "_CPPv4NK4cvc511SynthResult13hasNoSolutionEv", "cvc5::SynthResult::hasNoSolution"], [25, 1, 1, "_CPPv4NK4cvc511SynthResult11hasSolutionEv", "cvc5::SynthResult::hasSolution"], [25, 1, 1, "_CPPv4NK4cvc511SynthResult6isNullEv", "cvc5::SynthResult::isNull"], [25, 1, 1, "_CPPv4NK4cvc511SynthResult9isUnknownEv", "cvc5::SynthResult::isUnknown"], [25, 1, 1, "_CPPv4NK4cvc511SynthResult8toStringEv", "cvc5::SynthResult::toString"], [26, 0, 1, "_CPPv4N4cvc54TermE", "cvc5::Term"], [26, 1, 1, "_CPPv4N4cvc54Term4TermEv", "cvc5::Term::Term"], [26, 1, 1, "_CPPv4NK4cvc54Term7andTermERK4Term", "cvc5::Term::andTerm"], [26, 2, 1, "_CPPv4NK4cvc54Term7andTermERK4Term", "cvc5::Term::andTerm::t"], [26, 1, 1, "_CPPv4NK4cvc54Term5beginEv", "cvc5::Term::begin"], [26, 0, 1, "_CPPv4N4cvc54Term14const_iteratorE", "cvc5::Term::const_iterator"], [26, 1, 1, "_CPPv4N4cvc54Term14const_iterator14const_iteratorEPN8internal11NodeManagerERKNSt10shared_ptrIN8internal4NodeEEE8uint32_t", "cvc5::Term::const_iterator::const_iterator"], [26, 1, 1, "_CPPv4N4cvc54Term14const_iterator14const_iteratorERK14const_iterator", "cvc5::Term::const_iterator::const_iterator"], [26, 1, 1, "_CPPv4N4cvc54Term14const_iterator14const_iteratorEv", "cvc5::Term::const_iterator::const_iterator"], [26, 2, 1, "_CPPv4N4cvc54Term14const_iterator14const_iteratorEPN8internal11NodeManagerERKNSt10shared_ptrIN8internal4NodeEEE8uint32_t", "cvc5::Term::const_iterator::const_iterator::e"], [26, 2, 1, "_CPPv4N4cvc54Term14const_iterator14const_iteratorERK14const_iterator", "cvc5::Term::const_iterator::const_iterator::it"], [26, 2, 1, "_CPPv4N4cvc54Term14const_iterator14const_iteratorEPN8internal11NodeManagerERKNSt10shared_ptrIN8internal4NodeEEE8uint32_t", "cvc5::Term::const_iterator::const_iterator::nm"], [26, 2, 1, "_CPPv4N4cvc54Term14const_iterator14const_iteratorEPN8internal11NodeManagerERKNSt10shared_ptrIN8internal4NodeEEE8uint32_t", "cvc5::Term::const_iterator::const_iterator::p"], [26, 3, 1, "_CPPv4N4cvc54Term14const_iterator15difference_typeE", "cvc5::Term::const_iterator::difference_type"], [26, 3, 1, "_CPPv4N4cvc54Term14const_iterator17iterator_categoryE", "cvc5::Term::const_iterator::iterator_category"], [26, 1, 1, "_CPPv4NK4cvc54Term14const_iteratorneERK14const_iterator", "cvc5::Term::const_iterator::operator!="], [26, 2, 1, "_CPPv4NK4cvc54Term14const_iteratorneERK14const_iterator", "cvc5::Term::const_iterator::operator!=::it"], [26, 1, 1, "_CPPv4NK4cvc54Term14const_iteratormlEv", "cvc5::Term::const_iterator::operator*"], [26, 1, 1, "_CPPv4N4cvc54Term14const_iteratorppEi", "cvc5::Term::const_iterator::operator++"], [26, 1, 1, "_CPPv4N4cvc54Term14const_iteratorppEv", "cvc5::Term::const_iterator::operator++"], [26, 1, 1, "_CPPv4N4cvc54Term14const_iteratoraSERK14const_iterator", "cvc5::Term::const_iterator::operator="], [26, 2, 1, "_CPPv4N4cvc54Term14const_iteratoraSERK14const_iterator", "cvc5::Term::const_iterator::operator=::it"], [26, 1, 1, "_CPPv4NK4cvc54Term14const_iteratoreqERK14const_iterator", "cvc5::Term::const_iterator::operator=="], [26, 2, 1, "_CPPv4NK4cvc54Term14const_iteratoreqERK14const_iterator", "cvc5::Term::const_iterator::operator==::it"], [26, 3, 1, "_CPPv4N4cvc54Term14const_iterator7pointerE", "cvc5::Term::const_iterator::pointer"], [26, 3, 1, "_CPPv4N4cvc54Term14const_iterator9referenceE", "cvc5::Term::const_iterator::reference"], [26, 3, 1, "_CPPv4N4cvc54Term14const_iterator10value_typeE", "cvc5::Term::const_iterator::value_type"], [26, 1, 1, "_CPPv4NK4cvc54Term3endEv", "cvc5::Term::end"], [26, 1, 1, "_CPPv4NK4cvc54Term6eqTermERK4Term", "cvc5::Term::eqTerm"], [26, 2, 1, "_CPPv4NK4cvc54Term6eqTermERK4Term", "cvc5::Term::eqTerm::t"], [26, 1, 1, "_CPPv4NK4cvc54Term17getBitVectorValueE8uint32_t", "cvc5::Term::getBitVectorValue"], [26, 2, 1, "_CPPv4NK4cvc54Term17getBitVectorValueE8uint32_t", "cvc5::Term::getBitVectorValue::base"], [26, 1, 1, "_CPPv4NK4cvc54Term15getBooleanValueEv", "cvc5::Term::getBooleanValue"], [26, 1, 1, "_CPPv4NK4cvc54Term24getCardinalityConstraintEv", "cvc5::Term::getCardinalityConstraint"], [26, 1, 1, "_CPPv4NK4cvc54Term17getConstArrayBaseEv", "cvc5::Term::getConstArrayBase"], [26, 1, 1, "_CPPv4NK4cvc54Term19getFiniteFieldValueEv", "cvc5::Term::getFiniteFieldValue"], [26, 1, 1, "_CPPv4NK4cvc54Term21getFloatingPointValueEv", "cvc5::Term::getFloatingPointValue"], [26, 1, 1, "_CPPv4NK4cvc54Term5getIdEv", "cvc5::Term::getId"], [26, 1, 1, "_CPPv4NK4cvc54Term13getInt32ValueEv", "cvc5::Term::getInt32Value"], [26, 1, 1, "_CPPv4NK4cvc54Term13getInt64ValueEv", "cvc5::Term::getInt64Value"], [26, 1, 1, "_CPPv4NK4cvc54Term15getIntegerValueEv", "cvc5::Term::getIntegerValue"], [26, 1, 1, "_CPPv4NK4cvc54Term7getKindEv", "cvc5::Term::getKind"], [26, 1, 1, "_CPPv4NK4cvc54Term14getNumChildrenEv", "cvc5::Term::getNumChildren"], [26, 1, 1, "_CPPv4NK4cvc54Term5getOpEv", "cvc5::Term::getOp"], [26, 1, 1, "_CPPv4NK4cvc54Term14getReal32ValueEv", "cvc5::Term::getReal32Value"], [26, 1, 1, "_CPPv4NK4cvc54Term14getReal64ValueEv", "cvc5::Term::getReal64Value"], [26, 1, 1, "_CPPv4NK4cvc54Term40getRealAlgebraicNumberDefiningPolynomialERK4Term", "cvc5::Term::getRealAlgebraicNumberDefiningPolynomial"], [26, 2, 1, "_CPPv4NK4cvc54Term40getRealAlgebraicNumberDefiningPolynomialERK4Term", "cvc5::Term::getRealAlgebraicNumberDefiningPolynomial::v"], [26, 1, 1, "_CPPv4NK4cvc54Term32getRealAlgebraicNumberLowerBoundEv", "cvc5::Term::getRealAlgebraicNumberLowerBound"], [26, 1, 1, "_CPPv4NK4cvc54Term32getRealAlgebraicNumberUpperBoundEv", "cvc5::Term::getRealAlgebraicNumberUpperBound"], [26, 1, 1, "_CPPv4NK4cvc54Term25getRealOrIntegerValueSignEv", "cvc5::Term::getRealOrIntegerValueSign"], [26, 1, 1, "_CPPv4NK4cvc54Term12getRealValueEv", "cvc5::Term::getRealValue"], [26, 1, 1, "_CPPv4NK4cvc54Term20getRoundingModeValueEv", "cvc5::Term::getRoundingModeValue"], [26, 1, 1, "_CPPv4NK4cvc54Term16getSequenceValueEv", "cvc5::Term::getSequenceValue"], [26, 1, 1, "_CPPv4NK4cvc54Term11getSetValueEv", "cvc5::Term::getSetValue"], [26, 1, 1, "_CPPv4NK4cvc54Term7getSortEv", "cvc5::Term::getSort"], [26, 1, 1, "_CPPv4NK4cvc54Term14getStringValueEv", "cvc5::Term::getStringValue"], [26, 1, 1, "_CPPv4NK4cvc54Term9getSymbolEv", "cvc5::Term::getSymbol"], [26, 1, 1, "_CPPv4NK4cvc54Term13getTupleValueEv", "cvc5::Term::getTupleValue"], [26, 1, 1, "_CPPv4NK4cvc54Term14getUInt32ValueEv", "cvc5::Term::getUInt32Value"], [26, 1, 1, "_CPPv4NK4cvc54Term14getUInt64ValueEv", "cvc5::Term::getUInt64Value"], [26, 1, 1, "_CPPv4NK4cvc54Term25getUninterpretedSortValueEv", "cvc5::Term::getUninterpretedSortValue"], [26, 1, 1, "_CPPv4NK4cvc54Term5hasOpEv", "cvc5::Term::hasOp"], [26, 1, 1, "_CPPv4NK4cvc54Term9hasSymbolEv", "cvc5::Term::hasSymbol"], [26, 1, 1, "_CPPv4NK4cvc54Term7impTermERK4Term", "cvc5::Term::impTerm"], [26, 2, 1, "_CPPv4NK4cvc54Term7impTermERK4Term", "cvc5::Term::impTerm::t"], [26, 1, 1, "_CPPv4NK4cvc54Term16isBitVectorValueEv", "cvc5::Term::isBitVectorValue"], [26, 1, 1, "_CPPv4NK4cvc54Term14isBooleanValueEv", "cvc5::Term::isBooleanValue"], [26, 1, 1, "_CPPv4NK4cvc54Term23isCardinalityConstraintEv", "cvc5::Term::isCardinalityConstraint"], [26, 1, 1, "_CPPv4NK4cvc54Term12isConstArrayEv", "cvc5::Term::isConstArray"], [26, 1, 1, "_CPPv4NK4cvc54Term18isFiniteFieldValueEv", "cvc5::Term::isFiniteFieldValue"], [26, 1, 1, "_CPPv4NK4cvc54Term18isFloatingPointNaNEv", "cvc5::Term::isFloatingPointNaN"], [26, 1, 1, "_CPPv4NK4cvc54Term21isFloatingPointNegInfEv", "cvc5::Term::isFloatingPointNegInf"], [26, 1, 1, "_CPPv4NK4cvc54Term22isFloatingPointNegZeroEv", "cvc5::Term::isFloatingPointNegZero"], [26, 1, 1, "_CPPv4NK4cvc54Term21isFloatingPointPosInfEv", "cvc5::Term::isFloatingPointPosInf"], [26, 1, 1, "_CPPv4NK4cvc54Term22isFloatingPointPosZeroEv", "cvc5::Term::isFloatingPointPosZero"], [26, 1, 1, "_CPPv4NK4cvc54Term20isFloatingPointValueEv", "cvc5::Term::isFloatingPointValue"], [26, 1, 1, "_CPPv4NK4cvc54Term12isInt32ValueEv", "cvc5::Term::isInt32Value"], [26, 1, 1, "_CPPv4NK4cvc54Term12isInt64ValueEv", "cvc5::Term::isInt64Value"], [26, 1, 1, "_CPPv4NK4cvc54Term14isIntegerValueEv", "cvc5::Term::isIntegerValue"], [26, 1, 1, "_CPPv4NK4cvc54Term6isNullEv", "cvc5::Term::isNull"], [26, 1, 1, "_CPPv4NK4cvc54Term13isReal32ValueEv", "cvc5::Term::isReal32Value"], [26, 1, 1, "_CPPv4NK4cvc54Term13isReal64ValueEv", "cvc5::Term::isReal64Value"], [26, 1, 1, "_CPPv4NK4cvc54Term21isRealAlgebraicNumberEv", "cvc5::Term::isRealAlgebraicNumber"], [26, 1, 1, "_CPPv4NK4cvc54Term11isRealValueEv", "cvc5::Term::isRealValue"], [26, 1, 1, "_CPPv4NK4cvc54Term19isRoundingModeValueEv", "cvc5::Term::isRoundingModeValue"], [26, 1, 1, "_CPPv4NK4cvc54Term15isSequenceValueEv", "cvc5::Term::isSequenceValue"], [26, 1, 1, "_CPPv4NK4cvc54Term10isSetValueEv", "cvc5::Term::isSetValue"], [26, 1, 1, "_CPPv4NK4cvc54Term13isStringValueEv", "cvc5::Term::isStringValue"], [26, 1, 1, "_CPPv4NK4cvc54Term12isTupleValueEv", "cvc5::Term::isTupleValue"], [26, 1, 1, "_CPPv4NK4cvc54Term13isUInt32ValueEv", "cvc5::Term::isUInt32Value"], [26, 1, 1, "_CPPv4NK4cvc54Term13isUInt64ValueEv", "cvc5::Term::isUInt64Value"], [26, 1, 1, "_CPPv4NK4cvc54Term24isUninterpretedSortValueEv", "cvc5::Term::isUninterpretedSortValue"], [26, 1, 1, "_CPPv4NK4cvc54Term7iteTermERK4TermRK4Term", "cvc5::Term::iteTerm"], [26, 2, 1, "_CPPv4NK4cvc54Term7iteTermERK4TermRK4Term", "cvc5::Term::iteTerm::e"], [26, 2, 1, "_CPPv4NK4cvc54Term7iteTermERK4TermRK4Term", "cvc5::Term::iteTerm::t"], [26, 1, 1, "_CPPv4NK4cvc54Term7notTermEv", "cvc5::Term::notTerm"], [26, 1, 1, "_CPPv4NK4cvc54TermneERK4Term", "cvc5::Term::operator!="], [26, 2, 1, "_CPPv4NK4cvc54TermneERK4Term", "cvc5::Term::operator!=::t"], [26, 1, 1, "_CPPv4NK4cvc54TermltERK4Term", "cvc5::Term::operator&lt;"], [26, 2, 1, "_CPPv4NK4cvc54TermltERK4Term", "cvc5::Term::operator&lt;::t"], [26, 1, 1, "_CPPv4NK4cvc54TermleERK4Term", "cvc5::Term::operator&lt;="], [26, 2, 1, "_CPPv4NK4cvc54TermleERK4Term", "cvc5::Term::operator&lt;=::t"], [26, 1, 1, "_CPPv4NK4cvc54TermeqERK4Term", "cvc5::Term::operator=="], [26, 2, 1, "_CPPv4NK4cvc54TermeqERK4Term", "cvc5::Term::operator==::t"], [26, 1, 1, "_CPPv4NK4cvc54TermgtERK4Term", "cvc5::Term::operator&gt;"], [26, 2, 1, "_CPPv4NK4cvc54TermgtERK4Term", "cvc5::Term::operator&gt;::t"], [26, 1, 1, "_CPPv4NK4cvc54TermgeERK4Term", "cvc5::Term::operator&gt;="], [26, 2, 1, "_CPPv4NK4cvc54TermgeERK4Term", "cvc5::Term::operator&gt;=::t"], [26, 1, 1, "_CPPv4NK4cvc54TermixE6size_t", "cvc5::Term::operator[]"], [26, 2, 1, "_CPPv4NK4cvc54TermixE6size_t", "cvc5::Term::operator[]::index"], [26, 1, 1, "_CPPv4NK4cvc54Term6orTermERK4Term", "cvc5::Term::orTerm"], [26, 2, 1, "_CPPv4NK4cvc54Term6orTermERK4Term", "cvc5::Term::orTerm::t"], [26, 1, 1, "_CPPv4NK4cvc54Term10substituteERK4TermRK4Term", "cvc5::Term::substitute"], [26, 1, 1, "_CPPv4NK4cvc54Term10substituteERKNSt6vectorI4TermEERKNSt6vectorI4TermEE", "cvc5::Term::substitute"], [26, 2, 1, "_CPPv4NK4cvc54Term10substituteERK4TermRK4Term", "cvc5::Term::substitute::replacement"], [26, 2, 1, "_CPPv4NK4cvc54Term10substituteERKNSt6vectorI4TermEERKNSt6vectorI4TermEE", "cvc5::Term::substitute::replacements"], [26, 2, 1, "_CPPv4NK4cvc54Term10substituteERK4TermRK4Term", "cvc5::Term::substitute::term"], [26, 2, 1, "_CPPv4NK4cvc54Term10substituteERKNSt6vectorI4TermEERKNSt6vectorI4TermEE", "cvc5::Term::substitute::terms"], [26, 1, 1, "_CPPv4NK4cvc54Term8toStringEv", "cvc5::Term::toString"], [26, 1, 1, "_CPPv4NK4cvc54Term7xorTermERK4Term", "cvc5::Term::xorTerm"], [26, 2, 1, "_CPPv4NK4cvc54Term7xorTermERK4Term", "cvc5::Term::xorTerm::t"], [26, 1, 1, "_CPPv4N4cvc54TermD0Ev", "cvc5::Term::~Term"], [27, 4, 1, "_CPPv4N4cvc518UnknownExplanationE", "cvc5::UnknownExplanation"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation10INCOMPLETEE", "cvc5::UnknownExplanation::INCOMPLETE"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation11INTERRUPTEDE", "cvc5::UnknownExplanation::INTERRUPTED"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation6MEMOUTE", "cvc5::UnknownExplanation::MEMOUT"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation5OTHERE", "cvc5::UnknownExplanation::OTHER"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation20REQUIRES_CHECK_AGAINE", "cvc5::UnknownExplanation::REQUIRES_CHECK_AGAIN"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation19REQUIRES_FULL_CHECKE", "cvc5::UnknownExplanation::REQUIRES_FULL_CHECK"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation11RESOURCEOUTE", "cvc5::UnknownExplanation::RESOURCEOUT"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation7TIMEOUTE", "cvc5::UnknownExplanation::TIMEOUT"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation14UNKNOWN_REASONE", "cvc5::UnknownExplanation::UNKNOWN_REASON"], [27, 5, 1, "_CPPv4N4cvc518UnknownExplanation11UNSUPPORTEDE", "cvc5::UnknownExplanation::UNSUPPORTED"], [13, 4, 1, "_CPPv4N4cvc55modes15BlockModelsModeE", "cvc5::modes::BlockModelsMode"], [13, 5, 1, "_CPPv4N4cvc55modes15BlockModelsMode8LITERALSE", "cvc5::modes::BlockModelsMode::LITERALS"], [13, 5, 1, "_CPPv4N4cvc55modes15BlockModelsMode6VALUESE", "cvc5::modes::BlockModelsMode::VALUES"], [13, 4, 1, "_CPPv4N4cvc55modes15FindSynthTargetE", "cvc5::modes::FindSynthTarget"], [13, 5, 1, "_CPPv4N4cvc55modes15FindSynthTarget4ENUME", "cvc5::modes::FindSynthTarget::ENUM"], [13, 5, 1, "_CPPv4N4cvc55modes15FindSynthTarget5QUERYE", "cvc5::modes::FindSynthTarget::QUERY"], [13, 5, 1, "_CPPv4N4cvc55modes15FindSynthTarget7REWRITEE", "cvc5::modes::FindSynthTarget::REWRITE"], [13, 5, 1, "_CPPv4N4cvc55modes15FindSynthTarget13REWRITE_INPUTE", "cvc5::modes::FindSynthTarget::REWRITE_INPUT"], [13, 5, 1, "_CPPv4N4cvc55modes15FindSynthTarget15REWRITE_UNSOUNDE", "cvc5::modes::FindSynthTarget::REWRITE_UNSOUND"], [13, 4, 1, "_CPPv4N4cvc55modes14LearnedLitTypeE", "cvc5::modes::LearnedLitType"], [13, 5, 1, "_CPPv4N4cvc55modes14LearnedLitType13CONSTANT_PROPE", "cvc5::modes::LearnedLitType::CONSTANT_PROP"], [13, 5, 1, "_CPPv4N4cvc55modes14LearnedLitType5INPUTE", "cvc5::modes::LearnedLitType::INPUT"], [13, 5, 1, "_CPPv4N4cvc55modes14LearnedLitType8INTERNALE", "cvc5::modes::LearnedLitType::INTERNAL"], [13, 5, 1, "_CPPv4N4cvc55modes14LearnedLitType10PREPROCESSE", "cvc5::modes::LearnedLitType::PREPROCESS"], [13, 5, 1, "_CPPv4N4cvc55modes14LearnedLitType17PREPROCESS_SOLVEDE", "cvc5::modes::LearnedLitType::PREPROCESS_SOLVED"], [13, 5, 1, "_CPPv4N4cvc55modes14LearnedLitType8SOLVABLEE", "cvc5::modes::LearnedLitType::SOLVABLE"], [13, 5, 1, "_CPPv4N4cvc55modes14LearnedLitType7UNKNOWNE", "cvc5::modes::LearnedLitType::UNKNOWN"], [13, 4, 1, "_CPPv4N4cvc55modes14ProofComponentE", "cvc5::modes::ProofComponent"], [13, 5, 1, "_CPPv4N4cvc55modes14ProofComponent4FULLE", "cvc5::modes::ProofComponent::FULL"], [13, 5, 1, "_CPPv4N4cvc55modes14ProofComponent10PREPROCESSE", "cvc5::modes::ProofComponent::PREPROCESS"], [13, 5, 1, "_CPPv4N4cvc55modes14ProofComponent14RAW_PREPROCESSE", "cvc5::modes::ProofComponent::RAW_PREPROCESS"], [13, 5, 1, "_CPPv4N4cvc55modes14ProofComponent3SATE", "cvc5::modes::ProofComponent::SAT"], [13, 5, 1, "_CPPv4N4cvc55modes14ProofComponent13THEORY_LEMMASE", "cvc5::modes::ProofComponent::THEORY_LEMMAS"], [13, 1, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE14LearnedLitType", "cvc5::modes::operator&lt;&lt;"], [13, 1, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE14ProofComponent", "cvc5::modes::operator&lt;&lt;"], [13, 1, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE15BlockModelsMode", "cvc5::modes::operator&lt;&lt;"], [13, 1, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE15FindSynthTarget", "cvc5::modes::operator&lt;&lt;"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE15BlockModelsMode", "cvc5::modes::operator&lt;&lt;::mode"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE14LearnedLitType", "cvc5::modes::operator&lt;&lt;::out"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE14ProofComponent", "cvc5::modes::operator&lt;&lt;::out"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE15BlockModelsMode", "cvc5::modes::operator&lt;&lt;::out"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE15FindSynthTarget", "cvc5::modes::operator&lt;&lt;::out"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE14ProofComponent", "cvc5::modes::operator&lt;&lt;::pc"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE15FindSynthTarget", "cvc5::modes::operator&lt;&lt;::target"], [13, 2, 1, "_CPPv4N4cvc55modeslsERNSt7ostreamE14LearnedLitType", "cvc5::modes::operator&lt;&lt;::type"], [3, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK8Datatype", "cvc5::operator&lt;&lt;"], [4, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK19DatatypeConstructor", "cvc5::operator&lt;&lt;"], [5, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK23DatatypeConstructorDecl", "cvc5::operator&lt;&lt;"], [5, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI23DatatypeConstructorDeclEE", "cvc5::operator&lt;&lt;"], [6, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK12DatatypeDecl", "cvc5::operator&lt;&lt;"], [7, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK16DatatypeSelector", "cvc5::operator&lt;&lt;"], [10, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK7Grammar", "cvc5::operator&lt;&lt;"], [12, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamE4Kind", "cvc5::operator&lt;&lt;"], [14, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK2Op", "cvc5::operator&lt;&lt;"], [15, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK10OptionInfo", "cvc5::operator&lt;&lt;"], [18, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK6Result", "cvc5::operator&lt;&lt;"], [21, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Sort", "cvc5::operator&lt;&lt;"], [22, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamE8SortKind", "cvc5::operator&lt;&lt;"], [23, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK10Statistics", "cvc5::operator&lt;&lt;"], [23, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Stat", "cvc5::operator&lt;&lt;"], [25, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK11SynthResult", "cvc5::operator&lt;&lt;"], [26, 1, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt13unordered_mapI4Term1VEE", "cvc5::operator&lt;&lt;"], [26, 1, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt3mapI4Term1VEE", "cvc5::operator&lt;&lt;"], [26, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Term", "cvc5::operator&lt;&lt;"], [26, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt13unordered_setI4TermEE", "cvc5::operator&lt;&lt;"], [26, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt3setI4TermEE", "cvc5::operator&lt;&lt;"], [26, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI4TermEE", "cvc5::operator&lt;&lt;"], [27, 1, 1, "_CPPv4N4cvc5lsERNSt7ostreamE18UnknownExplanation", "cvc5::operator&lt;&lt;"], [26, 7, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt13unordered_mapI4Term1VEE", "cvc5::operator&lt;&lt;::V"], [26, 7, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt3mapI4Term1VEE", "cvc5::operator&lt;&lt;::V"], [4, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK19DatatypeConstructor", "cvc5::operator&lt;&lt;::ctor"], [5, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK23DatatypeConstructorDecl", "cvc5::operator&lt;&lt;::ctordecl"], [6, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK12DatatypeDecl", "cvc5::operator&lt;&lt;::dtdecl"], [3, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK8Datatype", "cvc5::operator&lt;&lt;::dtype"], [27, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamE18UnknownExplanation", "cvc5::operator&lt;&lt;::e"], [10, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK7Grammar", "cvc5::operator&lt;&lt;::g"], [22, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamE8SortKind", "cvc5::operator&lt;&lt;::k"], [12, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamE4Kind", "cvc5::operator&lt;&lt;::kind"], [26, 2, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt3mapI4Term1VEE", "cvc5::operator&lt;&lt;::map"], [15, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK10OptionInfo", "cvc5::operator&lt;&lt;::oi"], [14, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK2Op", "cvc5::operator&lt;&lt;::op"], [15, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK10OptionInfo", "cvc5::operator&lt;&lt;::os"], [23, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Stat", "cvc5::operator&lt;&lt;::os"], [3, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK8Datatype", "cvc5::operator&lt;&lt;::out"], [4, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK19DatatypeConstructor", "cvc5::operator&lt;&lt;::out"], [5, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK23DatatypeConstructorDecl", "cvc5::operator&lt;&lt;::out"], [5, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI23DatatypeConstructorDeclEE", "cvc5::operator&lt;&lt;::out"], [6, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK12DatatypeDecl", "cvc5::operator&lt;&lt;::out"], [7, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK16DatatypeSelector", "cvc5::operator&lt;&lt;::out"], [10, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK7Grammar", "cvc5::operator&lt;&lt;::out"], [12, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamE4Kind", "cvc5::operator&lt;&lt;::out"], [14, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK2Op", "cvc5::operator&lt;&lt;::out"], [18, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK6Result", "cvc5::operator&lt;&lt;::out"], [21, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Sort", "cvc5::operator&lt;&lt;::out"], [22, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamE8SortKind", "cvc5::operator&lt;&lt;::out"], [23, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK10Statistics", "cvc5::operator&lt;&lt;::out"], [25, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK11SynthResult", "cvc5::operator&lt;&lt;::out"], [26, 2, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt13unordered_mapI4Term1VEE", "cvc5::operator&lt;&lt;::out"], [26, 2, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt3mapI4Term1VEE", "cvc5::operator&lt;&lt;::out"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Term", "cvc5::operator&lt;&lt;::out"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt13unordered_setI4TermEE", "cvc5::operator&lt;&lt;::out"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt3setI4TermEE", "cvc5::operator&lt;&lt;::out"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI4TermEE", "cvc5::operator&lt;&lt;::out"], [27, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamE18UnknownExplanation", "cvc5::operator&lt;&lt;::out"], [18, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK6Result", "cvc5::operator&lt;&lt;::r"], [25, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK11SynthResult", "cvc5::operator&lt;&lt;::r"], [21, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Sort", "cvc5::operator&lt;&lt;::s"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt3setI4TermEE", "cvc5::operator&lt;&lt;::set"], [23, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK10Statistics", "cvc5::operator&lt;&lt;::stats"], [7, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK16DatatypeSelector", "cvc5::operator&lt;&lt;::stor"], [23, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Stat", "cvc5::operator&lt;&lt;::sv"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERK4Term", "cvc5::operator&lt;&lt;::t"], [26, 2, 1, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt13unordered_mapI4Term1VEE", "cvc5::operator&lt;&lt;::unordered_map"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt13unordered_setI4TermEE", "cvc5::operator&lt;&lt;::unordered_set"], [5, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI23DatatypeConstructorDeclEE", "cvc5::operator&lt;&lt;::vector"], [26, 2, 1, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI4TermEE", "cvc5::operator&lt;&lt;::vector"], [1, 0, 1, "_CPPv4N4cvc56parser7CommandE", "cvc5::parser::Command"], [1, 1, 1, "_CPPv4N4cvc56parser7Command7CommandEv", "cvc5::parser::Command::Command"], [1, 1, 1, "_CPPv4NK4cvc56parser7Command14getCommandNameEv", "cvc5::parser::Command::getCommandName"], [1, 1, 1, "_CPPv4N4cvc56parser7Command6invokeEPN4cvc56SolverEPN6parser13SymbolManagerERNSt7ostreamE", "cvc5::parser::Command::invoke"], [1, 2, 1, "_CPPv4N4cvc56parser7Command6invokeEPN4cvc56SolverEPN6parser13SymbolManagerERNSt7ostreamE", "cvc5::parser::Command::invoke::out"], [1, 2, 1, "_CPPv4N4cvc56parser7Command6invokeEPN4cvc56SolverEPN6parser13SymbolManagerERNSt7ostreamE", "cvc5::parser::Command::invoke::sm"], [1, 2, 1, "_CPPv4N4cvc56parser7Command6invokeEPN4cvc56SolverEPN6parser13SymbolManagerERNSt7ostreamE", "cvc5::parser::Command::invoke::solver"], [1, 1, 1, "_CPPv4NK4cvc56parser7Command6isNullEv", "cvc5::parser::Command::isNull"], [1, 1, 1, "_CPPv4NK4cvc56parser7Command8toStringEv", "cvc5::parser::Command::toString"], [11, 0, 1, "_CPPv4N4cvc56parser11InputParserE", "cvc5::parser::InputParser"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser11InputParserEP6Solver", "cvc5::parser::InputParser::InputParser"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser11InputParserEP6SolverP13SymbolManager", "cvc5::parser::InputParser::InputParser"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser11InputParserEP6SolverP13SymbolManager", "cvc5::parser::InputParser::InputParser::sm"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser11InputParserEP6Solver", "cvc5::parser::InputParser::InputParser::solver"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser11InputParserEP6SolverP13SymbolManager", "cvc5::parser::InputParser::InputParser::solver"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser28appendIncrementalStringInputERKNSt6stringE", "cvc5::parser::InputParser::appendIncrementalStringInput"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser28appendIncrementalStringInputERKNSt6stringE", "cvc5::parser::InputParser::appendIncrementalStringInput::input"], [11, 1, 1, "_CPPv4NK4cvc56parser11InputParser4doneEv", "cvc5::parser::InputParser::done"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser9getSolverEv", "cvc5::parser::InputParser::getSolver"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser16getSymbolManagerEv", "cvc5::parser::InputParser::getSymbolManager"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser11nextCommandEv", "cvc5::parser::InputParser::nextCommand"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser8nextTermEv", "cvc5::parser::InputParser::nextTerm"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser12setFileInputEN5modes13InputLanguageERKNSt6stringE", "cvc5::parser::InputParser::setFileInput"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser12setFileInputEN5modes13InputLanguageERKNSt6stringE", "cvc5::parser::InputParser::setFileInput::filename"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser12setFileInputEN5modes13InputLanguageERKNSt6stringE", "cvc5::parser::InputParser::setFileInput::lang"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser25setIncrementalStringInputEN5modes13InputLanguageERKNSt6stringE", "cvc5::parser::InputParser::setIncrementalStringInput"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser25setIncrementalStringInputEN5modes13InputLanguageERKNSt6stringE", "cvc5::parser::InputParser::setIncrementalStringInput::lang"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser25setIncrementalStringInputEN5modes13InputLanguageERKNSt6stringE", "cvc5::parser::InputParser::setIncrementalStringInput::name"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser14setStreamInputEN5modes13InputLanguageERNSt7istreamERKNSt6stringE", "cvc5::parser::InputParser::setStreamInput"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser14setStreamInputEN5modes13InputLanguageERNSt7istreamERKNSt6stringE", "cvc5::parser::InputParser::setStreamInput::input"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser14setStreamInputEN5modes13InputLanguageERNSt7istreamERKNSt6stringE", "cvc5::parser::InputParser::setStreamInput::lang"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser14setStreamInputEN5modes13InputLanguageERNSt7istreamERKNSt6stringE", "cvc5::parser::InputParser::setStreamInput::name"], [11, 1, 1, "_CPPv4N4cvc56parser11InputParser14setStringInputEN5modes13InputLanguageERKNSt6stringERKNSt6stringE", "cvc5::parser::InputParser::setStringInput"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser14setStringInputEN5modes13InputLanguageERKNSt6stringERKNSt6stringE", "cvc5::parser::InputParser::setStringInput::input"], [11, 2, 1, "_CPPv4N4cvc56parser11InputParser14setStringInputEN5modes13InputLanguageERKNSt6stringERKNSt6stringE", "cvc5::parser::InputParser::setStringInput::name"], [16, 0, 1, "_CPPv4N4cvc56parser15ParserExceptionE", "cvc5::parser::ParserException"], [16, 1, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionEPKc", "cvc5::parser::ParserException::ParserException"], [16, 1, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringE", "cvc5::parser::ParserException::ParserException"], [16, 1, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringERKNSt6stringEmm", "cvc5::parser::ParserException::ParserException"], [16, 1, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionEv", "cvc5::parser::ParserException::ParserException"], [16, 2, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringERKNSt6stringEmm", "cvc5::parser::ParserException::ParserException::column"], [16, 2, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringERKNSt6stringEmm", "cvc5::parser::ParserException::ParserException::filename"], [16, 2, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringERKNSt6stringEmm", "cvc5::parser::ParserException::ParserException::line"], [16, 2, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionEPKc", "cvc5::parser::ParserException::ParserException::msg"], [16, 2, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringE", "cvc5::parser::ParserException::ParserException::msg"], [16, 2, 1, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringERKNSt6stringEmm", "cvc5::parser::ParserException::ParserException::msg"], [16, 1, 1, "_CPPv4NK4cvc56parser15ParserException9getColumnEv", "cvc5::parser::ParserException::getColumn"], [16, 1, 1, "_CPPv4NK4cvc56parser15ParserException11getFilenameEv", "cvc5::parser::ParserException::getFilename"], [16, 1, 1, "_CPPv4NK4cvc56parser15ParserException7getLineEv", "cvc5::parser::ParserException::getLine"], [16, 1, 1, "_CPPv4NK4cvc56parser15ParserException8toStreamERNSt7ostreamE", "cvc5::parser::ParserException::toStream"], [16, 2, 1, "_CPPv4NK4cvc56parser15ParserException8toStreamERNSt7ostreamE", "cvc5::parser::ParserException::toStream::os"], [24, 0, 1, "_CPPv4N4cvc56parser13SymbolManagerE", "cvc5::parser::SymbolManager"], [24, 1, 1, "_CPPv4N4cvc56parser13SymbolManager13SymbolManagerEPN4cvc56SolverE", "cvc5::parser::SymbolManager::SymbolManager"], [24, 2, 1, "_CPPv4N4cvc56parser13SymbolManager13SymbolManagerEPN4cvc56SolverE", "cvc5::parser::SymbolManager::SymbolManager::s"], [24, 1, 1, "_CPPv4NK4cvc56parser13SymbolManager8getLogicEv", "cvc5::parser::SymbolManager::getLogic"], [24, 1, 1, "_CPPv4NK4cvc56parser13SymbolManager10isLogicSetEv", "cvc5::parser::SymbolManager::isLogicSet"], [24, 1, 1, "_CPPv4N4cvc56parser13SymbolManagerD0Ev", "cvc5::parser::SymbolManager::~SymbolManager"], [12, 0, 1, "_CPPv4IENSt4hashIN4cvc54KindEEE", "std::hash&lt;cvc5::Kind&gt;"], [12, 1, 1, "_CPPv4NKSt4hashIN4cvc54KindEEclEN4cvc54KindE", "std::hash&lt;cvc5::Kind&gt;::operator()"], [12, 2, 1, "_CPPv4NKSt4hashIN4cvc54KindEEclEN4cvc54KindE", "std::hash&lt;cvc5::Kind&gt;::operator()::kind"], [14, 0, 1, "_CPPv4IENSt4hashIN4cvc52OpEEE", "std::hash&lt;cvc5::Op&gt;"], [14, 1, 1, "_CPPv4NKSt4hashIN4cvc52OpEEclERKN4cvc52OpE", "std::hash&lt;cvc5::Op&gt;::operator()"], [14, 2, 1, "_CPPv4NKSt4hashIN4cvc52OpEEclERKN4cvc52OpE", "std::hash&lt;cvc5::Op&gt;::operator()::op"], [21, 0, 1, "_CPPv4IENSt4hashIN4cvc54SortEEE", "std::hash&lt;cvc5::Sort&gt;"], [21, 1, 1, "_CPPv4NKSt4hashIN4cvc54SortEEclERKN4cvc54SortE", "std::hash&lt;cvc5::Sort&gt;::operator()"], [21, 2, 1, "_CPPv4NKSt4hashIN4cvc54SortEEclERKN4cvc54SortE", "std::hash&lt;cvc5::Sort&gt;::operator()::s"], [22, 0, 1, "_CPPv4IENSt4hashIN4cvc58SortKindEEE", "std::hash&lt;cvc5::SortKind&gt;"], [22, 1, 1, "_CPPv4NKSt4hashIN4cvc58SortKindEEclEN4cvc58SortKindE", "std::hash&lt;cvc5::SortKind&gt;::operator()"], [22, 2, 1, "_CPPv4NKSt4hashIN4cvc58SortKindEEclEN4cvc58SortKindE", "std::hash&lt;cvc5::SortKind&gt;::operator()::kind"], [26, 0, 1, "_CPPv4IENSt4hashIN4cvc54TermEEE", "std::hash&lt;cvc5::Term&gt;"], [26, 1, 1, "_CPPv4NKSt4hashIN4cvc54TermEEclERKN4cvc54TermE", "std::hash&lt;cvc5::Term&gt;::operator()"], [26, 2, 1, "_CPPv4NKSt4hashIN4cvc54TermEEclERKN4cvc54TermE", "std::hash&lt;cvc5::Term&gt;::operator()::t"]], "cvc5": [[31, 8, 1, "", "Datatype"], [32, 8, 1, "", "DatatypeConstructor"], [33, 8, 1, "", "DatatypeConstructorDecl"], [34, 8, 1, "", "DatatypeDecl"], [35, 8, 1, "", "DatatypeSelector"], [36, 8, 1, "", "Grammar"], [37, 8, 1, "", "Kind"], [38, 8, 1, "", "Op"], [39, 8, 1, "", "ProofRule"], [42, 8, 1, "", "Result"], [43, 8, 1, "", "RoundingMode"], [44, 8, 1, "", "Solver"], [45, 8, 1, "", "Sort"], [46, 8, 1, "", "Statistics"], [47, 8, 1, "", "SynthResult"], [48, 8, 1, "", "Term"], [49, 8, 1, "", "UnknownExplanation"]], "cvc5.Datatype": [[31, 9, 1, "", "__getitem__"], [31, 9, 1, "", "__iter__"], [31, 9, 1, "", "getConstructor"], [31, 9, 1, "", "getName"], [31, 9, 1, "", "getNumConstructors"], [31, 9, 1, "", "getParameters"], [31, 9, 1, "", "getSelector"], [31, 9, 1, "", "isCodatatype"], [31, 9, 1, "", "isFinite"], [31, 9, 1, "", "isNull"], [31, 9, 1, "", "isParametric"], [31, 9, 1, "", "isRecord"], [31, 9, 1, "", "isTuple"], [31, 9, 1, "", "isWellFounded"]], "cvc5.DatatypeConstructor": [[32, 9, 1, "", "__getitem__"], [32, 9, 1, "", "__iter__"], [32, 9, 1, "", "getInstantiatedTerm"], [32, 9, 1, "", "getName"], [32, 9, 1, "", "getNumSelectors"], [32, 9, 1, "", "getSelector"], [32, 9, 1, "", "getTerm"], [32, 9, 1, "", "getTesterTerm"], [32, 9, 1, "", "isNull"]], "cvc5.DatatypeConstructorDecl": [[33, 9, 1, "", "addSelector"], [33, 9, 1, "", "addSelectorSelf"], [33, 9, 1, "", "addSelectorUnresolved"], [33, 9, 1, "", "isNull"]], "cvc5.DatatypeDecl": [[34, 9, 1, "", "addConstructor"], [34, 9, 1, "", "getName"], [34, 9, 1, "", "getNumConstructors"], [34, 9, 1, "", "isNull"], [34, 9, 1, "", "isParametric"]], "cvc5.DatatypeSelector": [[35, 9, 1, "", "getCodomainSort"], [35, 9, 1, "", "getName"], [35, 9, 1, "", "getTerm"], [35, 9, 1, "", "getUpdaterTerm"], [35, 9, 1, "", "isNull"]], "cvc5.Grammar": [[36, 9, 1, "", "addAnyConstant"], [36, 9, 1, "", "addAnyVariable"], [36, 9, 1, "", "addRule"], [36, 9, 1, "", "addRules"]], "cvc5.Kind": [[37, 10, 1, "", "ABS"], [37, 10, 1, "", "ADD"], [37, 10, 1, "", "AND"], [37, 10, 1, "", "APPLY_CONSTRUCTOR"], [37, 10, 1, "", "APPLY_SELECTOR"], [37, 10, 1, "", "APPLY_TESTER"], [37, 10, 1, "", "APPLY_UF"], [37, 10, 1, "", "APPLY_UPDATER"], [37, 10, 1, "", "ARCCOSECANT"], [37, 10, 1, "", "ARCCOSINE"], [37, 10, 1, "", "ARCCOTANGENT"], [37, 10, 1, "", "ARCSECANT"], [37, 10, 1, "", "ARCSINE"], [37, 10, 1, "", "ARCTANGENT"], [37, 10, 1, "", "BAG_CARD"], [37, 10, 1, "", "BAG_CHOOSE"], [37, 10, 1, "", "BAG_COUNT"], [37, 10, 1, "", "BAG_DIFFERENCE_REMOVE"], [37, 10, 1, "", "BAG_DIFFERENCE_SUBTRACT"], [37, 10, 1, "", "BAG_DUPLICATE_REMOVAL"], [37, 10, 1, "", "BAG_EMPTY"], [37, 10, 1, "", "BAG_FILTER"], [37, 10, 1, "", "BAG_FOLD"], [37, 10, 1, "", "BAG_FROM_SET"], [37, 10, 1, "", "BAG_INTER_MIN"], [37, 10, 1, "", "BAG_IS_SINGLETON"], [37, 10, 1, "", "BAG_MAKE"], [37, 10, 1, "", "BAG_MAP"], [37, 10, 1, "", "BAG_MEMBER"], [37, 10, 1, "", "BAG_PARTITION"], [37, 10, 1, "", "BAG_SUBBAG"], [37, 10, 1, "", "BAG_TO_SET"], [37, 10, 1, "", "BAG_UNION_DISJOINT"], [37, 10, 1, "", "BAG_UNION_MAX"], [37, 10, 1, "", "BITVECTOR_ADD"], [37, 10, 1, "", "BITVECTOR_AND"], [37, 10, 1, "", "BITVECTOR_ASHR"], [37, 10, 1, "", "BITVECTOR_COMP"], [37, 10, 1, "", "BITVECTOR_CONCAT"], [37, 10, 1, "", "BITVECTOR_EXTRACT"], [37, 10, 1, "", "BITVECTOR_ITE"], [37, 10, 1, "", "BITVECTOR_LSHR"], [37, 10, 1, "", "BITVECTOR_MULT"], [37, 10, 1, "", "BITVECTOR_NAND"], [37, 10, 1, "", "BITVECTOR_NEG"], [37, 10, 1, "", "BITVECTOR_NEGO"], [37, 10, 1, "", "BITVECTOR_NOR"], [37, 10, 1, "", "BITVECTOR_NOT"], [37, 10, 1, "", "BITVECTOR_OR"], [37, 10, 1, "", "BITVECTOR_REDAND"], [37, 10, 1, "", "BITVECTOR_REDOR"], [37, 10, 1, "", "BITVECTOR_REPEAT"], [37, 10, 1, "", "BITVECTOR_ROTATE_LEFT"], [37, 10, 1, "", "BITVECTOR_ROTATE_RIGHT"], [37, 10, 1, "", "BITVECTOR_SADDO"], [37, 10, 1, "", "BITVECTOR_SDIV"], [37, 10, 1, "", "BITVECTOR_SDIVO"], [37, 10, 1, "", "BITVECTOR_SGE"], [37, 10, 1, "", "BITVECTOR_SGT"], [37, 10, 1, "", "BITVECTOR_SHL"], [37, 10, 1, "", "BITVECTOR_SIGN_EXTEND"], [37, 10, 1, "", "BITVECTOR_SLE"], [37, 10, 1, "", "BITVECTOR_SLT"], [37, 10, 1, "", "BITVECTOR_SLTBV"], [37, 10, 1, "", "BITVECTOR_SMOD"], [37, 10, 1, "", "BITVECTOR_SMULO"], [37, 10, 1, "", "BITVECTOR_SREM"], [37, 10, 1, "", "BITVECTOR_SSUBO"], [37, 10, 1, "", "BITVECTOR_SUB"], [37, 10, 1, "", "BITVECTOR_TO_NAT"], [37, 10, 1, "", "BITVECTOR_UADDO"], [37, 10, 1, "", "BITVECTOR_UDIV"], [37, 10, 1, "", "BITVECTOR_UGE"], [37, 10, 1, "", "BITVECTOR_UGT"], [37, 10, 1, "", "BITVECTOR_ULE"], [37, 10, 1, "", "BITVECTOR_ULT"], [37, 10, 1, "", "BITVECTOR_ULTBV"], [37, 10, 1, "", "BITVECTOR_UMULO"], [37, 10, 1, "", "BITVECTOR_UREM"], [37, 10, 1, "", "BITVECTOR_USUBO"], [37, 10, 1, "", "BITVECTOR_XNOR"], [37, 10, 1, "", "BITVECTOR_XOR"], [37, 10, 1, "", "BITVECTOR_ZERO_EXTEND"], [37, 10, 1, "", "CARDINALITY_CONSTRAINT"], [37, 10, 1, "", "CONSTANT"], [37, 10, 1, "", "CONST_ARRAY"], [37, 10, 1, "", "CONST_BITVECTOR"], [37, 10, 1, "", "CONST_BOOLEAN"], [37, 10, 1, "", "CONST_FINITE_FIELD"], [37, 10, 1, "", "CONST_FLOATINGPOINT"], [37, 10, 1, "", "CONST_INTEGER"], [37, 10, 1, "", "CONST_RATIONAL"], [37, 10, 1, "", "CONST_ROUNDINGMODE"], [37, 10, 1, "", "CONST_SEQUENCE"], [37, 10, 1, "", "CONST_STRING"], [37, 10, 1, "", "COSECANT"], [37, 10, 1, "", "COSINE"], [37, 10, 1, "", "COTANGENT"], [37, 10, 1, "", "DISTINCT"], [37, 10, 1, "", "DIVISIBLE"], [37, 10, 1, "", "DIVISION"], [37, 10, 1, "", "EQUAL"], [37, 10, 1, "", "EQ_RANGE"], [37, 10, 1, "", "EXISTS"], [37, 10, 1, "", "EXPONENTIAL"], [37, 10, 1, "", "FINITE_FIELD_ADD"], [37, 10, 1, "", "FINITE_FIELD_BITSUM"], [37, 10, 1, "", "FINITE_FIELD_MULT"], [37, 10, 1, "", "FINITE_FIELD_NEG"], [37, 10, 1, "", "FLOATINGPOINT_ABS"], [37, 10, 1, "", "FLOATINGPOINT_ADD"], [37, 10, 1, "", "FLOATINGPOINT_DIV"], [37, 10, 1, "", "FLOATINGPOINT_EQ"], [37, 10, 1, "", "FLOATINGPOINT_FMA"], [37, 10, 1, "", "FLOATINGPOINT_FP"], [37, 10, 1, "", "FLOATINGPOINT_GEQ"], [37, 10, 1, "", "FLOATINGPOINT_GT"], [37, 10, 1, "", "FLOATINGPOINT_IS_INF"], [37, 10, 1, "", "FLOATINGPOINT_IS_NAN"], [37, 10, 1, "", "FLOATINGPOINT_IS_NEG"], [37, 10, 1, "", "FLOATINGPOINT_IS_NORMAL"], [37, 10, 1, "", "FLOATINGPOINT_IS_POS"], [37, 10, 1, "", "FLOATINGPOINT_IS_SUBNORMAL"], [37, 10, 1, "", "FLOATINGPOINT_IS_ZERO"], [37, 10, 1, "", "FLOATINGPOINT_LEQ"], [37, 10, 1, "", "FLOATINGPOINT_LT"], [37, 10, 1, "", "FLOATINGPOINT_MAX"], [37, 10, 1, "", "FLOATINGPOINT_MIN"], [37, 10, 1, "", "FLOATINGPOINT_MULT"], [37, 10, 1, "", "FLOATINGPOINT_NEG"], [37, 10, 1, "", "FLOATINGPOINT_REM"], [37, 10, 1, "", "FLOATINGPOINT_RTI"], [37, 10, 1, "", "FLOATINGPOINT_SQRT"], [37, 10, 1, "", "FLOATINGPOINT_SUB"], [37, 10, 1, "", "FLOATINGPOINT_TO_FP_FROM_FP"], [37, 10, 1, "", "FLOATINGPOINT_TO_FP_FROM_IEEE_BV"], [37, 10, 1, "", "FLOATINGPOINT_TO_FP_FROM_REAL"], [37, 10, 1, "", "FLOATINGPOINT_TO_FP_FROM_SBV"], [37, 10, 1, "", "FLOATINGPOINT_TO_FP_FROM_UBV"], [37, 10, 1, "", "FLOATINGPOINT_TO_REAL"], [37, 10, 1, "", "FLOATINGPOINT_TO_SBV"], [37, 10, 1, "", "FLOATINGPOINT_TO_UBV"], [37, 10, 1, "", "FORALL"], [37, 10, 1, "", "GEQ"], [37, 10, 1, "", "GT"], [37, 10, 1, "", "HO_APPLY"], [37, 10, 1, "", "IAND"], [37, 10, 1, "", "IMPLIES"], [37, 10, 1, "", "INST_ADD_TO_POOL"], [37, 10, 1, "", "INST_ATTRIBUTE"], [37, 10, 1, "", "INST_NO_PATTERN"], [37, 10, 1, "", "INST_PATTERN"], [37, 10, 1, "", "INST_PATTERN_LIST"], [37, 10, 1, "", "INST_POOL"], [37, 10, 1, "", "INTERNAL_KIND"], [37, 10, 1, "", "INTS_DIVISION"], [37, 10, 1, "", "INTS_MODULUS"], [37, 10, 1, "", "INT_TO_BITVECTOR"], [37, 10, 1, "", "IS_INTEGER"], [37, 10, 1, "", "ITE"], [37, 10, 1, "", "LAMBDA"], [37, 10, 1, "", "LAST_KIND"], [37, 10, 1, "", "LEQ"], [37, 10, 1, "", "LT"], [37, 10, 1, "", "MATCH"], [37, 10, 1, "", "MATCH_BIND_CASE"], [37, 10, 1, "", "MATCH_CASE"], [37, 10, 1, "", "MULT"], [37, 10, 1, "", "NEG"], [37, 10, 1, "", "NOT"], [37, 10, 1, "", "NULL_TERM"], [37, 10, 1, "", "OR"], [37, 10, 1, "", "PI"], [37, 10, 1, "", "POW"], [37, 10, 1, "", "POW2"], [37, 10, 1, "", "REGEXP_ALL"], [37, 10, 1, "", "REGEXP_ALLCHAR"], [37, 10, 1, "", "REGEXP_COMPLEMENT"], [37, 10, 1, "", "REGEXP_CONCAT"], [37, 10, 1, "", "REGEXP_DIFF"], [37, 10, 1, "", "REGEXP_INTER"], [37, 10, 1, "", "REGEXP_LOOP"], [37, 10, 1, "", "REGEXP_NONE"], [37, 10, 1, "", "REGEXP_OPT"], [37, 10, 1, "", "REGEXP_PLUS"], [37, 10, 1, "", "REGEXP_RANGE"], [37, 10, 1, "", "REGEXP_REPEAT"], [37, 10, 1, "", "REGEXP_STAR"], [37, 10, 1, "", "REGEXP_UNION"], [37, 10, 1, "", "RELATION_AGGREGATE"], [37, 10, 1, "", "RELATION_GROUP"], [37, 10, 1, "", "RELATION_IDEN"], [37, 10, 1, "", "RELATION_JOIN"], [37, 10, 1, "", "RELATION_JOIN_IMAGE"], [37, 10, 1, "", "RELATION_PRODUCT"], [37, 10, 1, "", "RELATION_PROJECT"], [37, 10, 1, "", "RELATION_TCLOSURE"], [37, 10, 1, "", "RELATION_TRANSPOSE"], [37, 10, 1, "", "SECANT"], [37, 10, 1, "", "SELECT"], [37, 10, 1, "", "SEP_EMP"], [37, 10, 1, "", "SEP_NIL"], [37, 10, 1, "", "SEP_PTO"], [37, 10, 1, "", "SEP_STAR"], [37, 10, 1, "", "SEP_WAND"], [37, 10, 1, "", "SEQ_AT"], [37, 10, 1, "", "SEQ_CONCAT"], [37, 10, 1, "", "SEQ_CONTAINS"], [37, 10, 1, "", "SEQ_EXTRACT"], [37, 10, 1, "", "SEQ_INDEXOF"], [37, 10, 1, "", "SEQ_LENGTH"], [37, 10, 1, "", "SEQ_NTH"], [37, 10, 1, "", "SEQ_PREFIX"], [37, 10, 1, "", "SEQ_REPLACE"], [37, 10, 1, "", "SEQ_REPLACE_ALL"], [37, 10, 1, "", "SEQ_REV"], [37, 10, 1, "", "SEQ_SUFFIX"], [37, 10, 1, "", "SEQ_UNIT"], [37, 10, 1, "", "SEQ_UPDATE"], [37, 10, 1, "", "SET_CARD"], [37, 10, 1, "", "SET_CHOOSE"], [37, 10, 1, "", "SET_COMPLEMENT"], [37, 10, 1, "", "SET_COMPREHENSION"], [37, 10, 1, "", "SET_EMPTY"], [37, 10, 1, "", "SET_FILTER"], [37, 10, 1, "", "SET_FOLD"], [37, 10, 1, "", "SET_INSERT"], [37, 10, 1, "", "SET_INTER"], [37, 10, 1, "", "SET_IS_SINGLETON"], [37, 10, 1, "", "SET_MAP"], [37, 10, 1, "", "SET_MEMBER"], [37, 10, 1, "", "SET_MINUS"], [37, 10, 1, "", "SET_SINGLETON"], [37, 10, 1, "", "SET_SUBSET"], [37, 10, 1, "", "SET_UNION"], [37, 10, 1, "", "SET_UNIVERSE"], [37, 10, 1, "", "SEXPR"], [37, 10, 1, "", "SINE"], [37, 10, 1, "", "SKOLEM_ADD_TO_POOL"], [37, 10, 1, "", "SQRT"], [37, 10, 1, "", "STORE"], [37, 10, 1, "", "STRING_CHARAT"], [37, 10, 1, "", "STRING_CONCAT"], [37, 10, 1, "", "STRING_CONTAINS"], [37, 10, 1, "", "STRING_FROM_CODE"], [37, 10, 1, "", "STRING_FROM_INT"], [37, 10, 1, "", "STRING_INDEXOF"], [37, 10, 1, "", "STRING_INDEXOF_RE"], [37, 10, 1, "", "STRING_IN_REGEXP"], [37, 10, 1, "", "STRING_IS_DIGIT"], [37, 10, 1, "", "STRING_LENGTH"], [37, 10, 1, "", "STRING_LEQ"], [37, 10, 1, "", "STRING_LT"], [37, 10, 1, "", "STRING_PREFIX"], [37, 10, 1, "", "STRING_REPLACE"], [37, 10, 1, "", "STRING_REPLACE_ALL"], [37, 10, 1, "", "STRING_REPLACE_RE"], [37, 10, 1, "", "STRING_REPLACE_RE_ALL"], [37, 10, 1, "", "STRING_REV"], [37, 10, 1, "", "STRING_SUBSTR"], [37, 10, 1, "", "STRING_SUFFIX"], [37, 10, 1, "", "STRING_TO_CODE"], [37, 10, 1, "", "STRING_TO_INT"], [37, 10, 1, "", "STRING_TO_LOWER"], [37, 10, 1, "", "STRING_TO_REGEXP"], [37, 10, 1, "", "STRING_TO_UPPER"], [37, 10, 1, "", "STRING_UPDATE"], [37, 10, 1, "", "SUB"], [37, 10, 1, "", "TABLE_AGGREGATE"], [37, 10, 1, "", "TABLE_GROUP"], [37, 10, 1, "", "TABLE_JOIN"], [37, 10, 1, "", "TABLE_PRODUCT"], [37, 10, 1, "", "TABLE_PROJECT"], [37, 10, 1, "", "TANGENT"], [37, 10, 1, "", "TO_INTEGER"], [37, 10, 1, "", "TO_REAL"], [37, 10, 1, "", "TUPLE_PROJECT"], [37, 10, 1, "", "UNDEFINED_KIND"], [37, 10, 1, "", "UNINTERPRETED_SORT_VALUE"], [37, 10, 1, "", "VARIABLE"], [37, 10, 1, "", "VARIABLE_LIST"], [37, 10, 1, "", "WITNESS"], [37, 10, 1, "", "XOR"]], "cvc5.Op": [[38, 9, 1, "", "__getitem__"], [38, 9, 1, "", "getKind"], [38, 9, 1, "", "getNumIndices"], [38, 9, 1, "", "isIndexed"], [38, 9, 1, "", "isNull"]], "cvc5.ProofRule": [[39, 10, 1, "", "ALETHE_RULE"], [39, 10, 1, "", "ALF_RULE"], [39, 10, 1, "", "ALPHA_EQUIV"], [39, 10, 1, "", "AND_ELIM"], [39, 10, 1, "", "AND_INTRO"], [39, 10, 1, "", "ANNOTATION"], [39, 10, 1, "", "ARITH_MULT_NEG"], [39, 10, 1, "", "ARITH_MULT_POS"], [39, 10, 1, "", "ARITH_MULT_SIGN"], [39, 10, 1, "", "ARITH_MULT_TANGENT"], [39, 10, 1, "", "ARITH_NL_COVERING_DIRECT"], [39, 10, 1, "", "ARITH_NL_COVERING_RECURSIVE"], [39, 10, 1, "", "ARITH_OP_ELIM_AXIOM"], [39, 10, 1, "", "ARITH_POLY_NORM"], [39, 10, 1, "", "ARITH_SUM_UB"], [39, 10, 1, "", "ARITH_TRANS_EXP_APPROX_ABOVE_NEG"], [39, 10, 1, "", "ARITH_TRANS_EXP_APPROX_ABOVE_POS"], [39, 10, 1, "", "ARITH_TRANS_EXP_APPROX_BELOW"], [39, 10, 1, "", "ARITH_TRANS_EXP_NEG"], [39, 10, 1, "", "ARITH_TRANS_EXP_POSITIVITY"], [39, 10, 1, "", "ARITH_TRANS_EXP_SUPER_LIN"], [39, 10, 1, "", "ARITH_TRANS_EXP_ZERO"], [39, 10, 1, "", "ARITH_TRANS_PI"], [39, 10, 1, "", "ARITH_TRANS_SINE_APPROX_ABOVE_NEG"], [39, 10, 1, "", "ARITH_TRANS_SINE_APPROX_ABOVE_POS"], [39, 10, 1, "", "ARITH_TRANS_SINE_APPROX_BELOW_NEG"], [39, 10, 1, "", "ARITH_TRANS_SINE_APPROX_BELOW_POS"], [39, 10, 1, "", "ARITH_TRANS_SINE_BOUNDS"], [39, 10, 1, "", "ARITH_TRANS_SINE_SHIFT"], [39, 10, 1, "", "ARITH_TRANS_SINE_SYMMETRY"], [39, 10, 1, "", "ARITH_TRANS_SINE_TANGENT_PI"], [39, 10, 1, "", "ARITH_TRANS_SINE_TANGENT_ZERO"], [39, 10, 1, "", "ARITH_TRICHOTOMY"], [39, 10, 1, "", "ARRAYS_EQ_RANGE_EXPAND"], [39, 10, 1, "", "ARRAYS_EXT"], [39, 10, 1, "", "ARRAYS_READ_OVER_WRITE"], [39, 10, 1, "", "ARRAYS_READ_OVER_WRITE_1"], [39, 10, 1, "", "ARRAYS_READ_OVER_WRITE_CONTRA"], [39, 10, 1, "", "ASSUME"], [39, 10, 1, "", "BETA_REDUCE"], [39, 10, 1, "", "BV_BITBLAST_STEP"], [39, 10, 1, "", "BV_EAGER_ATOM"], [39, 10, 1, "", "CHAIN_RESOLUTION"], [39, 10, 1, "", "CNF_AND_NEG"], [39, 10, 1, "", "CNF_AND_POS"], [39, 10, 1, "", "CNF_EQUIV_NEG1"], [39, 10, 1, "", "CNF_EQUIV_NEG2"], [39, 10, 1, "", "CNF_EQUIV_POS1"], [39, 10, 1, "", "CNF_EQUIV_POS2"], [39, 10, 1, "", "CNF_IMPLIES_NEG1"], [39, 10, 1, "", "CNF_IMPLIES_NEG2"], [39, 10, 1, "", "CNF_IMPLIES_POS"], [39, 10, 1, "", "CNF_ITE_NEG1"], [39, 10, 1, "", "CNF_ITE_NEG2"], [39, 10, 1, "", "CNF_ITE_NEG3"], [39, 10, 1, "", "CNF_ITE_POS1"], [39, 10, 1, "", "CNF_ITE_POS2"], [39, 10, 1, "", "CNF_ITE_POS3"], [39, 10, 1, "", "CNF_OR_NEG"], [39, 10, 1, "", "CNF_OR_POS"], [39, 10, 1, "", "CNF_XOR_NEG1"], [39, 10, 1, "", "CNF_XOR_NEG2"], [39, 10, 1, "", "CNF_XOR_POS1"], [39, 10, 1, "", "CNF_XOR_POS2"], [39, 10, 1, "", "CONCAT_CONFLICT"], [39, 10, 1, "", "CONCAT_CPROP"], [39, 10, 1, "", "CONCAT_CSPLIT"], [39, 10, 1, "", "CONCAT_EQ"], [39, 10, 1, "", "CONCAT_LPROP"], [39, 10, 1, "", "CONCAT_SPLIT"], [39, 10, 1, "", "CONCAT_UNIFY"], [39, 10, 1, "", "CONG"], [39, 10, 1, "", "CONTRA"], [39, 10, 1, "", "DSL_REWRITE"], [39, 10, 1, "", "DT_CLASH"], [39, 10, 1, "", "DT_COLLAPSE"], [39, 10, 1, "", "DT_INST"], [39, 10, 1, "", "DT_SPLIT"], [39, 10, 1, "", "DT_UNIF"], [39, 10, 1, "", "ENCODE_PRED_TRANSFORM"], [39, 10, 1, "", "EQUIV_ELIM1"], [39, 10, 1, "", "EQUIV_ELIM2"], [39, 10, 1, "", "EQ_RESOLVE"], [39, 10, 1, "", "EVALUATE"], [39, 10, 1, "", "FACTORING"], [39, 10, 1, "", "FALSE_ELIM"], [39, 10, 1, "", "FALSE_INTRO"], [39, 10, 1, "", "HO_APP_ENCODE"], [39, 10, 1, "", "HO_CONG"], [39, 10, 1, "", "IMPLIES_ELIM"], [39, 10, 1, "", "INSTANTIATE"], [39, 10, 1, "", "INT_TIGHT_LB"], [39, 10, 1, "", "INT_TIGHT_UB"], [39, 10, 1, "", "ITE_ELIM1"], [39, 10, 1, "", "ITE_ELIM2"], [39, 10, 1, "", "LFSC_RULE"], [39, 10, 1, "", "MACRO_ARITH_SCALE_SUM_UB"], [39, 10, 1, "", "MACRO_BV_BITBLAST"], [39, 10, 1, "", "MACRO_RESOLUTION"], [39, 10, 1, "", "MACRO_RESOLUTION_TRUST"], [39, 10, 1, "", "MACRO_REWRITE"], [39, 10, 1, "", "MACRO_SR_EQ_INTRO"], [39, 10, 1, "", "MACRO_SR_PRED_ELIM"], [39, 10, 1, "", "MACRO_SR_PRED_INTRO"], [39, 10, 1, "", "MACRO_SR_PRED_TRANSFORM"], [39, 10, 1, "", "MACRO_STRING_INFERENCE"], [39, 10, 1, "", "MODUS_PONENS"], [39, 10, 1, "", "NOT_AND"], [39, 10, 1, "", "NOT_EQUIV_ELIM1"], [39, 10, 1, "", "NOT_EQUIV_ELIM2"], [39, 10, 1, "", "NOT_IMPLIES_ELIM1"], [39, 10, 1, "", "NOT_IMPLIES_ELIM2"], [39, 10, 1, "", "NOT_ITE_ELIM1"], [39, 10, 1, "", "NOT_ITE_ELIM2"], [39, 10, 1, "", "NOT_NOT_ELIM"], [39, 10, 1, "", "NOT_OR_ELIM"], [39, 10, 1, "", "NOT_XOR_ELIM1"], [39, 10, 1, "", "NOT_XOR_ELIM2"], [39, 10, 1, "", "REFL"], [39, 10, 1, "", "REMOVE_TERM_FORMULA_AXIOM"], [39, 10, 1, "", "REORDERING"], [39, 10, 1, "", "RESOLUTION"], [39, 10, 1, "", "RE_ELIM"], [39, 10, 1, "", "RE_INTER"], [39, 10, 1, "", "RE_UNFOLD_NEG"], [39, 10, 1, "", "RE_UNFOLD_NEG_CONCAT_FIXED"], [39, 10, 1, "", "RE_UNFOLD_POS"], [39, 10, 1, "", "SAT_REFUTATION"], [39, 10, 1, "", "SCOPE"], [39, 10, 1, "", "SKOLEMIZE"], [39, 10, 1, "", "SKOLEM_INTRO"], [39, 10, 1, "", "SPLIT"], [39, 10, 1, "", "STRING_CODE_INJ"], [39, 10, 1, "", "STRING_DECOMPOSE"], [39, 10, 1, "", "STRING_EAGER_REDUCTION"], [39, 10, 1, "", "STRING_LENGTH_NON_EMPTY"], [39, 10, 1, "", "STRING_LENGTH_POS"], [39, 10, 1, "", "STRING_REDUCTION"], [39, 10, 1, "", "STRING_SEQ_UNIT_INJ"], [39, 10, 1, "", "SUBS"], [39, 10, 1, "", "SYMM"], [39, 10, 1, "", "TRANS"], [39, 10, 1, "", "TRUE_ELIM"], [39, 10, 1, "", "TRUE_INTRO"], [39, 10, 1, "", "TRUST"], [39, 10, 1, "", "TRUST_THEORY_REWRITE"], [39, 10, 1, "", "UNKNOWN"], [39, 10, 1, "", "XOR_ELIM1"], [39, 10, 1, "", "XOR_ELIM2"]], "cvc5.Result": [[42, 9, 1, "", "getUnknownExplanation"], [42, 9, 1, "", "isNull"], [42, 9, 1, "", "isSat"], [42, 9, 1, "", "isUnknown"], [42, 9, 1, "", "isUnsat"]], "cvc5.RoundingMode": [[43, 10, 1, "", "ROUND_NEAREST_TIES_TO_AWAY"], [43, 10, 1, "", "ROUND_NEAREST_TIES_TO_EVEN"], [43, 10, 1, "", "ROUND_TOWARD_NEGATIVE"], [43, 10, 1, "", "ROUND_TOWARD_POSITIVE"], [43, 10, 1, "", "ROUND_TOWARD_ZERO"]], "cvc5.Solver": [[44, 9, 1, "", "addSygusAssume"], [44, 9, 1, "", "addSygusConstraint"], [44, 9, 1, "", "addSygusInvConstraint"], [44, 9, 1, "", "assertFormula"], [44, 9, 1, "", "blockModel"], [44, 9, 1, "", "blockModelValues"], [44, 9, 1, "", "checkSat"], [44, 9, 1, "", "checkSatAssuming"], [44, 9, 1, "", "checkSynth"], [44, 9, 1, "", "checkSynthNext"], [44, 9, 1, "", "declareDatatype"], [44, 9, 1, "", "declareFun"], [44, 9, 1, "", "declarePool"], [44, 9, 1, "", "declareSepHeap"], [44, 9, 1, "", "declareSort"], [44, 9, 1, "", "declareSygusVar"], [44, 9, 1, "", "defineFun"], [44, 9, 1, "", "defineFunRec"], [44, 9, 1, "", "defineFunsRec"], [44, 9, 1, "", "findSynth"], [44, 9, 1, "", "findSynthNext"], [44, 9, 1, "", "getAbduct"], [44, 9, 1, "", "getAbductNext"], [44, 9, 1, "", "getAssertions"], [44, 9, 1, "", "getBooleanSort"], [44, 9, 1, "", "getDifficulty"], [44, 9, 1, "", "getInfo"], [44, 9, 1, "", "getInstantiations"], [44, 9, 1, "", "getIntegerSort"], [44, 9, 1, "", "getInterpolant"], [44, 9, 1, "", "getInterpolantNext"], [44, 9, 1, "", "getLearnedLiterals"], [44, 9, 1, "", "getLogic"], [44, 9, 1, "", "getModel"], [44, 9, 1, "", "getModelDomainElements"], [44, 9, 1, "", "getOption"], [44, 9, 1, "", "getOptionInfo"], [44, 9, 1, "", "getOptionNames"], [44, 9, 1, "", "getProof"], [44, 9, 1, "", "getQuantifierElimination"], [44, 9, 1, "", "getQuantifierEliminationDisjunct"], [44, 9, 1, "", "getRealSort"], [44, 9, 1, "", "getRegExpSort"], [44, 9, 1, "", "getRoundingModeSort"], [44, 9, 1, "", "getStatistics"], [44, 9, 1, "", "getStringSort"], [44, 9, 1, "", "getSygusAssumptions"], [44, 9, 1, "", "getSygusConstraints"], [44, 9, 1, "", "getSynthSolution"], [44, 9, 1, "", "getSynthSolutions"], [44, 9, 1, "", "getTimeoutCore"], [44, 9, 1, "", "getTimeoutCoreAssuming"], [44, 9, 1, "", "getUnsatAssumptions"], [44, 9, 1, "", "getUnsatCore"], [44, 9, 1, "", "getUnsatCoreLemmas"], [44, 9, 1, "", "getValue"], [44, 9, 1, "", "getValueSepHeap"], [44, 9, 1, "", "getValueSepNil"], [44, 9, 1, "", "getVersion"], [44, 9, 1, "", "isLogicSet"], [44, 9, 1, "", "isModelCoreSymbol"], [44, 9, 1, "", "mkAbstractSort"], [44, 9, 1, "", "mkArraySort"], [44, 9, 1, "", "mkBagSort"], [44, 9, 1, "", "mkBitVector"], [44, 9, 1, "", "mkBitVectorSort"], [44, 9, 1, "", "mkBoolean"], [44, 9, 1, "", "mkCardinalityConstraint"], [44, 9, 1, "", "mkConst"], [44, 9, 1, "", "mkConstArray"], [44, 9, 1, "", "mkDatatypeConstructorDecl"], [44, 9, 1, "", "mkDatatypeDecl"], [44, 9, 1, "", "mkDatatypeSort"], [44, 9, 1, "", "mkDatatypeSorts"], [44, 9, 1, "", "mkEmptyBag"], [44, 9, 1, "", "mkEmptySequence"], [44, 9, 1, "", "mkEmptySet"], [44, 9, 1, "", "mkFalse"], [44, 9, 1, "", "mkFiniteFieldElem"], [44, 9, 1, "", "mkFiniteFieldSort"], [44, 9, 1, "", "mkFloatingPoint"], [44, 9, 1, "", "mkFloatingPointNaN"], [44, 9, 1, "", "mkFloatingPointNegInf"], [44, 9, 1, "", "mkFloatingPointNegZero"], [44, 9, 1, "", "mkFloatingPointPosInf"], [44, 9, 1, "", "mkFloatingPointPosZero"], [44, 9, 1, "", "mkFloatingPointSort"], [44, 9, 1, "", "mkFunctionSort"], [44, 9, 1, "", "mkGrammar"], [44, 9, 1, "", "mkInteger"], [44, 9, 1, "", "mkOp"], [44, 9, 1, "", "mkParamSort"], [44, 9, 1, "", "mkPi"], [44, 9, 1, "", "mkPredicateSort"], [44, 9, 1, "", "mkReal"], [44, 9, 1, "", "mkRecordSort"], [44, 9, 1, "", "mkRegexpAll"], [44, 9, 1, "", "mkRegexpAllchar"], [44, 9, 1, "", "mkRegexpNone"], [44, 9, 1, "", "mkRoundingMode"], [44, 9, 1, "", "mkSepEmp"], [44, 9, 1, "", "mkSepNil"], [44, 9, 1, "", "mkSequenceSort"], [44, 9, 1, "", "mkSetSort"], [44, 9, 1, "", "mkString"], [44, 9, 1, "", "mkTerm"], [44, 9, 1, "", "mkTrue"], [44, 9, 1, "", "mkTuple"], [44, 9, 1, "", "mkTupleSort"], [44, 9, 1, "", "mkUninterpretedSort"], [44, 9, 1, "", "mkUninterpretedSortConstructorSort"], [44, 9, 1, "", "mkUniverseSet"], [44, 9, 1, "", "mkUnresolvedDatatypeSort"], [44, 9, 1, "", "mkVar"], [44, 9, 1, "", "pop"], [44, 9, 1, "", "proofToString"], [44, 9, 1, "", "push"], [44, 9, 1, "", "resetAssertions"], [44, 9, 1, "", "setInfo"], [44, 9, 1, "", "setLogic"], [44, 9, 1, "", "setOption"], [44, 9, 1, "", "simplify"], [44, 9, 1, "", "synthFun"]], "cvc5.Sort": [[45, 9, 1, "", "getAbstractedKind"], [45, 9, 1, "", "getArrayElementSort"], [45, 9, 1, "", "getArrayIndexSort"], [45, 9, 1, "", "getBagElementSort"], [45, 9, 1, "", "getBitVectorSize"], [45, 9, 1, "", "getDatatype"], [45, 9, 1, "", "getDatatypeArity"], [45, 9, 1, "", "getDatatypeConstructorArity"], [45, 9, 1, "", "getDatatypeConstructorCodomainSort"], [45, 9, 1, "", "getDatatypeConstructorDomainSorts"], [45, 9, 1, "", "getDatatypeSelectorCodomainSort"], [45, 9, 1, "", "getDatatypeSelectorDomainSort"], [45, 9, 1, "", "getDatatypeTesterCodomainSort"], [45, 9, 1, "", "getDatatypeTesterDomainSort"], [45, 9, 1, "", "getFiniteFieldSize"], [45, 9, 1, "", "getFloatingPointExponentSize"], [45, 9, 1, "", "getFloatingPointSignificandSize"], [45, 9, 1, "", "getFunctionArity"], [45, 9, 1, "", "getFunctionCodomainSort"], [45, 9, 1, "", "getFunctionDomainSorts"], [45, 9, 1, "", "getInstantiatedParameters"], [45, 9, 1, "", "getKind"], [45, 9, 1, "", "getSequenceElementSort"], [45, 9, 1, "", "getSetElementSort"], [45, 9, 1, "", "getSymbol"], [45, 9, 1, "", "getTupleLength"], [45, 9, 1, "", "getTupleSorts"], [45, 9, 1, "", "getUninterpretedSortConstructor"], [45, 9, 1, "", "getUninterpretedSortConstructorArity"], [45, 9, 1, "", "hasSymbol"], [45, 9, 1, "", "instantiate"], [45, 9, 1, "", "isAbstract"], [45, 9, 1, "", "isArray"], [45, 9, 1, "", "isBag"], [45, 9, 1, "", "isBitVector"], [45, 9, 1, "", "isBoolean"], [45, 9, 1, "", "isDatatype"], [45, 9, 1, "", "isDatatypeConstructor"], [45, 9, 1, "", "isDatatypeSelector"], [45, 9, 1, "", "isDatatypeTester"], [45, 9, 1, "", "isDatatypeUpdater"], [45, 9, 1, "", "isFiniteField"], [45, 9, 1, "", "isFloatingPoint"], [45, 9, 1, "", "isFunction"], [45, 9, 1, "", "isInstantiated"], [45, 9, 1, "", "isInteger"], [45, 9, 1, "", "isNull"], [45, 9, 1, "", "isPredicate"], [45, 9, 1, "", "isReal"], [45, 9, 1, "", "isRecord"], [45, 9, 1, "", "isRegExp"], [45, 9, 1, "", "isRoundingMode"], [45, 9, 1, "", "isSequence"], [45, 9, 1, "", "isSet"], [45, 9, 1, "", "isString"], [45, 9, 1, "", "isTuple"], [45, 9, 1, "", "isUninterpretedSort"], [45, 9, 1, "", "isUninterpretedSortConstructor"], [45, 9, 1, "", "substitute"]], "cvc5.Statistics": [[46, 9, 1, "", "__getitem__"], [46, 9, 1, "", "get"]], "cvc5.SynthResult": [[47, 9, 1, "", "hasNoSolution"], [47, 9, 1, "", "hasSolution"], [47, 9, 1, "", "isNull"], [47, 9, 1, "", "isUnknown"]], "cvc5.Term": [[48, 9, 1, "", "__getitem__"], [48, 9, 1, "", "__iter__"], [48, 9, 1, "", "andTerm"], [48, 9, 1, "", "eqTerm"], [48, 9, 1, "", "getBitVectorValue"], [48, 9, 1, "", "getBooleanValue"], [48, 9, 1, "", "getCardinalityConstraint"], [48, 9, 1, "", "getConstArrayBase"], [48, 9, 1, "", "getFiniteFieldValue"], [48, 9, 1, "", "getFloatingPointValue"], [48, 9, 1, "", "getId"], [48, 9, 1, "", "getIntegerValue"], [48, 9, 1, "", "getKind"], [48, 9, 1, "", "getNumChildren"], [48, 9, 1, "", "getOp"], [48, 9, 1, "", "getRealAlgebraicNumberDefiningPolynomial"], [48, 9, 1, "", "getRealAlgebraicNumberLowerBound"], [48, 9, 1, "", "getRealAlgebraicNumberUpperBound"], [48, 9, 1, "", "getRealOrIntegerValueSign"], [48, 9, 1, "", "getRealValue"], [48, 9, 1, "", "getRoundingModeValue"], [48, 9, 1, "", "getSequenceValue"], [48, 9, 1, "", "getSetValue"], [48, 9, 1, "", "getSort"], [48, 9, 1, "", "getStringValue"], [48, 9, 1, "", "getSymbol"], [48, 9, 1, "", "getTupleValue"], [48, 9, 1, "", "getUninterpretedSortValue"], [48, 9, 1, "", "hasOp"], [48, 9, 1, "", "hasSymbol"], [48, 9, 1, "", "impTerm"], [48, 9, 1, "", "isBitVectorValue"], [48, 9, 1, "", "isBooleanValue"], [48, 9, 1, "", "isCardinalityConstraint"], [48, 9, 1, "", "isConstArray"], [48, 9, 1, "", "isFiniteFieldValue"], [48, 9, 1, "", "isFloatingPointNaN"], [48, 9, 1, "", "isFloatingPointNegInf"], [48, 9, 1, "", "isFloatingPointNegZero"], [48, 9, 1, "", "isFloatingPointPosInf"], [48, 9, 1, "", "isFloatingPointPosZero"], [48, 9, 1, "", "isFloatingPointValue"], [48, 9, 1, "", "isIntegerValue"], [48, 9, 1, "", "isNull"], [48, 9, 1, "", "isRealAlgebraicNumber"], [48, 9, 1, "", "isRealValue"], [48, 9, 1, "", "isRoundingModeValue"], [48, 9, 1, "", "isSequenceValue"], [48, 9, 1, "", "isSetValue"], [48, 9, 1, "", "isStringValue"], [48, 9, 1, "", "isTupleValue"], [48, 9, 1, "", "isUninterpretedSortValue"], [48, 9, 1, "", "iteTerm"], [48, 9, 1, "", "notTerm"], [48, 9, 1, "", "orTerm"], [48, 9, 1, "", "substitute"], [48, 9, 1, "", "toPythonObj"], [48, 9, 1, "", "xorTerm"]], "cvc5.UnknownExplanation": [[49, 10, 1, "", "INCOMPLETE"], [49, 10, 1, "", "INTERRUPTED"], [49, 10, 1, "", "MEMOUT"], [49, 10, 1, "", "OTHER"], [49, 10, 1, "", "REQUIRES_CHECK_AGAIN"], [49, 10, 1, "", "REQUIRES_FULL_CHECK"], [49, 10, 1, "", "RESOURCEOUT"], [49, 10, 1, "", "TIMEOUT"], [49, 10, 1, "", "UNKNOWN_REASON"], [49, 10, 1, "", "UNSUPPORTED"]], "cvc5.pythonic": [[51, 11, 1, "", "Add"], [54, 11, 1, "", "And"], [51, 11, 1, "", "Arccosecant"], [51, 11, 1, "", "Arccosine"], [51, 11, 1, "", "Arccotangent"], [51, 11, 1, "", "Arcsecant"], [51, 11, 1, "", "Arcsine"], [51, 11, 1, "", "Arctangent"], [51, 8, 1, "", "ArithRef"], [51, 8, 1, "", "ArithSortRef"], [52, 11, 1, "", "Array"], [52, 8, 1, "", "ArrayRef"], [52, 11, 1, "", "ArraySort"], [52, 8, 1, "", "ArraySortRef"], [53, 11, 1, "", "BV2Int"], [53, 11, 1, "", "BVAdd"], [53, 11, 1, "", "BVAnd"], [53, 11, 1, "", "BVMult"], [53, 11, 1, "", "BVNeg"], [53, 11, 1, "", "BVNot"], [53, 11, 1, "", "BVOr"], [53, 11, 1, "", "BVRedAnd"], [53, 11, 1, "", "BVRedOr"], [53, 11, 1, "", "BVSub"], [53, 11, 1, "", "BVXor"], [53, 11, 1, "", "BitVec"], [53, 8, 1, "", "BitVecNumRef"], [53, 8, 1, "", "BitVecRef"], [53, 11, 1, "", "BitVecSort"], [53, 8, 1, "", "BitVecSortRef"], [53, 11, 1, "", "BitVecVal"], [53, 11, 1, "", "BitVecs"], [54, 11, 1, "", "Bool"], [54, 8, 1, "", "BoolRef"], [54, 11, 1, "", "BoolSort"], [54, 8, 1, "", "BoolSortRef"], [54, 11, 1, "", "BoolVal"], [54, 11, 1, "", "BoolVector"], [54, 11, 1, "", "Bools"], [51, 11, 1, "", "Cbrt"], [63, 8, 1, "", "CheckSatResult"], [53, 11, 1, "", "Concat"], [54, 11, 1, "", "Const"], [52, 11, 1, "", "ConstArray"], [54, 11, 1, "", "Consts"], [51, 11, 1, "", "Cosecant"], [51, 11, 1, "", "Cosine"], [51, 11, 1, "", "Cotangent"], [55, 11, 1, "", "CreateDatatypes"], [55, 8, 1, "", "Datatype"], [55, 8, 1, "", "DatatypeConstructorRef"], [55, 8, 1, "", "DatatypeRecognizerRef"], [55, 8, 1, "", "DatatypeRef"], [55, 8, 1, "", "DatatypeSelectorRef"], [55, 8, 1, "", "DatatypeSortRef"], [55, 11, 1, "", "DisjointSum"], [54, 11, 1, "", "Distinct"], [51, 11, 1, "", "Div"], [62, 11, 1, "", "EmptySet"], [60, 11, 1, "", "Exists"], [51, 11, 1, "", "Exponential"], [54, 8, 1, "", "ExprRef"], [53, 11, 1, "", "Extract"], [56, 11, 1, "", "FFAdd"], [56, 11, 1, "", "FFMult"], [56, 11, 1, "", "FFNeg"], [56, 11, 1, "", "FFSub"], [57, 11, 1, "", "FP"], [57, 8, 1, "", "FPNumRef"], [57, 8, 1, "", "FPRMRef"], [57, 8, 1, "", "FPRef"], [57, 11, 1, "", "FPSort"], [57, 8, 1, "", "FPSortRef"], [57, 11, 1, "", "FPVal"], [57, 11, 1, "", "FPs"], [56, 11, 1, "", "FiniteFieldElem"], [56, 11, 1, "", "FiniteFieldElems"], [56, 8, 1, "", "FiniteFieldNumRef"], [56, 8, 1, "", "FiniteFieldRef"], [56, 11, 1, "", "FiniteFieldSort"], [56, 8, 1, "", "FiniteFieldSortRef"], [56, 11, 1, "", "FiniteFieldVal"], [57, 11, 1, "", "Float128"], [57, 11, 1, "", "Float16"], [57, 11, 1, "", "Float32"], [57, 11, 1, "", "Float64"], [57, 11, 1, "", "FloatDouble"], [57, 11, 1, "", "FloatHalf"], [57, 11, 1, "", "FloatQuadruple"], [57, 11, 1, "", "FloatSingle"], [60, 11, 1, "", "ForAll"], [54, 11, 1, "", "FreshBool"], [54, 11, 1, "", "FreshConst"], [54, 11, 1, "", "FreshFunction"], [51, 11, 1, "", "FreshInt"], [51, 11, 1, "", "FreshReal"], [62, 11, 1, "", "FullSet"], [54, 8, 1, "", "FuncDeclRef"], [54, 11, 1, "", "Function"], [51, 11, 1, "", "Geq"], [51, 11, 1, "", "Gt"], [54, 11, 1, "", "If"], [54, 11, 1, "", "Implies"], [51, 11, 1, "", "Int"], [53, 11, 1, "", "Int2BV"], [51, 8, 1, "", "IntNumRef"], [51, 11, 1, "", "IntSort"], [51, 11, 1, "", "IntVal"], [51, 11, 1, "", "IntVector"], [51, 11, 1, "", "Ints"], [51, 11, 1, "", "IntsModulus"], [51, 11, 1, "", "IsInt"], [62, 11, 1, "", "IsMember"], [62, 11, 1, "", "IsSubset"], [52, 11, 1, "", "K"], [53, 11, 1, "", "LShR"], [60, 11, 1, "", "Lambda"], [51, 11, 1, "", "Leq"], [51, 11, 1, "", "Lt"], [63, 8, 1, "", "ModelRef"], [51, 11, 1, "", "Mult"], [54, 11, 1, "", "Not"], [54, 11, 1, "", "Or"], [51, 11, 1, "", "Pi"], [51, 11, 1, "", "Pow"], [63, 11, 1, "", "Product"], [51, 11, 1, "", "Q"], [60, 8, 1, "", "QuantifierRef"], [57, 11, 1, "", "RNA"], [57, 11, 1, "", "RNE"], [57, 11, 1, "", "RTN"], [57, 11, 1, "", "RTP"], [57, 11, 1, "", "RTZ"], [51, 8, 1, "", "RatNumRef"], [51, 11, 1, "", "RatVal"], [51, 11, 1, "", "Real"], [51, 11, 1, "", "RealSort"], [51, 11, 1, "", "RealVal"], [51, 11, 1, "", "RealVector"], [51, 11, 1, "", "Reals"], [53, 11, 1, "", "RepeatBitVec"], [53, 11, 1, "", "RotateLeft"], [53, 11, 1, "", "RotateRight"], [57, 11, 1, "", "RoundNearestTiesToAway"], [57, 11, 1, "", "RoundNearestTiesToEven"], [57, 11, 1, "", "RoundTowardNegative"], [57, 11, 1, "", "RoundTowardPositive"], [57, 11, 1, "", "RoundTowardZero"], [53, 11, 1, "", "SDiv"], [53, 11, 1, "", "SGE"], [53, 11, 1, "", "SGT"], [53, 11, 1, "", "SLE"], [53, 11, 1, "", "SLT"], [58, 8, 1, "", "SMTException"], [53, 11, 1, "", "SMod"], [53, 11, 1, "", "SRem"], [51, 11, 1, "", "Secant"], [52, 11, 1, "", "Select"], [62, 11, 1, "", "Set"], [62, 11, 1, "", "SetAdd"], [62, 11, 1, "", "SetComplement"], [62, 11, 1, "", "SetDel"], [62, 11, 1, "", "SetDifference"], [62, 11, 1, "", "SetIntersect"], [62, 11, 1, "", "SetMinus"], [62, 8, 1, "", "SetRef"], [62, 11, 1, "", "SetSort"], [62, 8, 1, "", "SetSortRef"], [62, 11, 1, "", "SetUnion"], [53, 11, 1, "", "SignExt"], [63, 11, 1, "", "SimpleSolver"], [51, 11, 1, "", "Sine"], [62, 11, 1, "", "Singleton"], [63, 8, 1, "", "Solver"], [63, 11, 1, "", "SolverFor"], [54, 8, 1, "", "SortRef"], [51, 11, 1, "", "Sqrt"], [52, 11, 1, "", "Store"], [51, 11, 1, "", "Sub"], [63, 11, 1, "", "Sum"], [51, 11, 1, "", "Tangent"], [51, 11, 1, "", "ToInt"], [51, 11, 1, "", "ToReal"], [55, 11, 1, "", "TupleSort"], [53, 11, 1, "", "UDiv"], [53, 11, 1, "", "UGE"], [53, 11, 1, "", "UGT"], [53, 11, 1, "", "ULE"], [53, 11, 1, "", "ULT"], [51, 11, 1, "", "UMinus"], [53, 11, 1, "", "URem"], [52, 11, 1, "", "Update"], [54, 11, 1, "", "Xor"], [53, 11, 1, "", "ZeroExt"], [63, 11, 1, "", "evaluate"], [57, 11, 1, "", "fpAbs"], [57, 11, 1, "", "fpAdd"], [57, 11, 1, "", "fpBVToFP"], [57, 11, 1, "", "fpDiv"], [57, 11, 1, "", "fpEQ"], [57, 11, 1, "", "fpFMA"], [57, 11, 1, "", "fpFP"], [57, 11, 1, "", "fpFPToFP"], [57, 11, 1, "", "fpGEQ"], [57, 11, 1, "", "fpGT"], [57, 11, 1, "", "fpInfinity"], [57, 11, 1, "", "fpIsInf"], [57, 11, 1, "", "fpIsNaN"], [57, 11, 1, "", "fpIsNegative"], [57, 11, 1, "", "fpIsNormal"], [57, 11, 1, "", "fpIsPositive"], [57, 11, 1, "", "fpIsSubnormal"], [57, 11, 1, "", "fpIsZero"], [57, 11, 1, "", "fpLEQ"], [57, 11, 1, "", "fpLT"], [57, 11, 1, "", "fpMax"], [57, 11, 1, "", "fpMin"], [57, 11, 1, "", "fpMinusInfinity"], [57, 11, 1, "", "fpMinusZero"], [57, 11, 1, "", "fpMul"], [57, 11, 1, "", "fpNEQ"], [57, 11, 1, "", "fpNaN"], [57, 11, 1, "", "fpNeg"], [57, 11, 1, "", "fpPlusInfinity"], [57, 11, 1, "", "fpPlusZero"], [57, 11, 1, "", "fpRealToFP"], [57, 11, 1, "", "fpRem"], [57, 11, 1, "", "fpRoundToIntegral"], [57, 11, 1, "", "fpSignedToFP"], [57, 11, 1, "", "fpSqrt"], [57, 11, 1, "", "fpSub"], [57, 11, 1, "", "fpToFP"], [57, 11, 1, "", "fpToFPUnsigned"], [57, 11, 1, "", "fpToReal"], [57, 11, 1, "", "fpToSBV"], [57, 11, 1, "", "fpToUBV"], [57, 11, 1, "", "fpUnsignedToFP"], [57, 11, 1, "", "fpZero"], [57, 11, 1, "", "get_default_fp_sort"], [57, 11, 1, "", "get_default_rounding_mode"], [52, 11, 1, "", "is_K"], [51, 11, 1, "", "is_add"], [54, 11, 1, "", "is_and"], [58, 11, 1, "", "is_app"], [58, 11, 1, "", "is_app_of"], [51, 11, 1, "", "is_arith"], [51, 11, 1, "", "is_arith_sort"], [52, 11, 1, "", "is_array"], [52, 11, 1, "", "is_array_sort"], [54, 11, 1, "", "is_bool"], [54, 11, 1, "", "is_bool_value"], [53, 11, 1, "", "is_bv"], [53, 11, 1, "", "is_bv_sort"], [53, 11, 1, "", "is_bv_value"], [54, 11, 1, "", "is_const"], [52, 11, 1, "", "is_const_array"], [54, 11, 1, "", "is_distinct"], [51, 11, 1, "", "is_div"], [54, 11, 1, "", "is_eq"], [58, 11, 1, "", "is_expr"], [54, 11, 1, "", "is_false"], [56, 11, 1, "", "is_ff"], [56, 11, 1, "", "is_ff_sort"], [56, 11, 1, "", "is_ff_value"], [57, 11, 1, "", "is_fp"], [57, 11, 1, "", "is_fp_sort"], [57, 11, 1, "", "is_fp_value"], [57, 11, 1, "", "is_fprm"], [57, 11, 1, "", "is_fprm_sort"], [57, 11, 1, "", "is_fprm_value"], [54, 11, 1, "", "is_func_decl"], [51, 11, 1, "", "is_ge"], [51, 11, 1, "", "is_gt"], [51, 11, 1, "", "is_idiv"], [54, 11, 1, "", "is_implies"], [51, 11, 1, "", "is_int"], [51, 11, 1, "", "is_int_value"], [51, 11, 1, "", "is_is_int"], [51, 11, 1, "", "is_le"], [51, 11, 1, "", "is_lt"], [51, 11, 1, "", "is_mod"], [51, 11, 1, "", "is_mul"], [54, 11, 1, "", "is_not"], [54, 11, 1, "", "is_or"], [60, 11, 1, "", "is_quantifier"], [51, 11, 1, "", "is_rational_value"], [51, 11, 1, "", "is_real"], [52, 11, 1, "", "is_select"], [58, 11, 1, "", "is_sort"], [52, 11, 1, "", "is_store"], [51, 11, 1, "", "is_sub"], [51, 11, 1, "", "is_to_int"], [51, 11, 1, "", "is_to_real"], [54, 11, 1, "", "is_true"], [52, 11, 1, "", "is_update"], [60, 11, 1, "", "is_var"], [54, 11, 1, "", "mk_not"], [63, 11, 1, "", "prove"], [63, 12, 1, "", "sat"], [57, 11, 1, "", "set_default_fp_sort"], [57, 11, 1, "", "set_default_rounding_mode"], [63, 11, 1, "", "simplify"], [63, 11, 1, "", "solve"], [63, 11, 1, "", "solve_using"], [63, 11, 1, "", "substitute"], [63, 12, 1, "", "unknown"], [63, 12, 1, "", "unsat"]], "cvc5.pythonic.ArithRef": [[51, 9, 1, "", "__add__"], [51, 9, 1, "", "__div__"], [51, 9, 1, "", "__ge__"], [51, 9, 1, "", "__gt__"], [51, 9, 1, "", "__le__"], [51, 9, 1, "", "__lt__"], [51, 9, 1, "", "__mod__"], [51, 9, 1, "", "__mul__"], [51, 9, 1, "", "__neg__"], [51, 9, 1, "", "__pos__"], [51, 9, 1, "", "__pow__"], [51, 9, 1, "", "__radd__"], [51, 9, 1, "", "__rdiv__"], [51, 9, 1, "", "__rmod__"], [51, 9, 1, "", "__rmul__"], [51, 9, 1, "", "__rpow__"], [51, 9, 1, "", "__rsub__"], [51, 9, 1, "", "__rtruediv__"], [51, 9, 1, "", "__sub__"], [51, 9, 1, "", "__truediv__"], [51, 9, 1, "", "is_int"], [51, 9, 1, "", "is_real"], [51, 9, 1, "", "sort"]], "cvc5.pythonic.ArithSortRef": [[51, 9, 1, "", "cast"], [51, 9, 1, "", "is_int"], [51, 9, 1, "", "is_real"], [51, 9, 1, "", "subsort"]], "cvc5.pythonic.ArrayRef": [[52, 9, 1, "", "__getitem__"], [52, 9, 1, "", "arg"], [52, 9, 1, "", "default"], [52, 9, 1, "", "domain"], [52, 9, 1, "", "range"], [52, 9, 1, "", "sort"]], "cvc5.pythonic.ArraySortRef": [[52, 9, 1, "", "domain"], [52, 9, 1, "", "range"]], "cvc5.pythonic.BitVecNumRef": [[53, 9, 1, "", "as_long"], [53, 9, 1, "", "as_signed_long"]], "cvc5.pythonic.BitVecRef": [[53, 9, 1, "", "__add__"], [53, 9, 1, "", "__and__"], [53, 9, 1, "", "__div__"], [53, 9, 1, "", "__ge__"], [53, 9, 1, "", "__gt__"], [53, 9, 1, "", "__invert__"], [53, 9, 1, "", "__le__"], [53, 9, 1, "", "__lshift__"], [53, 9, 1, "", "__lt__"], [53, 9, 1, "", "__mod__"], [53, 9, 1, "", "__mul__"], [53, 9, 1, "", "__neg__"], [53, 9, 1, "", "__or__"], [53, 9, 1, "", "__pos__"], [53, 9, 1, "", "__radd__"], [53, 9, 1, "", "__rand__"], [53, 9, 1, "", "__rdiv__"], [53, 9, 1, "", "__rlshift__"], [53, 9, 1, "", "__rmod__"], [53, 9, 1, "", "__rmul__"], [53, 9, 1, "", "__ror__"], [53, 9, 1, "", "__rrshift__"], [53, 9, 1, "", "__rshift__"], [53, 9, 1, "", "__rsub__"], [53, 9, 1, "", "__rtruediv__"], [53, 9, 1, "", "__rxor__"], [53, 9, 1, "", "__sub__"], [53, 9, 1, "", "__truediv__"], [53, 9, 1, "", "__xor__"], [53, 9, 1, "", "size"], [53, 9, 1, "", "sort"]], "cvc5.pythonic.BitVecSortRef": [[53, 9, 1, "", "cast"], [53, 9, 1, "", "size"], [53, 9, 1, "", "subsort"]], "cvc5.pythonic.BoolRef": [[54, 9, 1, "", "__mul__"], [54, 9, 1, "", "__rmul__"], [54, 9, 1, "", "sort"]], "cvc5.pythonic.BoolSortRef": [[54, 9, 1, "", "cast"], [54, 9, 1, "", "is_bool"], [54, 9, 1, "", "is_int"], [54, 9, 1, "", "subsort"]], "cvc5.pythonic.CheckSatResult": [[63, 9, 1, "", "__eq__"], [63, 10, 1, "", "__hash__"], [63, 9, 1, "", "__init__"], [63, 9, 1, "", "__ne__"], [63, 9, 1, "", "__repr__"], [63, 10, 1, "", "__weakref__"]], "cvc5.pythonic.Datatype": [[55, 9, 1, "", "__init__"], [55, 9, 1, "", "__repr__"], [55, 10, 1, "", "__weakref__"], [55, 9, 1, "", "create"], [55, 9, 1, "", "declare"]], "cvc5.pythonic.DatatypeConstructorRef": [[55, 9, 1, "", "__call__"], [55, 9, 1, "", "__init__"], [55, 9, 1, "", "arity"], [55, 9, 1, "", "domain"], [55, 9, 1, "", "range"]], "cvc5.pythonic.DatatypeRecognizerRef": [[55, 9, 1, "", "__call__"], [55, 9, 1, "", "__init__"], [55, 9, 1, "", "arity"], [55, 9, 1, "", "domain"], [55, 9, 1, "", "range"]], "cvc5.pythonic.DatatypeRef": [[55, 9, 1, "", "sort"]], "cvc5.pythonic.DatatypeSelectorRef": [[55, 9, 1, "", "__call__"], [55, 9, 1, "", "__init__"], [55, 9, 1, "", "arity"], [55, 9, 1, "", "domain"], [55, 9, 1, "", "range"]], "cvc5.pythonic.DatatypeSortRef": [[55, 9, 1, "", "__init__"], [55, 9, 1, "", "accessor"], [55, 9, 1, "", "constructor"], [55, 9, 1, "", "num_constructors"], [55, 9, 1, "", "recognizer"]], "cvc5.pythonic.ExprRef": [[54, 9, 1, "", "__bool__"], [54, 9, 1, "", "__eq__"], [54, 9, 1, "", "__hash__"], [54, 9, 1, "", "__init__"], [54, 9, 1, "", "__ne__"], [54, 9, 1, "", "__nonzero__"], [54, 9, 1, "", "__repr__"], [54, 9, 1, "", "__str__"], [54, 10, 1, "", "__weakref__"], [54, 9, 1, "", "arg"], [54, 9, 1, "", "as_ast"], [54, 9, 1, "", "children"], [54, 9, 1, "", "decl"], [54, 9, 1, "", "eq"], [54, 9, 1, "", "get_id"], [54, 9, 1, "", "hash"], [54, 9, 1, "", "is_int"], [54, 9, 1, "", "kind"], [54, 9, 1, "", "num_args"], [54, 9, 1, "", "sexpr"], [54, 9, 1, "", "sort"]], "cvc5.pythonic.FPNumRef": [[57, 9, 1, "", "as_string"], [57, 9, 1, "", "exponent"], [57, 9, 1, "", "exponent_as_long"], [57, 9, 1, "", "isInf"], [57, 9, 1, "", "isNaN"], [57, 9, 1, "", "isNegative"], [57, 9, 1, "", "isNormal"], [57, 9, 1, "", "isPositive"], [57, 9, 1, "", "isSubnormal"], [57, 9, 1, "", "isZero"], [57, 9, 1, "", "sign"], [57, 9, 1, "", "significand"], [57, 9, 1, "", "significand_as_long"]], "cvc5.pythonic.FPRMRef": [[57, 9, 1, "", "as_string"]], "cvc5.pythonic.FPRef": [[57, 9, 1, "", "__add__"], [57, 9, 1, "", "__div__"], [57, 9, 1, "", "__ge__"], [57, 9, 1, "", "__gt__"], [57, 9, 1, "", "__le__"], [57, 9, 1, "", "__lt__"], [57, 9, 1, "", "__mod__"], [57, 9, 1, "", "__mul__"], [57, 9, 1, "", "__neg__"], [57, 9, 1, "", "__pos__"], [57, 9, 1, "", "__radd__"], [57, 9, 1, "", "__rdiv__"], [57, 9, 1, "", "__rmod__"], [57, 9, 1, "", "__rmul__"], [57, 9, 1, "", "__rsub__"], [57, 9, 1, "", "__rtruediv__"], [57, 9, 1, "", "__sub__"], [57, 9, 1, "", "__truediv__"], [57, 9, 1, "", "as_string"], [57, 9, 1, "", "ebits"], [57, 9, 1, "", "sbits"], [57, 9, 1, "", "sort"]], "cvc5.pythonic.FPSortRef": [[57, 9, 1, "", "cast"], [57, 9, 1, "", "ebits"], [57, 9, 1, "", "sbits"]], "cvc5.pythonic.FiniteFieldNumRef": [[56, 9, 1, "", "as_long"], [56, 9, 1, "", "as_signed_long"]], "cvc5.pythonic.FiniteFieldRef": [[56, 9, 1, "", "__add__"], [56, 9, 1, "", "__mul__"], [56, 9, 1, "", "__neg__"], [56, 9, 1, "", "__pos__"], [56, 9, 1, "", "__radd__"], [56, 9, 1, "", "__rmul__"], [56, 9, 1, "", "__rsub__"], [56, 9, 1, "", "__sub__"], [56, 9, 1, "", "size"], [56, 9, 1, "", "sort"]], "cvc5.pythonic.FiniteFieldSortRef": [[56, 9, 1, "", "cast"], [56, 9, 1, "", "size"]], "cvc5.pythonic.FuncDeclRef": [[54, 9, 1, "", "__call__"], [54, 9, 1, "", "arity"], [54, 9, 1, "", "domain"], [54, 9, 1, "", "name"], [54, 9, 1, "", "range"]], "cvc5.pythonic.IntNumRef": [[51, 9, 1, "", "as_binary_string"], [51, 9, 1, "", "as_long"], [51, 9, 1, "", "as_string"]], "cvc5.pythonic.ModelRef": [[63, 9, 1, "", "__getitem__"], [63, 9, 1, "", "__init__"], [63, 9, 1, "", "__len__"], [63, 9, 1, "", "__repr__"], [63, 10, 1, "", "__weakref__"], [63, 9, 1, "", "decls"], [63, 9, 1, "", "eval"], [63, 9, 1, "", "evaluate"], [63, 9, 1, "", "vars"]], "cvc5.pythonic.QuantifierRef": [[60, 9, 1, "", "as_ast"], [60, 9, 1, "", "body"], [60, 9, 1, "", "children"], [60, 9, 1, "", "is_exists"], [60, 9, 1, "", "is_forall"], [60, 9, 1, "", "is_lambda"], [60, 9, 1, "", "num_vars"], [60, 9, 1, "", "sort"], [60, 9, 1, "", "var_name"], [60, 9, 1, "", "var_sort"]], "cvc5.pythonic.RatNumRef": [[51, 9, 1, "", "as_decimal"], [51, 9, 1, "", "as_fraction"], [51, 9, 1, "", "as_long"], [51, 9, 1, "", "as_string"], [51, 9, 1, "", "denominator"], [51, 9, 1, "", "denominator_as_long"], [51, 9, 1, "", "is_int"], [51, 9, 1, "", "is_int_value"], [51, 9, 1, "", "is_real"], [51, 9, 1, "", "numerator"], [51, 9, 1, "", "numerator_as_long"]], "cvc5.pythonic.SMTException": [[58, 9, 1, "", "__init__"], [58, 9, 1, "", "__str__"], [58, 10, 1, "", "__weakref__"]], "cvc5.pythonic.SetRef": [[62, 9, 1, "", "__and__"], [62, 9, 1, "", "__getitem__"], [62, 9, 1, "", "__or__"], [62, 9, 1, "", "default"], [62, 9, 1, "", "domain"], [62, 9, 1, "", "range"], [62, 9, 1, "", "sort"]], "cvc5.pythonic.SetSortRef": [[62, 9, 1, "", "domain"], [62, 9, 1, "", "range"]], "cvc5.pythonic.Solver": [[63, 9, 1, "", "__iadd__"], [63, 9, 1, "", "__init__"], [63, 9, 1, "", "__repr__"], [63, 10, 1, "", "__weakref__"], [63, 9, 1, "", "add"], [63, 9, 1, "", "append"], [63, 9, 1, "", "assert_exprs"], [63, 9, 1, "", "assertions"], [63, 9, 1, "", "check"], [63, 9, 1, "", "getOption"], [63, 9, 1, "", "getOptionInfo"], [63, 9, 1, "", "getOptionNames"], [63, 9, 1, "", "initFromLogic"], [63, 9, 1, "", "insert"], [63, 9, 1, "", "model"], [63, 9, 1, "", "num_scopes"], [63, 9, 1, "", "pop"], [63, 9, 1, "", "push"], [63, 9, 1, "", "reason_unknown"], [63, 9, 1, "", "reset"], [63, 9, 1, "", "resetAssertions"], [63, 9, 1, "", "set"], [63, 9, 1, "", "setOption"], [63, 9, 1, "", "sexpr"], [63, 9, 1, "", "statistics"]], "cvc5.pythonic.SortRef": [[54, 9, 1, "", "__eq__"], [54, 9, 1, "", "__hash__"], [54, 9, 1, "", "__init__"], [54, 9, 1, "", "__ne__"], [54, 9, 1, "", "__repr__"], [54, 9, 1, "", "__str__"], [54, 10, 1, "", "__weakref__"], [54, 9, 1, "", "as_ast"], [54, 9, 1, "", "cast"], [54, 9, 1, "", "eq"], [54, 9, 1, "", "hash"], [54, 9, 1, "", "is_int"], [54, 9, 1, "", "name"], [54, 9, 1, "", "sexpr"], [54, 9, 1, "", "subsort"]]}, "objtypes": {"0": "cpp:class", "1": "cpp:function", "2": "cpp:functionParam", "3": "cpp:type", "4": "cpp:enum", "5": "cpp:enumerator", "6": "cpp:member", "7": "cpp:templateParam", "8": "py:class", "9": "py:method", "10": "py:attribute", "11": "py:function", "12": "py:data"}, "objnames": {"0": ["cpp", "class", "C++ class"], "1": ["cpp", "function", "C++ function"], "2": ["cpp", "functionParam", "C++ function parameter"], "3": ["cpp", "type", "C++ type"], "4": ["cpp", "enum", "C++ enum"], "5": ["cpp", "enumerator", "C++ enumerator"], "6": ["cpp", "member", "C++ member"], "7": ["cpp", "templateParam", "C++ template parameter"], "8": ["py", "class", "Python class"], "9": ["py", "method", "Python method"], "10": ["py", "attribute", "Python attribute"], "11": ["py", "function", "Python function"], "12": ["py", "data", "Python data"]}, "titleterms": {"api": [0, 2, 28, 29, 40, 50, 59, 89, 102], "document": [0, 64, 88, 89], "command": 1, "c": 2, "class": [2, 51, 52, 53, 54, 55, 56, 57, 60, 62, 63, 89], "hierarchi": 2, "datatyp": [3, 31, 55, 70, 90, 102], "datatypeconstructor": [4, 32], "datatypeconstructordecl": [5, 33], "datatypedecl": [6, 34], "datatypeselector": [7, 35], "driveropt": 8, "except": [9, 58, 72], "grammar": [10, 36, 91], "inputpars": 11, "kind": [12, 37], "mode": [13, 29, 57], "op": [14, 38], "optioninfo": 15, "parserexcept": 16, "quickstart": [17, 30, 41, 61, 65, 80], "guid": [17, 30, 41, 61, 65], "exampl": [17, 30, 41, 61, 65, 71, 80, 89, 102, 103, 104, 105, 109], "result": [18, 42, 63], "roundingmod": [19, 43], "solver": [20, 44, 63, 89], "sort": [21, 45], "sortkind": 22, "statist": [23, 46, 100], "symbolmanag": 24, "synthresult": [25, 47], "term": [26, 48, 51, 52, 53, 54, 56, 57, 62], "unknownexplan": [27, 49], "java": [28, 29], "build": [29, 89], "cvc5": [29, 88, 89, 90], "packag": 29, "io": 29, "github": 29, "proofrul": 39, "base": [40, 90], "python": [40, 50, 59], "which": 50, "should": 50, "i": 50, "us": [50, 90], "instal": [50, 89], "x86": 50, "64": 50, "variant": 50, "linux": 50, "maco": [50, 89], "arm64": 50, "arithmet": [51, 56, 77, 89, 90], "basic": [51, 52, 53, 54, 56, 57, 62], "builder": [51, 52, 53, 54, 56, 57, 60, 62], "overload": [51, 52, 53, 54, 56, 57, 62], "other": 51, "oper": [51, 52, 54, 57, 62, 89], "transcendent": [51, 109], "tester": [51, 52, 53, 54, 56, 57, 58, 60], "arrai": [52, 68, 90], "bit": [53, 67, 68, 73], "vector": [53, 67, 68, 73], "core": [54, 91], "boolean": 54, "gener": 54, "equal": 54, "overview": 55, "declar": [55, 102], "util": [55, 63], "finit": [56, 74, 90, 101, 103, 106], "field": [56, 74, 90, 103], "finitefield": 56, "float": [57, 75, 89, 90], "point": [57, 75, 89, 90], "fp": 57, "round": 57, "intern": 58, "quantifi": [60, 90], "set": [62, 83, 90, 106], "simpl": 63, "solv": 63, "The": 63, "model": [63, 91], "binari": 64, "theori": [66, 67, 68, 69, 70, 73, 74, 75, 77, 81, 82, 83, 84, 89, 90, 101, 102, 103, 104, 105, 106, 107, 108, 109], "bag": [66, 101], "combin": 69, "handl": 72, "extract": 73, "hello": 76, "world": 76, "linear": [77, 89], "parser": [78, 79, 90], "share": 79, "symbol": 79, "manag": [79, 99], "relat": [81, 106], "sequenc": [82, 105], "string": [84, 90, 107], "sygu": [85, 86, 91], "function": [85, 90], "invari": 86, "index": 87, "tabl": 88, "content": 88, "support": 89, "system": 89, "compil": 89, "cross": 89, "window": 89, "webassembli": 89, "depend": 89, "cadic": 89, "sat": [89, 90], "gmp": 89, "gnu": 89, "multi": 89, "precis": 89, "librari": 89, "symfpu": 89, "number": 89, "option": [89, 90, 99], "cryptominisat": 89, "kissat": 89, "libpoli": 89, "polynomi": 89, "cln": 89, "v1": 89, "3": 89, "glpk": 89, "cut": 89, "log": 89, "A": 89, "fork": 89, "program": 89, "kit": 89, "editlin": 89, "improv": 89, "interact": 89, "experi": 89, "googl": 89, "test": 89, "unit": 89, "framework": 89, "languag": 89, "bind": 89, "regress": 89, "custom": 89, "target": 89, "recompil": 89, "specif": 89, "version": 89, "differ": 89, "lgpl": 89, "most": 90, "commonli": 90, "addit": 90, "modul": 90, "bitvector": 90, "decis": 90, "heurist": 90, "express": 90, "driver": 90, "parallel": 90, "print": 90, "proof": [90, 91, 92, 93, 94, 95, 96, 97], "layer": 90, "separ": [90, 104], "logic": [90, 102, 104, 109], "smt": 90, "uninterpret": 90, "output": 91, "tag": 91, "inst": 91, "enumer": 91, "sol": 91, "gterm": 91, "trigger": 91, "raw": 91, "benchmark": 91, "learn": 91, "lit": 91, "sub": 91, "post": 91, "assert": 91, "pre": 91, "deep": 91, "restart": 91, "incomplet": 91, "lemma": 91, "trust": 91, "step": 91, "timeout": 91, "unsat": 91, "portfolio": 91, "block": 91, "format": [92, 93, 94, 95], "aleth": 92, "alethelf": 93, "dot": 94, "lfsc": 95, "rule": 96, "product": 97, "refer": [98, 101, 102, 103, 104, 105, 106, 107, 108, 109], "resourc": 99, "limit": 99, "overal": 99, "time": 99, "tlimit": 99, "spend": 99, "semant": [101, 102, 103, 104, 105, 106, 107, 109], "syntax": [102, 103, 104, 105, 109], "updat": 102, "parametr": 102, "tupl": 102, "codatatyp": 102, "signatur": 104, "standard": 108, "non": 108, "extend": 108}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinxcontrib.bibtex": 9, "sphinx": 58}, "alltitles": {"API Documentation": [[0, "api-documentation"]], "Command": [[1, "command"]], "C++ API": [[2, "c-api"]], "Class hierarchy": [[2, "class-hierarchy"]], "Datatype": [[3, "datatype"], [31, "datatype"]], "DatatypeConstructor": [[4, "datatypeconstructor"], [32, "datatypeconstructor"]], "DatatypeConstructorDecl": [[5, "datatypeconstructordecl"], [33, "datatypeconstructordecl"]], "DatatypeDecl": [[6, "datatypedecl"], [34, "datatypedecl"]], "DatatypeSelector": [[7, "datatypeselector"], [35, "datatypeselector"]], "DriverOptions": [[8, "driveroptions"]], "Exceptions": [[9, "exceptions"], [58, "exceptions"]], "Grammar": [[10, "grammar"], [36, "grammar"]], "InputParser": [[11, "inputparser"]], "Kind": [[12, "kind"], [37, "kind"]], "Modes": [[13, "modes"]], "Op": [[14, "op"], [38, "op"]], "OptionInfo": [[15, "optioninfo"]], "ParserException": [[16, "parserexception"]], "Quickstart Guide": [[17, "quickstart-guide"], [30, "quickstart-guide"], [41, "quickstart-guide"], [61, "quickstart-guide"], [65, "quickstart-guide"]], "Example": [[17, "example"], [30, "example"], [41, "example"], [61, "example"], [65, "example"]], "Result": [[18, "result"], [42, "result"]], "RoundingMode": [[19, "roundingmode"], [43, "roundingmode"]], "Solver": [[20, "solver"], [44, "solver"]], "Sort": [[21, "sort"], [45, "sort"]], "SortKind": [[22, "sortkind"]], "Statistics": [[23, "statistics"], [46, "statistics"], [100, "statistics"]], "SymbolManager": [[24, "symbolmanager"]], "SynthResult": [[25, "synthresult"], [47, "synthresult"]], "Term": [[26, "term"], [48, "term"]], "UnknownExplanation": [[27, "unknownexplanation"], [49, "unknownexplanation"]], "Java API": [[28, "java-api"], [29, "java-api"]], "Building cvc5 Java API": [[29, "building-cvc5-java-api"]], "Package io.github.cvc5": [[29, "id1"]], "Package io.github.cvc5.modes": [[29, "id3"]], "ProofRule": [[39, "proofrule"]], "Base Python API": [[40, "base-python-api"]], "Python API": [[50, "python-api"]], "Which Python API should I use?": [[50, "which-python-api-should-i-use"]], "Installation (x86-64 variants of Linux and macOS)": [[50, "installation-x86-64-variants-of-linux-and-macos"]], "Installation (ARM64 variants of Linux and macOS)": [[50, "installation-arm64-variants-of-linux-and-macos"]], "Arithmetic": [[51, "arithmetic"]], "Basic Arithmetic Term Builders": [[51, "basic-arithmetic-term-builders"]], "Arithmetic Overloads": [[51, "arithmetic-overloads"], [56, "arithmetic-overloads"]], "Other Arithmetic Operators": [[51, "other-arithmetic-operators"]], "Transcendentals": [[51, "transcendentals"]], "Testers": [[51, "testers"], [52, "testers"], [53, "testers"], [54, "testers"], [56, "testers"], [57, "testers"], [58, "testers"], [60, "testers"]], "Classes (with overloads)": [[51, "classes-with-overloads"], [52, "classes-with-overloads"], [53, "classes-with-overloads"], [54, "classes-with-overloads"], [56, "classes-with-overloads"], [57, "classes-with-overloads"], [62, "classes-with-overloads"]], "Arrays": [[52, "arrays"]], "Basic Array Term Builders": [[52, "basic-array-term-builders"]], "Array Operators": [[52, "array-operators"]], "Bit-Vectors": [[53, "bit-vectors"]], "Basic Bit-Vector Term Builders": [[53, "basic-bit-vector-term-builders"]], "Bit-Vector Overloads": [[53, "bit-vector-overloads"]], "Bit-Vector Term Builders": [[53, "bit-vector-term-builders"]], "Core & Booleans": [[54, "core-booleans"]], "Basic Boolean Term Builders": [[54, "basic-boolean-term-builders"]], "Basic Generic Term Builders": [[54, "basic-generic-term-builders"]], "Boolean Operators": [[54, "boolean-operators"]], "Generic Operators": [[54, "generic-operators"]], "Equality": [[54, "equality"]], "Datatypes": [[55, "datatypes"]], "Overview": [[55, "overview"]], "Declaration Utilities": [[55, "declaration-utilities"]], "Classes": [[55, "classes"], [60, "classes"]], "Finite Fields": [[56, "finite-fields"]], "Basic FiniteField Term Builders": [[56, "basic-finitefield-term-builders"]], "Floating Point": [[57, "floating-point"]], "Basic FP Term Builders": [[57, "basic-fp-term-builders"]], "FP Operators": [[57, "fp-operators"]], "FP Rounding Modes": [[57, "fp-rounding-modes"]], "Internals": [[58, "internals"]], "Pythonic API": [[59, "pythonic-api"]], "Quantifiers": [[60, "quantifiers"]], "Builders": [[60, "builders"]], "Sets": [[62, "sets"]], "Basic Set Term Builders": [[62, "basic-set-term-builders"]], "Set Operators": [[62, "set-operators"]], "Solvers & Results": [[63, "solvers-results"]], "Simple Solving": [[63, "simple-solving"]], "The Solver Class": [[63, "the-solver-class"]], "Results & Models": [[63, "results-models"]], "Utilities": [[63, "utilities"]], "Binary Documentation": [[64, "binary-documentation"]], "Theory of Bags": [[66, "theory-of-bags"]], "Theory of Bit-Vectors": [[67, "theory-of-bit-vectors"]], "Theory of Bit-Vectors and Arrays": [[68, "theory-of-bit-vectors-and-arrays"]], "Theory Combination": [[69, "theory-combination"]], "Theory of Datatypes": [[70, "theory-of-datatypes"]], "Examples": [[71, "examples"], [102, "examples"], [103, "examples"], [104, "examples"], [105, "examples"], [109, "examples"]], "Exception Handling": [[72, "exception-handling"]], "Theory of Bit-Vectors: extract": [[73, "theory-of-bit-vectors-extract"]], "Theory of Finite Fields": [[74, "theory-of-finite-fields"]], "Theory of Floating-Points": [[75, "theory-of-floating-points"]], "Hello World": [[76, "hello-world"]], "Theory of Linear Arithmetic": [[77, "theory-of-linear-arithmetic"]], "Parser": [[78, "parser"]], "Parser with Shared Symbol Manager": [[79, "parser-with-shared-symbol-manager"]], "Quickstart Example": [[80, "quickstart-example"]], "Theory of Relations": [[81, "theory-of-relations"]], "Theory of Sequences": [[82, "theory-of-sequences"]], "Theory of Sets": [[83, "theory-of-sets"]], "Theory of Strings": [[84, "theory-of-strings"]], "SyGuS: Functions": [[85, "sygus-functions"]], "SyGuS: Invariants": [[86, "sygus-invariants"]], "Index": [[87, "index"]], "cvc5 Documentation": [[88, "cvc5-documentation"]], "Table of Contents": [[88, "table-of-contents"]], "Installation": [[89, "installation"]], "Building cvc5": [[89, "building-cvc5"]], "Supported Operating Systems": [[89, "supported-operating-systems"]], "Compilation on macOS": [[89, "compilation-on-macos"]], "Cross-compiling for Windows": [[89, "cross-compiling-for-windows"]], "WebAssembly Compilation": [[89, "webassembly-compilation"]], "Build dependencies": [[89, "build-dependencies"]], "CaDiCaL (SAT solver)": [[89, "id1"]], "GMP (GNU Multi-Precision arithmetic library)": [[89, "gmp-gnu-multi-precision-arithmetic-library"]], "SymFPU (Support for the Theory of Floating Point Numbers)": [[89, "symfpu-support-for-the-theory-of-floating-point-numbers"]], "Optional Dependencies": [[89, "optional-dependencies"]], "CryptoMiniSat (Optional SAT solver)": [[89, "cryptominisat-optional-sat-solver"]], "Kissat (Optional SAT solver)": [[89, "kissat-optional-sat-solver"]], "LibPoly (Optional polynomial library)": [[89, "libpoly-optional-polynomial-library"]], "CLN >= v1.3 (Class Library for Numbers)": [[89, "cln-v1-3-class-library-for-numbers"]], "glpk-cut-log (A fork of the GNU Linear Programming Kit)": [[89, "glpk-cut-log-a-fork-of-the-gnu-linear-programming-kit"]], "Editline library (Improved Interactive Experience)": [[89, "editline-library-improved-interactive-experience"]], "Google Test Unit Testing Framework (Unit Tests)": [[89, "google-test-unit-testing-framework-unit-tests"]], "Language bindings": [[89, "language-bindings"]], "Dependencies for Language Bindings": [[89, "dependencies-for-language-bindings"]], "Building the API Documentation": [[89, "building-the-api-documentation"]], "Building the Examples": [[89, "building-the-examples"]], "Testing cvc5": [[89, "id4"]], "Testing System Tests": [[89, "testing-system-tests"]], "Testing Unit Tests": [[89, "testing-unit-tests"]], "Testing Regression Tests": [[89, "testing-regression-tests"]], "Custom Targets": [[89, "custom-targets"]], "Recompiling a specific cvc5 version with different LGPL library versions": [[89, "recompiling-a-specific-cvc5-version-with-different-lgpl-library-versions"]], "Options": [[90, "options"]], "Most Commonly-Used cvc5 Options": [[90, "most-commonly-used-cvc5-options"]], "Additional cvc5 Options": [[90, "additional-cvc5-options"]], "Arithmetic Theory Module": [[90, "arithmetic-theory-module"]], "Arrays Theory Module": [[90, "arrays-theory-module"]], "Base Module": [[90, "base-module"]], "Bitvector Theory Module": [[90, "bitvector-theory-module"]], "Datatypes Theory Module": [[90, "datatypes-theory-module"]], "Decision Heuristics Module": [[90, "decision-heuristics-module"]], "Expression Module": [[90, "expression-module"]], "Finite Field Theory Module": [[90, "finite-field-theory-module"]], "Floating-Point Module": [[90, "floating-point-module"]], "Driver Module": [[90, "driver-module"]], "Parallel Module": [[90, "parallel-module"]], "Parser Module": [[90, "parser-module"]], "Printing Module": [[90, "printing-module"]], "Proof Module": [[90, "proof-module"]], "SAT Layer Module": [[90, "sat-layer-module"]], "Quantifiers Module": [[90, "quantifiers-module"]], "Separation Logic Theory Module": [[90, "separation-logic-theory-module"]], "Sets Theory Module": [[90, "sets-theory-module"]], "SMT Layer Module": [[90, "smt-layer-module"]], "Strings Theory Module": [[90, "strings-theory-module"]], "Theory Layer Module": [[90, "theory-layer-module"]], "Uninterpreted Functions Theory Module": [[90, "uninterpreted-functions-theory-module"]], "Output tags": [[91, "output-tags"]], "inst": [[91, "inst"]], "sygus": [[91, "sygus"]], "sygus-grammar": [[91, "sygus-grammar"]], "sygus-enumerator": [[91, "sygus-enumerator"]], "sygus-sol-gterm": [[91, "sygus-sol-gterm"]], "trigger": [[91, "trigger"]], "raw-benchmark": [[91, "raw-benchmark"]], "learned-lits": [[91, "learned-lits"]], "subs": [[91, "subs"]], "post-asserts": [[91, "post-asserts"]], "pre-asserts": [[91, "pre-asserts"]], "deep-restart": [[91, "deep-restart"]], "incomplete": [[91, "incomplete"]], "lemmas": [[91, "lemmas"]], "trusted-proof-steps": [[91, "trusted-proof-steps"]], "timeout-core-benchmark": [[91, "timeout-core-benchmark"]], "unsat-core-benchmark": [[91, "unsat-core-benchmark"]], "portfolio": [[91, "portfolio"]], "block-model": [[91, "block-model"]], "Proof format: Alethe": [[92, "proof-format-alethe"]], "Proof format: AletheLF": [[93, "proof-format-alethelf"]], "Proof format: DOT": [[94, "proof-format-dot"]], "Proof format: LFSC": [[95, "proof-format-lfsc"]], "Proof rules": [[96, "proof-rules"]], "Proof production": [[97, "proof-production"]], "References": [[98, "references"], [103, "references"]], "Resource limits": [[99, "resource-limits"]], "Overall time limit (tlimit option)": [[99, "overall-time-limit-tlimit-option"]], "Resource manager and resource spending": [[99, "resource-manager-and-resource-spending"]], "Theory Reference: Bags": [[101, "theory-reference-bags"]], "Finite Bags": [[101, "finite-bags"]], "Semantics": [[101, "semantics"], [102, "semantics"], [103, "semantics"], [104, "semantics"], [105, "semantics"], [106, "semantics"], [107, "semantics"], [109, "semantics"]], "Theory Reference: Datatypes": [[102, "theory-reference-datatypes"]], "Logic": [[102, "logic"], [109, "logic"]], "Syntax": [[102, "syntax"], [103, "syntax"], [104, "syntax"], [105, "syntax"], [109, "syntax"]], "Example Declarations": [[102, "example-declarations"]], "Datatype Updaters": [[102, "datatype-updaters"]], "Parametric Datatypes": [[102, "parametric-datatypes"]], "Tuples": [[102, "tuples"]], "Codatatypes": [[102, "codatatypes"]], "Syntax/API": [[102, "syntax-api"]], "Theory Reference: Finite Fields": [[103, "theory-reference-finite-fields"]], "Theory Reference: Separation Logic": [[104, "theory-reference-separation-logic"]], "Signature": [[104, "signature"]], "Theory Reference: Sequences": [[105, "theory-reference-sequences"]], "Theory Reference: Sets and Relations": [[106, "theory-reference-sets-and-relations"]], "Finite Sets": [[106, "finite-sets"]], "Finite Relations": [[106, "finite-relations"]], "Theory Reference: Strings": [[107, "theory-reference-strings"]], "Theory References": [[108, "theory-references"]], "Standardized theories": [[108, "standardized-theories"]], "Non-standard or extended theories": [[108, "non-standard-or-extended-theories"]], "Theory Reference: Transcendentals": [[109, "theory-reference-transcendentals"]]}, "indexentries": {"parser::command (c++ class)": [[1, "_CPPv4N4cvc56parser7CommandE"]], "parser::command::command (c++ function)": [[1, "_CPPv4N4cvc56parser7Command7CommandEv"]], "parser::command::getcommandname (c++ function)": [[1, "_CPPv4NK4cvc56parser7Command14getCommandNameEv"]], "parser::command::invoke (c++ function)": [[1, "_CPPv4N4cvc56parser7Command6invokeEPN4cvc56SolverEPN6parser13SymbolManagerERNSt7ostreamE"]], "parser::command::isnull (c++ function)": [[1, "_CPPv4NK4cvc56parser7Command6isNullEv"]], "parser::command::tostring (c++ function)": [[1, "_CPPv4NK4cvc56parser7Command8toStringEv"]], "datatype (c++ class)": [[3, "_CPPv4N4cvc58DatatypeE"]], "datatype::datatype (c++ function)": [[3, "_CPPv4N4cvc58Datatype8DatatypeEv"]], "datatype::begin (c++ function)": [[3, "_CPPv4NK4cvc58Datatype5beginEv"]], "datatype::const_iterator (c++ class)": [[3, "_CPPv4N4cvc58Datatype14const_iteratorE"]], "datatype::const_iterator::const_iterator (c++ function)": [[3, "_CPPv4N4cvc58Datatype14const_iterator14const_iteratorEv"]], "datatype::const_iterator::difference_type (c++ type)": [[3, "_CPPv4N4cvc58Datatype14const_iterator15difference_typeE"]], "datatype::const_iterator::iterator_category (c++ type)": [[3, "_CPPv4N4cvc58Datatype14const_iterator17iterator_categoryE"]], "datatype::const_iterator::operator!= (c++ function)": [[3, "_CPPv4NK4cvc58Datatype14const_iteratorneERK14const_iterator"]], "datatype::const_iterator::operator* (c++ function)": [[3, "_CPPv4NK4cvc58Datatype14const_iteratormlEv"]], "datatype::const_iterator::operator++ (c++ function)": [[3, "_CPPv4N4cvc58Datatype14const_iteratorppEi"], [3, "_CPPv4N4cvc58Datatype14const_iteratorppEv"]], "datatype::const_iterator::operator-> (c++ function)": [[3, "_CPPv4NK4cvc58Datatype14const_iteratorptEv"]], "datatype::const_iterator::operator= (c++ function)": [[3, "_CPPv4N4cvc58Datatype14const_iteratoraSERK14const_iterator"]], "datatype::const_iterator::operator== (c++ function)": [[3, "_CPPv4NK4cvc58Datatype14const_iteratoreqERK14const_iterator"]], "datatype::const_iterator::pointer (c++ type)": [[3, "_CPPv4N4cvc58Datatype14const_iterator7pointerE"]], "datatype::const_iterator::reference (c++ type)": [[3, "_CPPv4N4cvc58Datatype14const_iterator9referenceE"]], "datatype::const_iterator::value_type (c++ type)": [[3, "_CPPv4N4cvc58Datatype14const_iterator10value_typeE"]], "datatype::end (c++ function)": [[3, "_CPPv4NK4cvc58Datatype3endEv"]], "datatype::getconstructor (c++ function)": [[3, "_CPPv4NK4cvc58Datatype14getConstructorERKNSt6stringE"]], "datatype::getname (c++ function)": [[3, "_CPPv4NK4cvc58Datatype7getNameEv"]], "datatype::getnumconstructors (c++ function)": [[3, "_CPPv4NK4cvc58Datatype18getNumConstructorsEv"]], "datatype::getparameters (c++ function)": [[3, "_CPPv4NK4cvc58Datatype13getParametersEv"]], "datatype::getselector (c++ function)": [[3, "_CPPv4NK4cvc58Datatype11getSelectorERKNSt6stringE"]], "datatype::iscodatatype (c++ function)": [[3, "_CPPv4NK4cvc58Datatype12isCodatatypeEv"]], "datatype::isfinite (c++ function)": [[3, "_CPPv4NK4cvc58Datatype8isFiniteEv"]], "datatype::isnull (c++ function)": [[3, "_CPPv4NK4cvc58Datatype6isNullEv"]], "datatype::isparametric (c++ function)": [[3, "_CPPv4NK4cvc58Datatype12isParametricEv"]], "datatype::isrecord (c++ function)": [[3, "_CPPv4NK4cvc58Datatype8isRecordEv"]], "datatype::istuple (c++ function)": [[3, "_CPPv4NK4cvc58Datatype7isTupleEv"]], "datatype::iswellfounded (c++ function)": [[3, "_CPPv4NK4cvc58Datatype13isWellFoundedEv"]], "datatype::operator[] (c++ function)": [[3, "_CPPv4NK4cvc58DatatypeixE6size_t"], [3, "_CPPv4NK4cvc58DatatypeixERKNSt6stringE"]], "datatype::tostring (c++ function)": [[3, "_CPPv4NK4cvc58Datatype8toStringEv"]], "datatype::~datatype (c++ function)": [[3, "_CPPv4N4cvc58DatatypeD0Ev"]], "operator<< (c++ function)": [[3, "_CPPv4N4cvc5lsERNSt7ostreamERK8Datatype"], [4, "_CPPv4N4cvc5lsERNSt7ostreamERK19DatatypeConstructor"], [5, "_CPPv4N4cvc5lsERNSt7ostreamERK23DatatypeConstructorDecl"], [5, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI23DatatypeConstructorDeclEE"], [6, "_CPPv4N4cvc5lsERNSt7ostreamERK12DatatypeDecl"], [7, "_CPPv4N4cvc5lsERNSt7ostreamERK16DatatypeSelector"], [10, "_CPPv4N4cvc5lsERNSt7ostreamERK7Grammar"], [12, "_CPPv4N4cvc5lsERNSt7ostreamE4Kind"], [14, "_CPPv4N4cvc5lsERNSt7ostreamERK2Op"], [15, "_CPPv4N4cvc5lsERNSt7ostreamERK10OptionInfo"], [18, "_CPPv4N4cvc5lsERNSt7ostreamERK6Result"], [21, "_CPPv4N4cvc5lsERNSt7ostreamERK4Sort"], [22, "_CPPv4N4cvc5lsERNSt7ostreamE8SortKind"], [23, "_CPPv4N4cvc5lsERNSt7ostreamERK10Statistics"], [23, "_CPPv4N4cvc5lsERNSt7ostreamERK4Stat"], [25, "_CPPv4N4cvc5lsERNSt7ostreamERK11SynthResult"], [26, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt13unordered_mapI4Term1VEE"], [26, "_CPPv4I0EN4cvc5lsERNSt7ostreamERNSt7ostreamERKNSt3mapI4Term1VEE"], [26, "_CPPv4N4cvc5lsERNSt7ostreamERK4Term"], [26, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt13unordered_setI4TermEE"], [26, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt3setI4TermEE"], [26, "_CPPv4N4cvc5lsERNSt7ostreamERKNSt6vectorI4TermEE"], [27, "_CPPv4N4cvc5lsERNSt7ostreamE18UnknownExplanation"]], "datatypeconstructor (c++ class)": [[4, "_CPPv4N4cvc519DatatypeConstructorE"]], "datatypeconstructor::datatypeconstructor (c++ function)": [[4, "_CPPv4N4cvc519DatatypeConstructor19DatatypeConstructorEv"]], "datatypeconstructor::begin (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor5beginEv"]], "datatypeconstructor::const_iterator (c++ class)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iteratorE"]], "datatypeconstructor::const_iterator::const_iterator (c++ function)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iterator14const_iteratorEv"]], "datatypeconstructor::const_iterator::difference_type (c++ type)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iterator15difference_typeE"]], "datatypeconstructor::const_iterator::iterator_category (c++ type)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iterator17iterator_categoryE"]], "datatypeconstructor::const_iterator::operator!= (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratorneERK14const_iterator"]], "datatypeconstructor::const_iterator::operator* (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratormlEv"]], "datatypeconstructor::const_iterator::operator++ (c++ function)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iteratorppEi"], [4, "_CPPv4N4cvc519DatatypeConstructor14const_iteratorppEv"]], "datatypeconstructor::const_iterator::operator-> (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratorptEv"]], "datatypeconstructor::const_iterator::operator= (c++ function)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iteratoraSERK14const_iterator"]], "datatypeconstructor::const_iterator::operator== (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor14const_iteratoreqERK14const_iterator"]], "datatypeconstructor::const_iterator::pointer (c++ type)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iterator7pointerE"]], "datatypeconstructor::const_iterator::reference (c++ type)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iterator9referenceE"]], "datatypeconstructor::const_iterator::value_type (c++ type)": [[4, "_CPPv4N4cvc519DatatypeConstructor14const_iterator10value_typeE"]], "datatypeconstructor::end (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor3endEv"]], "datatypeconstructor::getinstantiatedterm (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor19getInstantiatedTermERK4Sort"]], "datatypeconstructor::getname (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor7getNameEv"]], "datatypeconstructor::getnumselectors (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor15getNumSelectorsEv"]], "datatypeconstructor::getselector (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor11getSelectorERKNSt6stringE"]], "datatypeconstructor::getterm (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor7getTermEv"]], "datatypeconstructor::gettesterterm (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor13getTesterTermEv"]], "datatypeconstructor::isnull (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor6isNullEv"]], "datatypeconstructor::operator[] (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructorixE6size_t"], [4, "_CPPv4NK4cvc519DatatypeConstructorixERKNSt6stringE"]], "datatypeconstructor::tostring (c++ function)": [[4, "_CPPv4NK4cvc519DatatypeConstructor8toStringEv"]], "datatypeconstructor::~datatypeconstructor (c++ function)": [[4, "_CPPv4N4cvc519DatatypeConstructorD0Ev"]], "datatypeconstructordecl (c++ class)": [[5, "_CPPv4N4cvc523DatatypeConstructorDeclE"]], "datatypeconstructordecl::datatypeconstructordecl (c++ function)": [[5, "_CPPv4N4cvc523DatatypeConstructorDecl23DatatypeConstructorDeclEv"]], "datatypeconstructordecl::addselector (c++ function)": [[5, "_CPPv4N4cvc523DatatypeConstructorDecl11addSelectorERKNSt6stringERK4Sort"]], "datatypeconstructordecl::addselectorself (c++ function)": [[5, "_CPPv4N4cvc523DatatypeConstructorDecl15addSelectorSelfERKNSt6stringE"]], "datatypeconstructordecl::addselectorunresolved (c++ function)": [[5, "_CPPv4N4cvc523DatatypeConstructorDecl21addSelectorUnresolvedERKNSt6stringERKNSt6stringE"]], "datatypeconstructordecl::isnull (c++ function)": [[5, "_CPPv4NK4cvc523DatatypeConstructorDecl6isNullEv"]], "datatypeconstructordecl::tostring (c++ function)": [[5, "_CPPv4NK4cvc523DatatypeConstructorDecl8toStringEv"]], "datatypeconstructordecl::~datatypeconstructordecl (c++ function)": [[5, "_CPPv4N4cvc523DatatypeConstructorDeclD0Ev"]], "datatypedecl (c++ class)": [[6, "_CPPv4N4cvc512DatatypeDeclE"]], "datatypedecl::datatypedecl (c++ function)": [[6, "_CPPv4N4cvc512DatatypeDecl12DatatypeDeclEv"]], "datatypedecl::addconstructor (c++ function)": [[6, "_CPPv4N4cvc512DatatypeDecl14addConstructorERK23DatatypeConstructorDecl"]], "datatypedecl::getname (c++ function)": [[6, "_CPPv4NK4cvc512DatatypeDecl7getNameEv"]], "datatypedecl::getnumconstructors (c++ function)": [[6, "_CPPv4NK4cvc512DatatypeDecl18getNumConstructorsEv"]], "datatypedecl::isnull (c++ function)": [[6, "_CPPv4NK4cvc512DatatypeDecl6isNullEv"]], "datatypedecl::isparametric (c++ function)": [[6, "_CPPv4NK4cvc512DatatypeDecl12isParametricEv"]], "datatypedecl::isresolved (c++ function)": [[6, "_CPPv4NK4cvc512DatatypeDecl10isResolvedEv"]], "datatypedecl::tostring (c++ function)": [[6, "_CPPv4NK4cvc512DatatypeDecl8toStringEv"]], "datatypedecl::~datatypedecl (c++ function)": [[6, "_CPPv4N4cvc512DatatypeDeclD0Ev"]], "datatypeselector (c++ class)": [[7, "_CPPv4N4cvc516DatatypeSelectorE"]], "datatypeselector::datatypeselector (c++ function)": [[7, "_CPPv4N4cvc516DatatypeSelector16DatatypeSelectorEv"]], "datatypeselector::getcodomainsort (c++ function)": [[7, "_CPPv4NK4cvc516DatatypeSelector15getCodomainSortEv"]], "datatypeselector::getname (c++ function)": [[7, "_CPPv4NK4cvc516DatatypeSelector7getNameEv"]], "datatypeselector::getterm (c++ function)": [[7, "_CPPv4NK4cvc516DatatypeSelector7getTermEv"]], "datatypeselector::getupdaterterm (c++ function)": [[7, "_CPPv4NK4cvc516DatatypeSelector14getUpdaterTermEv"]], "datatypeselector::isnull (c++ function)": [[7, "_CPPv4NK4cvc516DatatypeSelector6isNullEv"]], "datatypeselector::tostring (c++ function)": [[7, "_CPPv4NK4cvc516DatatypeSelector8toStringEv"]], "datatypeselector::~datatypeselector (c++ function)": [[7, "_CPPv4N4cvc516DatatypeSelectorD0Ev"]], "driveroptions (c++ class)": [[8, "_CPPv4N4cvc513DriverOptionsE"]], "driveroptions::err (c++ function)": [[8, "_CPPv4NK4cvc513DriverOptions3errEv"]], "driveroptions::in (c++ function)": [[8, "_CPPv4NK4cvc513DriverOptions2inEv"]], "driveroptions::out (c++ function)": [[8, "_CPPv4NK4cvc513DriverOptions3outEv"]], "cvc5apiexception (c++ class)": [[9, "_CPPv4N4cvc516CVC5ApiExceptionE"]], "cvc5apiexception::cvc5apiexception (c++ function)": [[9, "_CPPv4N4cvc516CVC5ApiException16CVC5ApiExceptionERKNSt12stringstreamE"], [9, "_CPPv4N4cvc516CVC5ApiException16CVC5ApiExceptionERKNSt6stringE"]], "cvc5apiexception::getmessage (c++ function)": [[9, "_CPPv4NK4cvc516CVC5ApiException10getMessageEv"]], "cvc5apiexception::tostream (c++ function)": [[9, "_CPPv4NK4cvc516CVC5ApiException8toStreamERNSt7ostreamE"]], "cvc5apiexception::what (c++ function)": [[9, "_CPPv4NK4cvc516CVC5ApiException4whatEv"]], "cvc5apirecoverableexception (c++ class)": [[9, "_CPPv4N4cvc527CVC5ApiRecoverableExceptionE"]], "cvc5apirecoverableexception::cvc5apirecoverableexception (c++ function)": [[9, "_CPPv4N4cvc527CVC5ApiRecoverableException27CVC5ApiRecoverableExceptionERKNSt12stringstreamE"], [9, "_CPPv4N4cvc527CVC5ApiRecoverableException27CVC5ApiRecoverableExceptionERKNSt6stringE"]], "grammar (c++ class)": [[10, "_CPPv4N4cvc57GrammarE"]], "grammar::grammar (c++ function)": [[10, "_CPPv4N4cvc57Grammar7GrammarEv"]], "grammar::addanyconstant (c++ function)": [[10, "_CPPv4N4cvc57Grammar14addAnyConstantERK4Term"]], "grammar::addanyvariable (c++ function)": [[10, "_CPPv4N4cvc57Grammar14addAnyVariableERK4Term"]], "grammar::addrule (c++ function)": [[10, "_CPPv4N4cvc57Grammar7addRuleERK4TermRK4Term"]], "grammar::addrules (c++ function)": [[10, "_CPPv4N4cvc57Grammar8addRulesERK4TermRKNSt6vectorI4TermEE"]], "grammar::tostring (c++ function)": [[10, "_CPPv4NK4cvc57Grammar8toStringEv"]], "grammar::~grammar (c++ function)": [[10, "_CPPv4N4cvc57GrammarD0Ev"]], "parser::inputparser (c++ class)": [[11, "_CPPv4N4cvc56parser11InputParserE"]], "parser::inputparser::inputparser (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser11InputParserEP6Solver"], [11, "_CPPv4N4cvc56parser11InputParser11InputParserEP6SolverP13SymbolManager"]], "parser::inputparser::appendincrementalstringinput (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser28appendIncrementalStringInputERKNSt6stringE"]], "parser::inputparser::done (c++ function)": [[11, "_CPPv4NK4cvc56parser11InputParser4doneEv"]], "parser::inputparser::getsolver (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser9getSolverEv"]], "parser::inputparser::getsymbolmanager (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser16getSymbolManagerEv"]], "parser::inputparser::nextcommand (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser11nextCommandEv"]], "parser::inputparser::nextterm (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser8nextTermEv"]], "parser::inputparser::setfileinput (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser12setFileInputEN5modes13InputLanguageERKNSt6stringE"]], "parser::inputparser::setincrementalstringinput (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser25setIncrementalStringInputEN5modes13InputLanguageERKNSt6stringE"]], "parser::inputparser::setstreaminput (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser14setStreamInputEN5modes13InputLanguageERNSt7istreamERKNSt6stringE"]], "parser::inputparser::setstringinput (c++ function)": [[11, "_CPPv4N4cvc56parser11InputParser14setStringInputEN5modes13InputLanguageERKNSt6stringERKNSt6stringE"]], "kind (c++ enum)": [[12, "_CPPv4N4cvc54KindE"]], "kind::abs (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3ABSE"]], "kind::add (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3ADDE"]], "kind::and (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3ANDE"]], "kind::apply_constructor (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17APPLY_CONSTRUCTORE"]], "kind::apply_selector (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14APPLY_SELECTORE"]], "kind::apply_tester (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12APPLY_TESTERE"]], "kind::apply_uf (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8APPLY_UFE"]], "kind::apply_updater (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13APPLY_UPDATERE"]], "kind::arccosecant (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11ARCCOSECANTE"]], "kind::arccosine (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9ARCCOSINEE"]], "kind::arccotangent (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12ARCCOTANGENTE"]], "kind::arcsecant (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9ARCSECANTE"]], "kind::arcsine (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7ARCSINEE"]], "kind::arctangent (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10ARCTANGENTE"]], "kind::bag_card (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8BAG_CARDE"]], "kind::bag_choose (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10BAG_CHOOSEE"]], "kind::bag_count (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9BAG_COUNTE"]], "kind::bag_difference_remove (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21BAG_DIFFERENCE_REMOVEE"]], "kind::bag_difference_subtract (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind23BAG_DIFFERENCE_SUBTRACTE"]], "kind::bag_duplicate_removal (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21BAG_DUPLICATE_REMOVALE"]], "kind::bag_empty (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9BAG_EMPTYE"]], "kind::bag_filter (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10BAG_FILTERE"]], "kind::bag_fold (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8BAG_FOLDE"]], "kind::bag_from_set (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12BAG_FROM_SETE"]], "kind::bag_inter_min (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BAG_INTER_MINE"]], "kind::bag_is_singleton (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16BAG_IS_SINGLETONE"]], "kind::bag_make (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8BAG_MAKEE"]], "kind::bag_map (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7BAG_MAPE"]], "kind::bag_member (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10BAG_MEMBERE"]], "kind::bag_partition (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BAG_PARTITIONE"]], "kind::bag_subbag (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10BAG_SUBBAGE"]], "kind::bag_to_set (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10BAG_TO_SETE"]], "kind::bag_union_disjoint (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18BAG_UNION_DISJOINTE"]], "kind::bag_union_max (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BAG_UNION_MAXE"]], "kind::bitvector_add (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_ADDE"]], "kind::bitvector_and (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_ANDE"]], "kind::bitvector_ashr (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_ASHRE"]], "kind::bitvector_comp (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_COMPE"]], "kind::bitvector_concat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16BITVECTOR_CONCATE"]], "kind::bitvector_extract (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17BITVECTOR_EXTRACTE"]], "kind::bitvector_ite (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_ITEE"]], "kind::bitvector_lshr (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_LSHRE"]], "kind::bitvector_mult (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_MULTE"]], "kind::bitvector_nand (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_NANDE"]], "kind::bitvector_neg (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_NEGE"]], "kind::bitvector_nego (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_NEGOE"]], "kind::bitvector_nor (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_NORE"]], "kind::bitvector_not (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_NOTE"]], "kind::bitvector_or (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12BITVECTOR_ORE"]], "kind::bitvector_redand (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16BITVECTOR_REDANDE"]], "kind::bitvector_redor (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_REDORE"]], "kind::bitvector_repeat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16BITVECTOR_REPEATE"]], "kind::bitvector_rotate_left (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21BITVECTOR_ROTATE_LEFTE"]], "kind::bitvector_rotate_right (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind22BITVECTOR_ROTATE_RIGHTE"]], "kind::bitvector_saddo (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_SADDOE"]], "kind::bitvector_sdiv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_SDIVE"]], "kind::bitvector_sdivo (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_SDIVOE"]], "kind::bitvector_sge (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_SGEE"]], "kind::bitvector_sgt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_SGTE"]], "kind::bitvector_shl (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_SHLE"]], "kind::bitvector_sign_extend (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21BITVECTOR_SIGN_EXTENDE"]], "kind::bitvector_sle (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_SLEE"]], "kind::bitvector_slt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_SLTE"]], "kind::bitvector_sltbv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_SLTBVE"]], "kind::bitvector_smod (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_SMODE"]], "kind::bitvector_smulo (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_SMULOE"]], "kind::bitvector_srem (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_SREME"]], "kind::bitvector_ssubo (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_SSUBOE"]], "kind::bitvector_sub (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_SUBE"]], "kind::bitvector_to_nat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16BITVECTOR_TO_NATE"]], "kind::bitvector_uaddo (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_UADDOE"]], "kind::bitvector_udiv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_UDIVE"]], "kind::bitvector_uge (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_UGEE"]], "kind::bitvector_ugt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_UGTE"]], "kind::bitvector_ule (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_ULEE"]], "kind::bitvector_ult (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_ULTE"]], "kind::bitvector_ultbv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_ULTBVE"]], "kind::bitvector_umulo (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_UMULOE"]], "kind::bitvector_urem (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_UREME"]], "kind::bitvector_usubo (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15BITVECTOR_USUBOE"]], "kind::bitvector_xnor (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14BITVECTOR_XNORE"]], "kind::bitvector_xor (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13BITVECTOR_XORE"]], "kind::bitvector_zero_extend (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21BITVECTOR_ZERO_EXTENDE"]], "kind::cardinality_constraint (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind22CARDINALITY_CONSTRAINTE"]], "kind::constant (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8CONSTANTE"]], "kind::const_array (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11CONST_ARRAYE"]], "kind::const_bitvector (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15CONST_BITVECTORE"]], "kind::const_boolean (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13CONST_BOOLEANE"]], "kind::const_finite_field (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18CONST_FINITE_FIELDE"]], "kind::const_floatingpoint (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind19CONST_FLOATINGPOINTE"]], "kind::const_integer (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13CONST_INTEGERE"]], "kind::const_rational (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14CONST_RATIONALE"]], "kind::const_roundingmode (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18CONST_ROUNDINGMODEE"]], "kind::const_sequence (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14CONST_SEQUENCEE"]], "kind::const_string (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12CONST_STRINGE"]], "kind::cosecant (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8COSECANTE"]], "kind::cosine (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind6COSINEE"]], "kind::cotangent (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9COTANGENTE"]], "kind::distinct (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8DISTINCTE"]], "kind::divisible (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9DIVISIBLEE"]], "kind::division (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8DIVISIONE"]], "kind::equal (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind5EQUALE"]], "kind::eq_range (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8EQ_RANGEE"]], "kind::exists (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind6EXISTSE"]], "kind::exponential (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11EXPONENTIALE"]], "kind::finite_field_add (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16FINITE_FIELD_ADDE"]], "kind::finite_field_bitsum (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind19FINITE_FIELD_BITSUME"]], "kind::finite_field_mult (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FINITE_FIELD_MULTE"]], "kind::finite_field_neg (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16FINITE_FIELD_NEGE"]], "kind::floatingpoint_abs (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_ABSE"]], "kind::floatingpoint_add (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_ADDE"]], "kind::floatingpoint_div (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_DIVE"]], "kind::floatingpoint_eq (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16FLOATINGPOINT_EQE"]], "kind::floatingpoint_fma (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_FMAE"]], "kind::floatingpoint_fp (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16FLOATINGPOINT_FPE"]], "kind::floatingpoint_geq (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_GEQE"]], "kind::floatingpoint_gt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16FLOATINGPOINT_GTE"]], "kind::floatingpoint_is_inf (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_INFE"]], "kind::floatingpoint_is_nan (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_NANE"]], "kind::floatingpoint_is_neg (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_NEGE"]], "kind::floatingpoint_is_normal (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind23FLOATINGPOINT_IS_NORMALE"]], "kind::floatingpoint_is_pos (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind20FLOATINGPOINT_IS_POSE"]], "kind::floatingpoint_is_subnormal (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind26FLOATINGPOINT_IS_SUBNORMALE"]], "kind::floatingpoint_is_zero (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21FLOATINGPOINT_IS_ZEROE"]], "kind::floatingpoint_leq (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_LEQE"]], "kind::floatingpoint_lt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16FLOATINGPOINT_LTE"]], "kind::floatingpoint_max (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_MAXE"]], "kind::floatingpoint_min (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_MINE"]], "kind::floatingpoint_mult (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18FLOATINGPOINT_MULTE"]], "kind::floatingpoint_neg (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_NEGE"]], "kind::floatingpoint_rem (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_REME"]], "kind::floatingpoint_rti (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_RTIE"]], "kind::floatingpoint_sqrt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18FLOATINGPOINT_SQRTE"]], "kind::floatingpoint_sub (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17FLOATINGPOINT_SUBE"]], "kind::floatingpoint_to_fp_from_fp (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind27FLOATINGPOINT_TO_FP_FROM_FPE"]], "kind::floatingpoint_to_fp_from_ieee_bv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind32FLOATINGPOINT_TO_FP_FROM_IEEE_BVE"]], "kind::floatingpoint_to_fp_from_real (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind29FLOATINGPOINT_TO_FP_FROM_REALE"]], "kind::floatingpoint_to_fp_from_sbv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind28FLOATINGPOINT_TO_FP_FROM_SBVE"]], "kind::floatingpoint_to_fp_from_ubv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind28FLOATINGPOINT_TO_FP_FROM_UBVE"]], "kind::floatingpoint_to_real (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21FLOATINGPOINT_TO_REALE"]], "kind::floatingpoint_to_sbv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind20FLOATINGPOINT_TO_SBVE"]], "kind::floatingpoint_to_ubv (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind20FLOATINGPOINT_TO_UBVE"]], "kind::forall (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind6FORALLE"]], "kind::geq (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3GEQE"]], "kind::gt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind2GTE"]], "kind::ho_apply (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8HO_APPLYE"]], "kind::iand (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind4IANDE"]], "kind::implies (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7IMPLIESE"]], "kind::inst_add_to_pool (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16INST_ADD_TO_POOLE"]], "kind::inst_attribute (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14INST_ATTRIBUTEE"]], "kind::inst_no_pattern (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15INST_NO_PATTERNE"]], "kind::inst_pattern (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12INST_PATTERNE"]], "kind::inst_pattern_list (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17INST_PATTERN_LISTE"]], "kind::inst_pool (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9INST_POOLE"]], "kind::internal_kind (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13INTERNAL_KINDE"]], "kind::ints_division (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13INTS_DIVISIONE"]], "kind::ints_modulus (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12INTS_MODULUSE"]], "kind::int_to_bitvector (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16INT_TO_BITVECTORE"]], "kind::is_integer (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10IS_INTEGERE"]], "kind::ite (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3ITEE"]], "kind::lambda (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind6LAMBDAE"]], "kind::last_kind (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9LAST_KINDE"]], "kind::leq (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3LEQE"]], "kind::lt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind2LTE"]], "kind::match (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind5MATCHE"]], "kind::match_bind_case (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15MATCH_BIND_CASEE"]], "kind::match_case (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10MATCH_CASEE"]], "kind::mult (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind4MULTE"]], "kind::neg (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3NEGE"]], "kind::not (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3NOTE"]], "kind::null_term (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9NULL_TERME"]], "kind::or (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind2ORE"]], "kind::pi (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind2PIE"]], "kind::pow (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3POWE"]], "kind::pow2 (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind4POW2E"]], "kind::regexp_all (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10REGEXP_ALLE"]], "kind::regexp_allchar (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14REGEXP_ALLCHARE"]], "kind::regexp_complement (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17REGEXP_COMPLEMENTE"]], "kind::regexp_concat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13REGEXP_CONCATE"]], "kind::regexp_diff (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11REGEXP_DIFFE"]], "kind::regexp_inter (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12REGEXP_INTERE"]], "kind::regexp_loop (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11REGEXP_LOOPE"]], "kind::regexp_none (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11REGEXP_NONEE"]], "kind::regexp_opt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10REGEXP_OPTE"]], "kind::regexp_plus (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11REGEXP_PLUSE"]], "kind::regexp_range (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12REGEXP_RANGEE"]], "kind::regexp_repeat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13REGEXP_REPEATE"]], "kind::regexp_star (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11REGEXP_STARE"]], "kind::regexp_union (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12REGEXP_UNIONE"]], "kind::relation_aggregate (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18RELATION_AGGREGATEE"]], "kind::relation_group (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14RELATION_GROUPE"]], "kind::relation_iden (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13RELATION_IDENE"]], "kind::relation_join (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13RELATION_JOINE"]], "kind::relation_join_image (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind19RELATION_JOIN_IMAGEE"]], "kind::relation_product (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16RELATION_PRODUCTE"]], "kind::relation_project (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16RELATION_PROJECTE"]], "kind::relation_tclosure (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17RELATION_TCLOSUREE"]], "kind::relation_transpose (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18RELATION_TRANSPOSEE"]], "kind::secant (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind6SECANTE"]], "kind::select (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind6SELECTE"]], "kind::sep_emp (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7SEP_EMPE"]], "kind::sep_nil (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7SEP_NILE"]], "kind::sep_pto (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7SEP_PTOE"]], "kind::sep_star (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8SEP_STARE"]], "kind::sep_wand (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8SEP_WANDE"]], "kind::seq_at (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind6SEQ_ATE"]], "kind::seq_concat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SEQ_CONCATE"]], "kind::seq_contains (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12SEQ_CONTAINSE"]], "kind::seq_extract (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11SEQ_EXTRACTE"]], "kind::seq_indexof (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11SEQ_INDEXOFE"]], "kind::seq_length (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SEQ_LENGTHE"]], "kind::seq_nth (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7SEQ_NTHE"]], "kind::seq_prefix (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SEQ_PREFIXE"]], "kind::seq_replace (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11SEQ_REPLACEE"]], "kind::seq_replace_all (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15SEQ_REPLACE_ALLE"]], "kind::seq_rev (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7SEQ_REVE"]], "kind::seq_suffix (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SEQ_SUFFIXE"]], "kind::seq_unit (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8SEQ_UNITE"]], "kind::seq_update (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SEQ_UPDATEE"]], "kind::set_card (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8SET_CARDE"]], "kind::set_choose (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SET_CHOOSEE"]], "kind::set_complement (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14SET_COMPLEMENTE"]], "kind::set_comprehension (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17SET_COMPREHENSIONE"]], "kind::set_empty (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9SET_EMPTYE"]], "kind::set_filter (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SET_FILTERE"]], "kind::set_fold (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8SET_FOLDE"]], "kind::set_insert (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SET_INSERTE"]], "kind::set_inter (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9SET_INTERE"]], "kind::set_is_singleton (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16SET_IS_SINGLETONE"]], "kind::set_map (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7SET_MAPE"]], "kind::set_member (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SET_MEMBERE"]], "kind::set_minus (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9SET_MINUSE"]], "kind::set_singleton (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13SET_SINGLETONE"]], "kind::set_subset (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10SET_SUBSETE"]], "kind::set_union (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9SET_UNIONE"]], "kind::set_universe (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind12SET_UNIVERSEE"]], "kind::sexpr (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind5SEXPRE"]], "kind::sine (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind4SINEE"]], "kind::skolem_add_to_pool (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18SKOLEM_ADD_TO_POOLE"]], "kind::sqrt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind4SQRTE"]], "kind::store (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind5STOREE"]], "kind::string_charat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_CHARATE"]], "kind::string_concat (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_CONCATE"]], "kind::string_contains (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15STRING_CONTAINSE"]], "kind::string_from_code (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16STRING_FROM_CODEE"]], "kind::string_from_int (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15STRING_FROM_INTE"]], "kind::string_indexof (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14STRING_INDEXOFE"]], "kind::string_indexof_re (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17STRING_INDEXOF_REE"]], "kind::string_in_regexp (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16STRING_IN_REGEXPE"]], "kind::string_is_digit (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15STRING_IS_DIGITE"]], "kind::string_length (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_LENGTHE"]], "kind::string_leq (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10STRING_LEQE"]], "kind::string_lt (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind9STRING_LTE"]], "kind::string_prefix (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_PREFIXE"]], "kind::string_replace (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14STRING_REPLACEE"]], "kind::string_replace_all (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind18STRING_REPLACE_ALLE"]], "kind::string_replace_re (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind17STRING_REPLACE_REE"]], "kind::string_replace_re_all (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind21STRING_REPLACE_RE_ALLE"]], "kind::string_rev (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10STRING_REVE"]], "kind::string_substr (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_SUBSTRE"]], "kind::string_suffix (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_SUFFIXE"]], "kind::string_to_code (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14STRING_TO_CODEE"]], "kind::string_to_int (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_TO_INTE"]], "kind::string_to_lower (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15STRING_TO_LOWERE"]], "kind::string_to_regexp (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind16STRING_TO_REGEXPE"]], "kind::string_to_upper (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15STRING_TO_UPPERE"]], "kind::string_update (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13STRING_UPDATEE"]], "kind::sub (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3SUBE"]], "kind::table_aggregate (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind15TABLE_AGGREGATEE"]], "kind::table_group (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind11TABLE_GROUPE"]], "kind::table_join (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10TABLE_JOINE"]], "kind::table_product (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13TABLE_PRODUCTE"]], "kind::table_project (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13TABLE_PROJECTE"]], "kind::tangent (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7TANGENTE"]], "kind::to_integer (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind10TO_INTEGERE"]], "kind::to_real (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7TO_REALE"]], "kind::tuple_project (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13TUPLE_PROJECTE"]], "kind::undefined_kind (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind14UNDEFINED_KINDE"]], "kind::uninterpreted_sort_value (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind24UNINTERPRETED_SORT_VALUEE"]], "kind::variable (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind8VARIABLEE"]], "kind::variable_list (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind13VARIABLE_LISTE"]], "kind::witness (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind7WITNESSE"]], "kind::xor (c++ enumerator)": [[12, "_CPPv4N4cvc54Kind3XORE"]], "std::hash<cvc5::kind> (c++ struct)": [[12, "_CPPv4IENSt4hashIN4cvc54KindEEE"]], "std::hash<cvc5::kind>::operator() (c++ function)": [[12, "_CPPv4NKSt4hashIN4cvc54KindEEclEN4cvc54KindE"]], "modes::blockmodelsmode (c++ enum)": [[13, "_CPPv4N4cvc55modes15BlockModelsModeE"]], "modes::blockmodelsmode::literals (c++ enumerator)": [[13, "_CPPv4N4cvc55modes15BlockModelsMode8LITERALSE"]], "modes::blockmodelsmode::values (c++ enumerator)": [[13, "_CPPv4N4cvc55modes15BlockModelsMode6VALUESE"]], "modes::findsynthtarget (c++ enum)": [[13, "_CPPv4N4cvc55modes15FindSynthTargetE"]], "modes::findsynthtarget::enum (c++ enumerator)": [[13, "_CPPv4N4cvc55modes15FindSynthTarget4ENUME"]], "modes::findsynthtarget::query (c++ enumerator)": [[13, "_CPPv4N4cvc55modes15FindSynthTarget5QUERYE"]], "modes::findsynthtarget::rewrite (c++ enumerator)": [[13, "_CPPv4N4cvc55modes15FindSynthTarget7REWRITEE"]], "modes::findsynthtarget::rewrite_input (c++ enumerator)": [[13, "_CPPv4N4cvc55modes15FindSynthTarget13REWRITE_INPUTE"]], "modes::findsynthtarget::rewrite_unsound (c++ enumerator)": [[13, "_CPPv4N4cvc55modes15FindSynthTarget15REWRITE_UNSOUNDE"]], "modes::learnedlittype (c++ enum)": [[13, "_CPPv4N4cvc55modes14LearnedLitTypeE"]], "modes::learnedlittype::constant_prop (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14LearnedLitType13CONSTANT_PROPE"]], "modes::learnedlittype::input (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14LearnedLitType5INPUTE"]], "modes::learnedlittype::internal (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14LearnedLitType8INTERNALE"]], "modes::learnedlittype::preprocess (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14LearnedLitType10PREPROCESSE"]], "modes::learnedlittype::preprocess_solved (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14LearnedLitType17PREPROCESS_SOLVEDE"]], "modes::learnedlittype::solvable (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14LearnedLitType8SOLVABLEE"]], "modes::learnedlittype::unknown (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14LearnedLitType7UNKNOWNE"]], "modes::proofcomponent (c++ enum)": [[13, "_CPPv4N4cvc55modes14ProofComponentE"]], "modes::proofcomponent::full (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14ProofComponent4FULLE"]], "modes::proofcomponent::preprocess (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14ProofComponent10PREPROCESSE"]], "modes::proofcomponent::raw_preprocess (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14ProofComponent14RAW_PREPROCESSE"]], "modes::proofcomponent::sat (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14ProofComponent3SATE"]], "modes::proofcomponent::theory_lemmas (c++ enumerator)": [[13, "_CPPv4N4cvc55modes14ProofComponent13THEORY_LEMMASE"]], "modes::operator<< (c++ function)": [[13, "_CPPv4N4cvc55modeslsERNSt7ostreamE14LearnedLitType"], [13, "_CPPv4N4cvc55modeslsERNSt7ostreamE14ProofComponent"], [13, "_CPPv4N4cvc55modeslsERNSt7ostreamE15BlockModelsMode"], [13, "_CPPv4N4cvc55modeslsERNSt7ostreamE15FindSynthTarget"]], "op (c++ class)": [[14, "_CPPv4N4cvc52OpE"]], "op::op (c++ function)": [[14, "_CPPv4N4cvc52Op2OpEv"]], "op::getkind (c++ function)": [[14, "_CPPv4NK4cvc52Op7getKindEv"]], "op::getnumindices (c++ function)": [[14, "_CPPv4NK4cvc52Op13getNumIndicesEv"]], "op::isindexed (c++ function)": [[14, "_CPPv4NK4cvc52Op9isIndexedEv"]], "op::isnull (c++ function)": [[14, "_CPPv4NK4cvc52Op6isNullEv"]], "op::operator!= (c++ function)": [[14, "_CPPv4NK4cvc52OpneERK2Op"]], "op::operator== (c++ function)": [[14, "_CPPv4NK4cvc52OpeqERK2Op"]], "op::operator[] (c++ function)": [[14, "_CPPv4NK4cvc52OpixE6size_t"]], "op::tostring (c++ function)": [[14, "_CPPv4NK4cvc52Op8toStringEv"]], "op::~op (c++ function)": [[14, "_CPPv4N4cvc52OpD0Ev"]], "std::hash<cvc5::op> (c++ struct)": [[14, "_CPPv4IENSt4hashIN4cvc52OpEEE"]], "std::hash<cvc5::op>::operator() (c++ function)": [[14, "_CPPv4NKSt4hashIN4cvc52OpEEclERKN4cvc52OpE"]], "optioninfo (c++ struct)": [[15, "_CPPv4N4cvc510OptionInfoE"]], "optioninfo::modeinfo (c++ struct)": [[15, "_CPPv4N4cvc510OptionInfo8ModeInfoE"]], "optioninfo::modeinfo::currentvalue (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo8ModeInfo12currentValueE"]], "optioninfo::modeinfo::defaultvalue (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo8ModeInfo12defaultValueE"]], "optioninfo::modeinfo::modes (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo8ModeInfo5modesE"]], "optioninfo::numberinfo (c++ struct)": [[15, "_CPPv4I0EN4cvc510OptionInfo10NumberInfoE"]], "optioninfo::numberinfo::currentvalue (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo10NumberInfo12currentValueE"]], "optioninfo::numberinfo::defaultvalue (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo10NumberInfo12defaultValueE"]], "optioninfo::numberinfo::maximum (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo10NumberInfo7maximumE"]], "optioninfo::numberinfo::minimum (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo10NumberInfo7minimumE"]], "optioninfo::optioninfovariant (c++ type)": [[15, "_CPPv4N4cvc510OptionInfo17OptionInfoVariantE"]], "optioninfo::valueinfo (c++ struct)": [[15, "_CPPv4I0EN4cvc510OptionInfo9ValueInfoE"]], "optioninfo::valueinfo::currentvalue (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo9ValueInfo12currentValueE"]], "optioninfo::valueinfo::defaultvalue (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo9ValueInfo12defaultValueE"]], "optioninfo::voidinfo (c++ struct)": [[15, "_CPPv4N4cvc510OptionInfo8VoidInfoE"]], "optioninfo::aliases (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo7aliasesE"]], "optioninfo::boolvalue (c++ function)": [[15, "_CPPv4NK4cvc510OptionInfo9boolValueEv"]], "optioninfo::doublevalue (c++ function)": [[15, "_CPPv4NK4cvc510OptionInfo11doubleValueEv"]], "optioninfo::intvalue (c++ function)": [[15, "_CPPv4NK4cvc510OptionInfo8intValueEv"]], "optioninfo::isexpert (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo8isExpertE"]], "optioninfo::name (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo4nameE"]], "optioninfo::setbyuser (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo9setByUserE"]], "optioninfo::stringvalue (c++ function)": [[15, "_CPPv4NK4cvc510OptionInfo11stringValueEv"]], "optioninfo::uintvalue (c++ function)": [[15, "_CPPv4NK4cvc510OptionInfo9uintValueEv"]], "optioninfo::valueinfo (c++ member)": [[15, "_CPPv4N4cvc510OptionInfo9valueInfoE"]], "parser::parserexception (c++ class)": [[16, "_CPPv4N4cvc56parser15ParserExceptionE"]], "parser::parserexception::parserexception (c++ function)": [[16, "_CPPv4N4cvc56parser15ParserException15ParserExceptionEPKc"], [16, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringE"], [16, "_CPPv4N4cvc56parser15ParserException15ParserExceptionERKNSt6stringERKNSt6stringEmm"], [16, "_CPPv4N4cvc56parser15ParserException15ParserExceptionEv"]], "parser::parserexception::getcolumn (c++ function)": [[16, "_CPPv4NK4cvc56parser15ParserException9getColumnEv"]], "parser::parserexception::getfilename (c++ function)": [[16, "_CPPv4NK4cvc56parser15ParserException11getFilenameEv"]], "parser::parserexception::getline (c++ function)": [[16, "_CPPv4NK4cvc56parser15ParserException7getLineEv"]], "parser::parserexception::tostream (c++ function)": [[16, "_CPPv4NK4cvc56parser15ParserException8toStreamERNSt7ostreamE"]], "result (c++ class)": [[18, "_CPPv4N4cvc56ResultE"]], "result::result (c++ function)": [[18, "_CPPv4N4cvc56Result6ResultEv"]], "result::getunknownexplanation (c++ function)": [[18, "_CPPv4NK4cvc56Result21getUnknownExplanationEv"]], "result::isnull (c++ function)": [[18, "_CPPv4NK4cvc56Result6isNullEv"]], "result::issat (c++ function)": [[18, "_CPPv4NK4cvc56Result5isSatEv"]], "result::isunknown (c++ function)": [[18, "_CPPv4NK4cvc56Result9isUnknownEv"]], "result::isunsat (c++ function)": [[18, "_CPPv4NK4cvc56Result7isUnsatEv"]], "result::operator!= (c++ function)": [[18, "_CPPv4NK4cvc56ResultneERK6Result"]], "result::operator== (c++ function)": [[18, "_CPPv4NK4cvc56ResulteqERK6Result"]], "result::tostring (c++ function)": [[18, "_CPPv4NK4cvc56Result8toStringEv"]], "roundingmode (c++ enum)": [[19, "_CPPv4N4cvc512RoundingModeE"]], "roundingmode::round_nearest_ties_to_away (c++ enumerator)": [[19, "_CPPv4N4cvc512RoundingMode26ROUND_NEAREST_TIES_TO_AWAYE"]], "roundingmode::round_nearest_ties_to_even (c++ enumerator)": [[19, "_CPPv4N4cvc512RoundingMode26ROUND_NEAREST_TIES_TO_EVENE"]], "roundingmode::round_toward_negative (c++ enumerator)": [[19, "_CPPv4N4cvc512RoundingMode21ROUND_TOWARD_NEGATIVEE"]], "roundingmode::round_toward_positive (c++ enumerator)": [[19, "_CPPv4N4cvc512RoundingMode21ROUND_TOWARD_POSITIVEE"]], "roundingmode::round_toward_zero (c++ enumerator)": [[19, "_CPPv4N4cvc512RoundingMode17ROUND_TOWARD_ZEROE"]], "solver (c++ class)": [[20, "_CPPv4N4cvc56SolverE"]], "solver::solver (c++ function)": [[20, "_CPPv4N4cvc56Solver6SolverERK6Solver"], [20, "_CPPv4N4cvc56Solver6SolverEv"]], "solver::addsygusassume (c++ function)": [[20, "_CPPv4NK4cvc56Solver14addSygusAssumeERK4Term"]], "solver::addsygusconstraint (c++ function)": [[20, "_CPPv4NK4cvc56Solver18addSygusConstraintERK4Term"]], "solver::addsygusinvconstraint (c++ function)": [[20, "_CPPv4NK4cvc56Solver21addSygusInvConstraintERK4TermRK4TermRK4TermRK4Term"]], "solver::assertformula (c++ function)": [[20, "_CPPv4NK4cvc56Solver13assertFormulaERK4Term"]], "solver::blockmodel (c++ function)": [[20, "_CPPv4NK4cvc56Solver10blockModelEN5modes15BlockModelsModeE"]], "solver::blockmodelvalues (c++ function)": [[20, "_CPPv4NK4cvc56Solver16blockModelValuesERKNSt6vectorI4TermEE"]], "solver::checksat (c++ function)": [[20, "_CPPv4NK4cvc56Solver8checkSatEv"]], "solver::checksatassuming (c++ function)": [[20, "_CPPv4NK4cvc56Solver16checkSatAssumingERK4Term"], [20, "_CPPv4NK4cvc56Solver16checkSatAssumingERKNSt6vectorI4TermEE"]], "solver::checksynth (c++ function)": [[20, "_CPPv4NK4cvc56Solver10checkSynthEv"]], "solver::checksynthnext (c++ function)": [[20, "_CPPv4NK4cvc56Solver14checkSynthNextEv"]], "solver::declaredatatype (c++ function)": [[20, "_CPPv4NK4cvc56Solver15declareDatatypeERKNSt6stringERKNSt6vectorI23DatatypeConstructorDeclEE"]], "solver::declarefun (c++ function)": [[20, "_CPPv4NK4cvc56Solver10declareFunERKNSt6stringERKNSt6vectorI4SortEERK4Sortb"]], "solver::declareoraclefun (c++ function)": [[20, "_CPPv4NK4cvc56Solver16declareOracleFunERKNSt6stringERKNSt6vectorI4SortEERK4SortNSt8functionIF4TermRKNSt6vectorI4TermEEEEE"]], "solver::declarepool (c++ function)": [[20, "_CPPv4NK4cvc56Solver11declarePoolERKNSt6stringERK4SortRKNSt6vectorI4TermEE"]], "solver::declaresepheap (c++ function)": [[20, "_CPPv4NK4cvc56Solver14declareSepHeapERK4SortRK4Sort"]], "solver::declaresort (c++ function)": [[20, "_CPPv4NK4cvc56Solver11declareSortERKNSt6stringE8uint32_tb"]], "solver::declaresygusvar (c++ function)": [[20, "_CPPv4NK4cvc56Solver15declareSygusVarERKNSt6stringERK4Sort"]], "solver::definefun (c++ function)": [[20, "_CPPv4NK4cvc56Solver9defineFunERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb"]], "solver::definefunrec (c++ function)": [[20, "_CPPv4NK4cvc56Solver12defineFunRecERK4TermRKNSt6vectorI4TermEERK4Termb"], [20, "_CPPv4NK4cvc56Solver12defineFunRecERKNSt6stringERKNSt6vectorI4TermEERK4SortRK4Termb"]], "solver::definefunsrec (c++ function)": [[20, "_CPPv4NK4cvc56Solver13defineFunsRecERKNSt6vectorI4TermEERKNSt6vectorINSt6vectorI4TermEEEERKNSt6vectorI4TermEEb"]], "solver::findsynth (c++ function)": [[20, "_CPPv4NK4cvc56Solver9findSynthEN5modes15FindSynthTargetE"], [20, "_CPPv4NK4cvc56Solver9findSynthEN5modes15FindSynthTargetER7Grammar"]], "solver::findsynthnext (c++ function)": [[20, "_CPPv4NK4cvc56Solver13findSynthNextEv"]], "solver::getabduct (c++ function)": [[20, "_CPPv4NK4cvc56Solver9getAbductERK4Term"], [20, "_CPPv4NK4cvc56Solver9getAbductERK4TermR7Grammar"]], "solver::getabductnext (c++ function)": [[20, "_CPPv4NK4cvc56Solver13getAbductNextEv"]], "solver::getassertions (c++ function)": [[20, "_CPPv4NK4cvc56Solver13getAssertionsEv"]], "solver::getbooleansort (c++ function)": [[20, "_CPPv4NK4cvc56Solver14getBooleanSortEv"]], "solver::getdifficulty (c++ function)": [[20, "_CPPv4NK4cvc56Solver13getDifficultyEv"]], "solver::getdriveroptions (c++ function)": [[20, "_CPPv4NK4cvc56Solver16getDriverOptionsEv"]], "solver::getinfo (c++ function)": [[20, "_CPPv4NK4cvc56Solver7getInfoERKNSt6stringE"]], "solver::getinstantiations (c++ function)": [[20, "_CPPv4NK4cvc56Solver17getInstantiationsEv"]], "solver::getintegersort (c++ function)": [[20, "_CPPv4NK4cvc56Solver14getIntegerSortEv"]], "solver::getinterpolant (c++ function)": [[20, "_CPPv4NK4cvc56Solver14getInterpolantERK4Term"], [20, "_CPPv4NK4cvc56Solver14getInterpolantERK4TermR7Grammar"]], "solver::getinterpolantnext (c++ function)": [[20, "_CPPv4NK4cvc56Solver18getInterpolantNextEv"]], "solver::getlearnedliterals (c++ function)": [[20, "_CPPv4NK4cvc56Solver18getLearnedLiteralsEN5modes14LearnedLitTypeE"]], "solver::getlogic (c++ function)": [[20, "_CPPv4NK4cvc56Solver8getLogicEv"]], "solver::getmodel (c++ function)": [[20, "_CPPv4NK4cvc56Solver8getModelERKNSt6vectorI4SortEERKNSt6vectorI4TermEE"]], "solver::getmodeldomainelements (c++ function)": [[20, "_CPPv4NK4cvc56Solver22getModelDomainElementsERK4Sort"]], "solver::getoption (c++ function)": [[20, "_CPPv4NK4cvc56Solver9getOptionERKNSt6stringE"]], "solver::getoptioninfo (c++ function)": [[20, "_CPPv4NK4cvc56Solver13getOptionInfoERKNSt6stringE"]], "solver::getoptionnames (c++ function)": [[20, "_CPPv4NK4cvc56Solver14getOptionNamesEv"]], "solver::getoutput (c++ function)": [[20, "_CPPv4NK4cvc56Solver9getOutputERKNSt6stringE"]], "solver::getproof (c++ function)": [[20, "_CPPv4NK4cvc56Solver8getProofEN5modes14ProofComponentE"]], "solver::getquantifierelimination (c++ function)": [[20, "_CPPv4NK4cvc56Solver24getQuantifierEliminationERK4Term"]], "solver::getquantifiereliminationdisjunct (c++ function)": [[20, "_CPPv4NK4cvc56Solver32getQuantifierEliminationDisjunctERK4Term"]], "solver::getrealsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver11getRealSortEv"]], "solver::getregexpsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver13getRegExpSortEv"]], "solver::getroundingmodesort (c++ function)": [[20, "_CPPv4NK4cvc56Solver19getRoundingModeSortEv"]], "solver::getstatistics (c++ function)": [[20, "_CPPv4NK4cvc56Solver13getStatisticsEv"]], "solver::getstringsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver13getStringSortEv"]], "solver::getsygusassumptions (c++ function)": [[20, "_CPPv4NK4cvc56Solver19getSygusAssumptionsEv"]], "solver::getsygusconstraints (c++ function)": [[20, "_CPPv4NK4cvc56Solver19getSygusConstraintsEv"]], "solver::getsynthsolution (c++ function)": [[20, "_CPPv4NK4cvc56Solver16getSynthSolutionERK4Term"]], "solver::getsynthsolutions (c++ function)": [[20, "_CPPv4NK4cvc56Solver17getSynthSolutionsERKNSt6vectorI4TermEE"]], "solver::gettimeoutcore (c++ function)": [[20, "_CPPv4NK4cvc56Solver14getTimeoutCoreEv"]], "solver::gettimeoutcoreassuming (c++ function)": [[20, "_CPPv4NK4cvc56Solver22getTimeoutCoreAssumingERKNSt6vectorI4TermEE"]], "solver::getunsatassumptions (c++ function)": [[20, "_CPPv4NK4cvc56Solver19getUnsatAssumptionsEv"]], "solver::getunsatcore (c++ function)": [[20, "_CPPv4NK4cvc56Solver12getUnsatCoreEv"]], "solver::getunsatcorelemmas (c++ function)": [[20, "_CPPv4NK4cvc56Solver18getUnsatCoreLemmasEv"]], "solver::getvalue (c++ function)": [[20, "_CPPv4NK4cvc56Solver8getValueERK4Term"], [20, "_CPPv4NK4cvc56Solver8getValueERKNSt6vectorI4TermEE"]], "solver::getvaluesepheap (c++ function)": [[20, "_CPPv4NK4cvc56Solver15getValueSepHeapEv"]], "solver::getvaluesepnil (c++ function)": [[20, "_CPPv4NK4cvc56Solver14getValueSepNilEv"]], "solver::getversion (c++ function)": [[20, "_CPPv4NK4cvc56Solver10getVersionEv"]], "solver::islogicset (c++ function)": [[20, "_CPPv4NK4cvc56Solver10isLogicSetEv"]], "solver::ismodelcoresymbol (c++ function)": [[20, "_CPPv4NK4cvc56Solver17isModelCoreSymbolERK4Term"]], "solver::isoutputon (c++ function)": [[20, "_CPPv4NK4cvc56Solver10isOutputOnERKNSt6stringE"]], "solver::mkabstractsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver14mkAbstractSortE8SortKind"]], "solver::mkarraysort (c++ function)": [[20, "_CPPv4NK4cvc56Solver11mkArraySortERK4SortRK4Sort"]], "solver::mkbagsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver9mkBagSortERK4Sort"]], "solver::mkbitvector (c++ function)": [[20, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_t8uint64_t"], [20, "_CPPv4NK4cvc56Solver11mkBitVectorE8uint32_tRKNSt6stringE8uint32_t"]], "solver::mkbitvectorsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver15mkBitVectorSortE8uint32_t"]], "solver::mkboolean (c++ function)": [[20, "_CPPv4NK4cvc56Solver9mkBooleanEb"]], "solver::mkcardinalityconstraint (c++ function)": [[20, "_CPPv4NK4cvc56Solver23mkCardinalityConstraintERK4Sort8uint32_t"]], "solver::mkconst (c++ function)": [[20, "_CPPv4NK4cvc56Solver7mkConstERK4SortRKNSt8optionalINSt6stringEEE"]], "solver::mkconstarray (c++ function)": [[20, "_CPPv4NK4cvc56Solver12mkConstArrayERK4SortRK4Term"]], "solver::mkdatatypeconstructordecl (c++ function)": [[20, "_CPPv4N4cvc56Solver25mkDatatypeConstructorDeclERKNSt6stringE"]], "solver::mkdatatypedecl (c++ function)": [[20, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringERKNSt6vectorI4SortEEb"], [20, "_CPPv4N4cvc56Solver14mkDatatypeDeclERKNSt6stringEb"]], "solver::mkdatatypesort (c++ function)": [[20, "_CPPv4NK4cvc56Solver14mkDatatypeSortERK12DatatypeDecl"]], "solver::mkdatatypesorts (c++ function)": [[20, "_CPPv4NK4cvc56Solver15mkDatatypeSortsERKNSt6vectorI12DatatypeDeclEE"]], "solver::mkemptybag (c++ function)": [[20, "_CPPv4NK4cvc56Solver10mkEmptyBagERK4Sort"]], "solver::mkemptysequence (c++ function)": [[20, "_CPPv4NK4cvc56Solver15mkEmptySequenceERK4Sort"]], "solver::mkemptyset (c++ function)": [[20, "_CPPv4NK4cvc56Solver10mkEmptySetERK4Sort"]], "solver::mkfalse (c++ function)": [[20, "_CPPv4NK4cvc56Solver7mkFalseEv"]], "solver::mkfinitefieldelem (c++ function)": [[20, "_CPPv4NK4cvc56Solver17mkFiniteFieldElemERKNSt6stringERK4Sort8uint32_t"]], "solver::mkfinitefieldsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver17mkFiniteFieldSortERKNSt6stringE8uint32_t"]], "solver::mkfloatingpoint (c++ function)": [[20, "_CPPv4NK4cvc56Solver15mkFloatingPointE8uint32_t8uint32_tRK4Term"], [20, "_CPPv4NK4cvc56Solver15mkFloatingPointERK4TermRK4TermRK4Term"]], "solver::mkfloatingpointnan (c++ function)": [[20, "_CPPv4NK4cvc56Solver18mkFloatingPointNaNE8uint32_t8uint32_t"]], "solver::mkfloatingpointneginf (c++ function)": [[20, "_CPPv4NK4cvc56Solver21mkFloatingPointNegInfE8uint32_t8uint32_t"]], "solver::mkfloatingpointnegzero (c++ function)": [[20, "_CPPv4NK4cvc56Solver22mkFloatingPointNegZeroE8uint32_t8uint32_t"]], "solver::mkfloatingpointposinf (c++ function)": [[20, "_CPPv4NK4cvc56Solver21mkFloatingPointPosInfE8uint32_t8uint32_t"]], "solver::mkfloatingpointposzero (c++ function)": [[20, "_CPPv4NK4cvc56Solver22mkFloatingPointPosZeroE8uint32_t8uint32_t"]], "solver::mkfloatingpointsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver19mkFloatingPointSortE8uint32_t8uint32_t"]], "solver::mkfunctionsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver14mkFunctionSortERKNSt6vectorI4SortEERK4Sort"]], "solver::mkgrammar (c++ function)": [[20, "_CPPv4NK4cvc56Solver9mkGrammarERKNSt6vectorI4TermEERKNSt6vectorI4TermEE"]], "solver::mkinteger (c++ function)": [[20, "_CPPv4NK4cvc56Solver9mkIntegerE7int64_t"], [20, "_CPPv4NK4cvc56Solver9mkIntegerERKNSt6stringE"]], "solver::mkop (c++ function)": [[20, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6stringE"], [20, "_CPPv4NK4cvc56Solver4mkOpE4KindRKNSt6vectorI8uint32_tEE"]], "solver::mkparamsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver11mkParamSortERKNSt8optionalINSt6stringEEE"]], "solver::mkpi (c++ function)": [[20, "_CPPv4NK4cvc56Solver4mkPiEv"]], "solver::mkpredicatesort (c++ function)": [[20, "_CPPv4NK4cvc56Solver15mkPredicateSortERKNSt6vectorI4SortEE"]], "solver::mkreal (c++ function)": [[20, "_CPPv4NK4cvc56Solver6mkRealE7int64_t"], [20, "_CPPv4NK4cvc56Solver6mkRealE7int64_t7int64_t"], [20, "_CPPv4NK4cvc56Solver6mkRealERKNSt6stringE"]], "solver::mkrecordsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver12mkRecordSortERKNSt6vectorINSt4pairINSt6stringE4SortEEEE"]], "solver::mkregexpall (c++ function)": [[20, "_CPPv4NK4cvc56Solver11mkRegexpAllEv"]], "solver::mkregexpallchar (c++ function)": [[20, "_CPPv4NK4cvc56Solver15mkRegexpAllcharEv"]], "solver::mkregexpnone (c++ function)": [[20, "_CPPv4NK4cvc56Solver12mkRegexpNoneEv"]], "solver::mkroundingmode (c++ function)": [[20, "_CPPv4NK4cvc56Solver14mkRoundingModeE12RoundingMode"]], "solver::mksepemp (c++ function)": [[20, "_CPPv4NK4cvc56Solver8mkSepEmpEv"]], "solver::mksepnil (c++ function)": [[20, "_CPPv4NK4cvc56Solver8mkSepNilERK4Sort"]], "solver::mksequencesort (c++ function)": [[20, "_CPPv4NK4cvc56Solver14mkSequenceSortERK4Sort"]], "solver::mksetsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver9mkSetSortERK4Sort"]], "solver::mkstring (c++ function)": [[20, "_CPPv4NK4cvc56Solver8mkStringERKNSt6stringEb"], [20, "_CPPv4NK4cvc56Solver8mkStringERKNSt7wstringE"]], "solver::mkterm (c++ function)": [[20, "_CPPv4NK4cvc56Solver6mkTermE4KindRKNSt6vectorI4TermEE"], [20, "_CPPv4NK4cvc56Solver6mkTermERK2OpRKNSt6vectorI4TermEE"]], "solver::mktrue (c++ function)": [[20, "_CPPv4NK4cvc56Solver6mkTrueEv"]], "solver::mktuple (c++ function)": [[20, "_CPPv4NK4cvc56Solver7mkTupleERKNSt6vectorI4TermEE"]], "solver::mktuplesort (c++ function)": [[20, "_CPPv4NK4cvc56Solver11mkTupleSortERKNSt6vectorI4SortEE"]], "solver::mkuninterpretedsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver19mkUninterpretedSortERKNSt8optionalINSt6stringEEE"]], "solver::mkuninterpretedsortconstructorsort (c++ function)": [[20, "_CPPv4NK4cvc56Solver34mkUninterpretedSortConstructorSortE6size_tRKNSt8optionalINSt6stringEEE"]], "solver::mkuniverseset (c++ function)": [[20, "_CPPv4NK4cvc56Solver13mkUniverseSetERK4Sort"]], "solver::mkunresolveddatatypesort (c++ function)": [[20, "_CPPv4NK4cvc56Solver24mkUnresolvedDatatypeSortERKNSt6stringE6size_t"]], "solver::mkvar (c++ function)": [[20, "_CPPv4NK4cvc56Solver5mkVarERK4SortRKNSt8optionalINSt6stringEEE"]], "solver::operator= (c++ function)": [[20, "_CPPv4N4cvc56SolveraSERK6Solver"]], "solver::pop (c++ function)": [[20, "_CPPv4NK4cvc56Solver3popE8uint32_t"]], "solver::printstatisticssafe (c++ function)": [[20, "_CPPv4NK4cvc56Solver19printStatisticsSafeEi"]], "solver::prooftostring (c++ function)": [[20, "_CPPv4NK4cvc56Solver13proofToStringE5ProofN5modes11ProofFormatE"]], "solver::push (c++ function)": [[20, "_CPPv4NK4cvc56Solver4pushE8uint32_t"]], "solver::resetassertions (c++ function)": [[20, "_CPPv4NK4cvc56Solver15resetAssertionsEv"]], "solver::setinfo (c++ function)": [[20, "_CPPv4NK4cvc56Solver7setInfoERKNSt6stringERKNSt6stringE"]], "solver::setlogic (c++ function)": [[20, "_CPPv4NK4cvc56Solver8setLogicERKNSt6stringE"]], "solver::setoption (c++ function)": [[20, "_CPPv4NK4cvc56Solver9setOptionERKNSt6stringERKNSt6stringE"]], "solver::simplify (c++ function)": [[20, "_CPPv4N4cvc56Solver8simplifyERK4Term"]], "solver::synthfun (c++ function)": [[20, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEE4SortR7Grammar"], [20, "_CPPv4NK4cvc56Solver8synthFunERKNSt6stringERKNSt6vectorI4TermEERK4Sort"]], "solver::~solver (c++ function)": [[20, "_CPPv4N4cvc56SolverD0Ev"]], "sort (c++ class)": [[21, "_CPPv4N4cvc54SortE"]], "sort::sort (c++ function)": [[21, "_CPPv4N4cvc54Sort4SortEv"]], "sort::getabstractedkind (c++ function)": [[21, "_CPPv4NK4cvc54Sort17getAbstractedKindEv"]], "sort::getarrayelementsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort19getArrayElementSortEv"]], "sort::getarrayindexsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort17getArrayIndexSortEv"]], "sort::getbagelementsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort17getBagElementSortEv"]], "sort::getbitvectorsize (c++ function)": [[21, "_CPPv4NK4cvc54Sort16getBitVectorSizeEv"]], "sort::getdatatype (c++ function)": [[21, "_CPPv4NK4cvc54Sort11getDatatypeEv"]], "sort::getdatatypearity (c++ function)": [[21, "_CPPv4NK4cvc54Sort16getDatatypeArityEv"]], "sort::getdatatypeconstructorarity (c++ function)": [[21, "_CPPv4NK4cvc54Sort27getDatatypeConstructorArityEv"]], "sort::getdatatypeconstructorcodomainsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort34getDatatypeConstructorCodomainSortEv"]], "sort::getdatatypeconstructordomainsorts (c++ function)": [[21, "_CPPv4NK4cvc54Sort33getDatatypeConstructorDomainSortsEv"]], "sort::getdatatypeselectorcodomainsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort31getDatatypeSelectorCodomainSortEv"]], "sort::getdatatypeselectordomainsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort29getDatatypeSelectorDomainSortEv"]], "sort::getdatatypetestercodomainsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort29getDatatypeTesterCodomainSortEv"]], "sort::getdatatypetesterdomainsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort27getDatatypeTesterDomainSortEv"]], "sort::getfinitefieldsize (c++ function)": [[21, "_CPPv4NK4cvc54Sort18getFiniteFieldSizeEv"]], "sort::getfloatingpointexponentsize (c++ function)": [[21, "_CPPv4NK4cvc54Sort28getFloatingPointExponentSizeEv"]], "sort::getfloatingpointsignificandsize (c++ function)": [[21, "_CPPv4NK4cvc54Sort31getFloatingPointSignificandSizeEv"]], "sort::getfunctionarity (c++ function)": [[21, "_CPPv4NK4cvc54Sort16getFunctionArityEv"]], "sort::getfunctioncodomainsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort23getFunctionCodomainSortEv"]], "sort::getfunctiondomainsorts (c++ function)": [[21, "_CPPv4NK4cvc54Sort22getFunctionDomainSortsEv"]], "sort::getinstantiatedparameters (c++ function)": [[21, "_CPPv4NK4cvc54Sort25getInstantiatedParametersEv"]], "sort::getkind (c++ function)": [[21, "_CPPv4NK4cvc54Sort7getKindEv"]], "sort::getsequenceelementsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort22getSequenceElementSortEv"]], "sort::getsetelementsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort17getSetElementSortEv"]], "sort::getsymbol (c++ function)": [[21, "_CPPv4NK4cvc54Sort9getSymbolEv"]], "sort::gettuplelength (c++ function)": [[21, "_CPPv4NK4cvc54Sort14getTupleLengthEv"]], "sort::gettuplesorts (c++ function)": [[21, "_CPPv4NK4cvc54Sort13getTupleSortsEv"]], "sort::getuninterpretedsortconstructor (c++ function)": [[21, "_CPPv4NK4cvc54Sort31getUninterpretedSortConstructorEv"]], "sort::getuninterpretedsortconstructorarity (c++ function)": [[21, "_CPPv4NK4cvc54Sort36getUninterpretedSortConstructorArityEv"]], "sort::hassymbol (c++ function)": [[21, "_CPPv4NK4cvc54Sort9hasSymbolEv"]], "sort::instantiate (c++ function)": [[21, "_CPPv4NK4cvc54Sort11instantiateERKNSt6vectorI4SortEE"]], "sort::isabstract (c++ function)": [[21, "_CPPv4NK4cvc54Sort10isAbstractEv"]], "sort::isarray (c++ function)": [[21, "_CPPv4NK4cvc54Sort7isArrayEv"]], "sort::isbag (c++ function)": [[21, "_CPPv4NK4cvc54Sort5isBagEv"]], "sort::isbitvector (c++ function)": [[21, "_CPPv4NK4cvc54Sort11isBitVectorEv"]], "sort::isboolean (c++ function)": [[21, "_CPPv4NK4cvc54Sort9isBooleanEv"]], "sort::isdatatype (c++ function)": [[21, "_CPPv4NK4cvc54Sort10isDatatypeEv"]], "sort::isdatatypeconstructor (c++ function)": [[21, "_CPPv4NK4cvc54Sort21isDatatypeConstructorEv"]], "sort::isdatatypeselector (c++ function)": [[21, "_CPPv4NK4cvc54Sort18isDatatypeSelectorEv"]], "sort::isdatatypetester (c++ function)": [[21, "_CPPv4NK4cvc54Sort16isDatatypeTesterEv"]], "sort::isdatatypeupdater (c++ function)": [[21, "_CPPv4NK4cvc54Sort17isDatatypeUpdaterEv"]], "sort::isfinitefield (c++ function)": [[21, "_CPPv4NK4cvc54Sort13isFiniteFieldEv"]], "sort::isfloatingpoint (c++ function)": [[21, "_CPPv4NK4cvc54Sort15isFloatingPointEv"]], "sort::isfunction (c++ function)": [[21, "_CPPv4NK4cvc54Sort10isFunctionEv"]], "sort::isinstantiated (c++ function)": [[21, "_CPPv4NK4cvc54Sort14isInstantiatedEv"]], "sort::isinteger (c++ function)": [[21, "_CPPv4NK4cvc54Sort9isIntegerEv"]], "sort::isnull (c++ function)": [[21, "_CPPv4NK4cvc54Sort6isNullEv"]], "sort::ispredicate (c++ function)": [[21, "_CPPv4NK4cvc54Sort11isPredicateEv"]], "sort::isreal (c++ function)": [[21, "_CPPv4NK4cvc54Sort6isRealEv"]], "sort::isrecord (c++ function)": [[21, "_CPPv4NK4cvc54Sort8isRecordEv"]], "sort::isregexp (c++ function)": [[21, "_CPPv4NK4cvc54Sort8isRegExpEv"]], "sort::isroundingmode (c++ function)": [[21, "_CPPv4NK4cvc54Sort14isRoundingModeEv"]], "sort::issequence (c++ function)": [[21, "_CPPv4NK4cvc54Sort10isSequenceEv"]], "sort::isset (c++ function)": [[21, "_CPPv4NK4cvc54Sort5isSetEv"]], "sort::isstring (c++ function)": [[21, "_CPPv4NK4cvc54Sort8isStringEv"]], "sort::istuple (c++ function)": [[21, "_CPPv4NK4cvc54Sort7isTupleEv"]], "sort::isuninterpretedsort (c++ function)": [[21, "_CPPv4NK4cvc54Sort19isUninterpretedSortEv"]], "sort::isuninterpretedsortconstructor (c++ function)": [[21, "_CPPv4NK4cvc54Sort30isUninterpretedSortConstructorEv"]], "sort::operator!= (c++ function)": [[21, "_CPPv4NK4cvc54SortneERK4Sort"]], "sort::operator< (c++ function)": [[21, "_CPPv4NK4cvc54SortltERK4Sort"]], "sort::operator<= (c++ function)": [[21, "_CPPv4NK4cvc54SortleERK4Sort"]], "sort::operator== (c++ function)": [[21, "_CPPv4NK4cvc54SorteqERK4Sort"]], "sort::operator> (c++ function)": [[21, "_CPPv4NK4cvc54SortgtERK4Sort"]], "sort::operator>= (c++ function)": [[21, "_CPPv4NK4cvc54SortgeERK4Sort"]], "sort::substitute (c++ function)": [[21, "_CPPv4NK4cvc54Sort10substituteERK4SortRK4Sort"], [21, "_CPPv4NK4cvc54Sort10substituteERKNSt6vectorI4SortEERKNSt6vectorI4SortEE"]], "sort::tostream (c++ function)": [[21, "_CPPv4NK4cvc54Sort8toStreamERNSt7ostreamE"]], "sort::tostring (c++ function)": [[21, "_CPPv4NK4cvc54Sort8toStringEv"]], "sort::~sort (c++ function)": [[21, "_CPPv4N4cvc54SortD0Ev"]], "std::hash<cvc5::sort> (c++ struct)": [[21, "_CPPv4IENSt4hashIN4cvc54SortEEE"]], "std::hash<cvc5::sort>::operator() (c++ function)": [[21, "_CPPv4NKSt4hashIN4cvc54SortEEclERKN4cvc54SortE"]], "sortkind (c++ enum)": [[22, "_CPPv4N4cvc58SortKindE"]], "sortkind::abstract_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind13ABSTRACT_SORTE"]], "sortkind::array_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind10ARRAY_SORTE"]], "sortkind::bag_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind8BAG_SORTE"]], "sortkind::bitvector_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind14BITVECTOR_SORTE"]], "sortkind::boolean_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind12BOOLEAN_SORTE"]], "sortkind::datatype_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind13DATATYPE_SORTE"]], "sortkind::finite_field_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind17FINITE_FIELD_SORTE"]], "sortkind::floatingpoint_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind18FLOATINGPOINT_SORTE"]], "sortkind::function_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind13FUNCTION_SORTE"]], "sortkind::integer_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind12INTEGER_SORTE"]], "sortkind::internal_sort_kind (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind18INTERNAL_SORT_KINDE"]], "sortkind::last_sort_kind (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind14LAST_SORT_KINDE"]], "sortkind::null_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind9NULL_SORTE"]], "sortkind::real_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind9REAL_SORTE"]], "sortkind::reglan_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind11REGLAN_SORTE"]], "sortkind::roundingmode_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind17ROUNDINGMODE_SORTE"]], "sortkind::sequence_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind13SEQUENCE_SORTE"]], "sortkind::set_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind8SET_SORTE"]], "sortkind::string_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind11STRING_SORTE"]], "sortkind::tuple_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind10TUPLE_SORTE"]], "sortkind::undefined_sort_kind (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind19UNDEFINED_SORT_KINDE"]], "sortkind::uninterpreted_sort (c++ enumerator)": [[22, "_CPPv4N4cvc58SortKind18UNINTERPRETED_SORTE"]], "std::hash<cvc5::sortkind> (c++ struct)": [[22, "_CPPv4IENSt4hashIN4cvc58SortKindEEE"]], "std::hash<cvc5::sortkind>::operator() (c++ function)": [[22, "_CPPv4NKSt4hashIN4cvc58SortKindEEclEN4cvc58SortKindE"]], "stat (c++ class)": [[23, "_CPPv4N4cvc54StatE"]], "stat::histogramdata (c++ type)": [[23, "_CPPv4N4cvc54Stat13HistogramDataE"]], "stat::stat (c++ function)": [[23, "_CPPv4N4cvc54Stat4StatERK4Stat"], [23, "_CPPv4N4cvc54Stat4StatEv"]], "stat::getdouble (c++ function)": [[23, "_CPPv4NK4cvc54Stat9getDoubleEv"]], "stat::gethistogram (c++ function)": [[23, "_CPPv4NK4cvc54Stat12getHistogramEv"]], "stat::getint (c++ function)": [[23, "_CPPv4NK4cvc54Stat6getIntEv"]], "stat::getstring (c++ function)": [[23, "_CPPv4NK4cvc54Stat9getStringEv"]], "stat::isdefault (c++ function)": [[23, "_CPPv4NK4cvc54Stat9isDefaultEv"]], "stat::isdouble (c++ function)": [[23, "_CPPv4NK4cvc54Stat8isDoubleEv"]], "stat::ishistogram (c++ function)": [[23, "_CPPv4NK4cvc54Stat11isHistogramEv"]], "stat::isint (c++ function)": [[23, "_CPPv4NK4cvc54Stat5isIntEv"]], "stat::isinternal (c++ function)": [[23, "_CPPv4NK4cvc54Stat10isInternalEv"]], "stat::isstring (c++ function)": [[23, "_CPPv4NK4cvc54Stat8isStringEv"]], "stat::operator<< (c++ function)": [[23, "_CPPv4N4cvc54StatlsERNSt7ostreamERK4Stat"]], "stat::operator= (c++ function)": [[23, "_CPPv4N4cvc54StataSERK4Stat"]], "stat::~stat (c++ function)": [[23, "_CPPv4N4cvc54StatD0Ev"]], "statistics (c++ class)": [[23, "_CPPv4N4cvc510StatisticsE"]], "statistics::begin (c++ function)": [[23, "_CPPv4NK4cvc510Statistics5beginEbb"]], "statistics::end (c++ function)": [[23, "_CPPv4NK4cvc510Statistics3endEv"]], "statistics::get (c++ function)": [[23, "_CPPv4N4cvc510Statistics3getERKNSt6stringE"]], "parser::symbolmanager (c++ class)": [[24, "_CPPv4N4cvc56parser13SymbolManagerE"]], "parser::symbolmanager::symbolmanager (c++ function)": [[24, "_CPPv4N4cvc56parser13SymbolManager13SymbolManagerEPN4cvc56SolverE"]], "parser::symbolmanager::getlogic (c++ function)": [[24, "_CPPv4NK4cvc56parser13SymbolManager8getLogicEv"]], "parser::symbolmanager::islogicset (c++ function)": [[24, "_CPPv4NK4cvc56parser13SymbolManager10isLogicSetEv"]], "parser::symbolmanager::~symbolmanager (c++ function)": [[24, "_CPPv4N4cvc56parser13SymbolManagerD0Ev"]], "synthresult (c++ class)": [[25, "_CPPv4N4cvc511SynthResultE"]], "synthresult::synthresult (c++ function)": [[25, "_CPPv4N4cvc511SynthResult11SynthResultEv"]], "synthresult::hasnosolution (c++ function)": [[25, "_CPPv4NK4cvc511SynthResult13hasNoSolutionEv"]], "synthresult::hassolution (c++ function)": [[25, "_CPPv4NK4cvc511SynthResult11hasSolutionEv"]], "synthresult::isnull (c++ function)": [[25, "_CPPv4NK4cvc511SynthResult6isNullEv"]], "synthresult::isunknown (c++ function)": [[25, "_CPPv4NK4cvc511SynthResult9isUnknownEv"]], "synthresult::tostring (c++ function)": [[25, "_CPPv4NK4cvc511SynthResult8toStringEv"]], "term (c++ class)": [[26, "_CPPv4N4cvc54TermE"]], "term::term (c++ function)": [[26, "_CPPv4N4cvc54Term4TermEv"]], "term::andterm (c++ function)": [[26, "_CPPv4NK4cvc54Term7andTermERK4Term"]], "term::begin (c++ function)": [[26, "_CPPv4NK4cvc54Term5beginEv"]], "term::const_iterator (c++ class)": [[26, "_CPPv4N4cvc54Term14const_iteratorE"]], "term::const_iterator::const_iterator (c++ function)": [[26, "_CPPv4N4cvc54Term14const_iterator14const_iteratorEPN8internal11NodeManagerERKNSt10shared_ptrIN8internal4NodeEEE8uint32_t"], [26, "_CPPv4N4cvc54Term14const_iterator14const_iteratorERK14const_iterator"], [26, "_CPPv4N4cvc54Term14const_iterator14const_iteratorEv"]], "term::const_iterator::difference_type (c++ type)": [[26, "_CPPv4N4cvc54Term14const_iterator15difference_typeE"]], "term::const_iterator::iterator_category (c++ type)": [[26, "_CPPv4N4cvc54Term14const_iterator17iterator_categoryE"]], "term::const_iterator::operator!= (c++ function)": [[26, "_CPPv4NK4cvc54Term14const_iteratorneERK14const_iterator"]], "term::const_iterator::operator* (c++ function)": [[26, "_CPPv4NK4cvc54Term14const_iteratormlEv"]], "term::const_iterator::operator++ (c++ function)": [[26, "_CPPv4N4cvc54Term14const_iteratorppEi"], [26, "_CPPv4N4cvc54Term14const_iteratorppEv"]], "term::const_iterator::operator= (c++ function)": [[26, "_CPPv4N4cvc54Term14const_iteratoraSERK14const_iterator"]], "term::const_iterator::operator== (c++ function)": [[26, "_CPPv4NK4cvc54Term14const_iteratoreqERK14const_iterator"]], "term::const_iterator::pointer (c++ type)": [[26, "_CPPv4N4cvc54Term14const_iterator7pointerE"]], "term::const_iterator::reference (c++ type)": [[26, "_CPPv4N4cvc54Term14const_iterator9referenceE"]], "term::const_iterator::value_type (c++ type)": [[26, "_CPPv4N4cvc54Term14const_iterator10value_typeE"]], "term::end (c++ function)": [[26, "_CPPv4NK4cvc54Term3endEv"]], "term::eqterm (c++ function)": [[26, "_CPPv4NK4cvc54Term6eqTermERK4Term"]], "term::getbitvectorvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term17getBitVectorValueE8uint32_t"]], "term::getbooleanvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term15getBooleanValueEv"]], "term::getcardinalityconstraint (c++ function)": [[26, "_CPPv4NK4cvc54Term24getCardinalityConstraintEv"]], "term::getconstarraybase (c++ function)": [[26, "_CPPv4NK4cvc54Term17getConstArrayBaseEv"]], "term::getfinitefieldvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term19getFiniteFieldValueEv"]], "term::getfloatingpointvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term21getFloatingPointValueEv"]], "term::getid (c++ function)": [[26, "_CPPv4NK4cvc54Term5getIdEv"]], "term::getint32value (c++ function)": [[26, "_CPPv4NK4cvc54Term13getInt32ValueEv"]], "term::getint64value (c++ function)": [[26, "_CPPv4NK4cvc54Term13getInt64ValueEv"]], "term::getintegervalue (c++ function)": [[26, "_CPPv4NK4cvc54Term15getIntegerValueEv"]], "term::getkind (c++ function)": [[26, "_CPPv4NK4cvc54Term7getKindEv"]], "term::getnumchildren (c++ function)": [[26, "_CPPv4NK4cvc54Term14getNumChildrenEv"]], "term::getop (c++ function)": [[26, "_CPPv4NK4cvc54Term5getOpEv"]], "term::getreal32value (c++ function)": [[26, "_CPPv4NK4cvc54Term14getReal32ValueEv"]], "term::getreal64value (c++ function)": [[26, "_CPPv4NK4cvc54Term14getReal64ValueEv"]], "term::getrealalgebraicnumberdefiningpolynomial (c++ function)": [[26, "_CPPv4NK4cvc54Term40getRealAlgebraicNumberDefiningPolynomialERK4Term"]], "term::getrealalgebraicnumberlowerbound (c++ function)": [[26, "_CPPv4NK4cvc54Term32getRealAlgebraicNumberLowerBoundEv"]], "term::getrealalgebraicnumberupperbound (c++ function)": [[26, "_CPPv4NK4cvc54Term32getRealAlgebraicNumberUpperBoundEv"]], "term::getrealorintegervaluesign (c++ function)": [[26, "_CPPv4NK4cvc54Term25getRealOrIntegerValueSignEv"]], "term::getrealvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term12getRealValueEv"]], "term::getroundingmodevalue (c++ function)": [[26, "_CPPv4NK4cvc54Term20getRoundingModeValueEv"]], "term::getsequencevalue (c++ function)": [[26, "_CPPv4NK4cvc54Term16getSequenceValueEv"]], "term::getsetvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term11getSetValueEv"]], "term::getsort (c++ function)": [[26, "_CPPv4NK4cvc54Term7getSortEv"]], "term::getstringvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term14getStringValueEv"]], "term::getsymbol (c++ function)": [[26, "_CPPv4NK4cvc54Term9getSymbolEv"]], "term::gettuplevalue (c++ function)": [[26, "_CPPv4NK4cvc54Term13getTupleValueEv"]], "term::getuint32value (c++ function)": [[26, "_CPPv4NK4cvc54Term14getUInt32ValueEv"]], "term::getuint64value (c++ function)": [[26, "_CPPv4NK4cvc54Term14getUInt64ValueEv"]], "term::getuninterpretedsortvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term25getUninterpretedSortValueEv"]], "term::hasop (c++ function)": [[26, "_CPPv4NK4cvc54Term5hasOpEv"]], "term::hassymbol (c++ function)": [[26, "_CPPv4NK4cvc54Term9hasSymbolEv"]], "term::impterm (c++ function)": [[26, "_CPPv4NK4cvc54Term7impTermERK4Term"]], "term::isbitvectorvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term16isBitVectorValueEv"]], "term::isbooleanvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term14isBooleanValueEv"]], "term::iscardinalityconstraint (c++ function)": [[26, "_CPPv4NK4cvc54Term23isCardinalityConstraintEv"]], "term::isconstarray (c++ function)": [[26, "_CPPv4NK4cvc54Term12isConstArrayEv"]], "term::isfinitefieldvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term18isFiniteFieldValueEv"]], "term::isfloatingpointnan (c++ function)": [[26, "_CPPv4NK4cvc54Term18isFloatingPointNaNEv"]], "term::isfloatingpointneginf (c++ function)": [[26, "_CPPv4NK4cvc54Term21isFloatingPointNegInfEv"]], "term::isfloatingpointnegzero (c++ function)": [[26, "_CPPv4NK4cvc54Term22isFloatingPointNegZeroEv"]], "term::isfloatingpointposinf (c++ function)": [[26, "_CPPv4NK4cvc54Term21isFloatingPointPosInfEv"]], "term::isfloatingpointposzero (c++ function)": [[26, "_CPPv4NK4cvc54Term22isFloatingPointPosZeroEv"]], "term::isfloatingpointvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term20isFloatingPointValueEv"]], "term::isint32value (c++ function)": [[26, "_CPPv4NK4cvc54Term12isInt32ValueEv"]], "term::isint64value (c++ function)": [[26, "_CPPv4NK4cvc54Term12isInt64ValueEv"]], "term::isintegervalue (c++ function)": [[26, "_CPPv4NK4cvc54Term14isIntegerValueEv"]], "term::isnull (c++ function)": [[26, "_CPPv4NK4cvc54Term6isNullEv"]], "term::isreal32value (c++ function)": [[26, "_CPPv4NK4cvc54Term13isReal32ValueEv"]], "term::isreal64value (c++ function)": [[26, "_CPPv4NK4cvc54Term13isReal64ValueEv"]], "term::isrealalgebraicnumber (c++ function)": [[26, "_CPPv4NK4cvc54Term21isRealAlgebraicNumberEv"]], "term::isrealvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term11isRealValueEv"]], "term::isroundingmodevalue (c++ function)": [[26, "_CPPv4NK4cvc54Term19isRoundingModeValueEv"]], "term::issequencevalue (c++ function)": [[26, "_CPPv4NK4cvc54Term15isSequenceValueEv"]], "term::issetvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term10isSetValueEv"]], "term::isstringvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term13isStringValueEv"]], "term::istuplevalue (c++ function)": [[26, "_CPPv4NK4cvc54Term12isTupleValueEv"]], "term::isuint32value (c++ function)": [[26, "_CPPv4NK4cvc54Term13isUInt32ValueEv"]], "term::isuint64value (c++ function)": [[26, "_CPPv4NK4cvc54Term13isUInt64ValueEv"]], "term::isuninterpretedsortvalue (c++ function)": [[26, "_CPPv4NK4cvc54Term24isUninterpretedSortValueEv"]], "term::iteterm (c++ function)": [[26, "_CPPv4NK4cvc54Term7iteTermERK4TermRK4Term"]], "term::notterm (c++ function)": [[26, "_CPPv4NK4cvc54Term7notTermEv"]], "term::operator!= (c++ function)": [[26, "_CPPv4NK4cvc54TermneERK4Term"]], "term::operator< (c++ function)": [[26, "_CPPv4NK4cvc54TermltERK4Term"]], "term::operator<= (c++ function)": [[26, "_CPPv4NK4cvc54TermleERK4Term"]], "term::operator== (c++ function)": [[26, "_CPPv4NK4cvc54TermeqERK4Term"]], "term::operator> (c++ function)": [[26, "_CPPv4NK4cvc54TermgtERK4Term"]], "term::operator>= (c++ function)": [[26, "_CPPv4NK4cvc54TermgeERK4Term"]], "term::operator[] (c++ function)": [[26, "_CPPv4NK4cvc54TermixE6size_t"]], "term::orterm (c++ function)": [[26, "_CPPv4NK4cvc54Term6orTermERK4Term"]], "term::substitute (c++ function)": [[26, "_CPPv4NK4cvc54Term10substituteERK4TermRK4Term"], [26, "_CPPv4NK4cvc54Term10substituteERKNSt6vectorI4TermEERKNSt6vectorI4TermEE"]], "term::tostring (c++ function)": [[26, "_CPPv4NK4cvc54Term8toStringEv"]], "term::xorterm (c++ function)": [[26, "_CPPv4NK4cvc54Term7xorTermERK4Term"]], "term::~term (c++ function)": [[26, "_CPPv4N4cvc54TermD0Ev"]], "std::hash<cvc5::term> (c++ struct)": [[26, "_CPPv4IENSt4hashIN4cvc54TermEEE"]], "std::hash<cvc5::term>::operator() (c++ function)": [[26, "_CPPv4NKSt4hashIN4cvc54TermEEclERKN4cvc54TermE"]], "unknownexplanation (c++ enum)": [[27, "_CPPv4N4cvc518UnknownExplanationE"]], "unknownexplanation::incomplete (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation10INCOMPLETEE"]], "unknownexplanation::interrupted (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation11INTERRUPTEDE"]], "unknownexplanation::memout (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation6MEMOUTE"]], "unknownexplanation::other (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation5OTHERE"]], "unknownexplanation::requires_check_again (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation20REQUIRES_CHECK_AGAINE"]], "unknownexplanation::requires_full_check (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation19REQUIRES_FULL_CHECKE"]], "unknownexplanation::resourceout (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation11RESOURCEOUTE"]], "unknownexplanation::timeout (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation7TIMEOUTE"]], "unknownexplanation::unknown_reason (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation14UNKNOWN_REASONE"]], "unknownexplanation::unsupported (c++ enumerator)": [[27, "_CPPv4N4cvc518UnknownExplanation11UNSUPPORTEDE"]], "datatype (class in cvc5)": [[31, "cvc5.Datatype"]], "__getitem__() (cvc5.datatype method)": [[31, "cvc5.Datatype.__getitem__"]], "__iter__() (cvc5.datatype method)": [[31, "cvc5.Datatype.__iter__"]], "getconstructor() (cvc5.datatype method)": [[31, "cvc5.Datatype.getConstructor"]], "getname() (cvc5.datatype method)": [[31, "cvc5.Datatype.getName"]], "getnumconstructors() (cvc5.datatype method)": [[31, "cvc5.Datatype.getNumConstructors"]], "getparameters() (cvc5.datatype method)": [[31, "cvc5.Datatype.getParameters"]], "getselector() (cvc5.datatype method)": [[31, "cvc5.Datatype.getSelector"]], "iscodatatype() (cvc5.datatype method)": [[31, "cvc5.Datatype.isCodatatype"]], "isfinite() (cvc5.datatype method)": [[31, "cvc5.Datatype.isFinite"]], "isnull() (cvc5.datatype method)": [[31, "cvc5.Datatype.isNull"]], "isparametric() (cvc5.datatype method)": [[31, "cvc5.Datatype.isParametric"]], "isrecord() (cvc5.datatype method)": [[31, "cvc5.Datatype.isRecord"]], "istuple() (cvc5.datatype method)": [[31, "cvc5.Datatype.isTuple"]], "iswellfounded() (cvc5.datatype method)": [[31, "cvc5.Datatype.isWellFounded"]], "datatypeconstructor (class in cvc5)": [[32, "cvc5.DatatypeConstructor"]], "__getitem__() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.__getitem__"]], "__iter__() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.__iter__"]], "getinstantiatedterm() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.getInstantiatedTerm"]], "getname() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.getName"]], "getnumselectors() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.getNumSelectors"]], "getselector() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.getSelector"]], "getterm() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.getTerm"]], "gettesterterm() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.getTesterTerm"]], "isnull() (cvc5.datatypeconstructor method)": [[32, "cvc5.DatatypeConstructor.isNull"]], "datatypeconstructordecl (class in cvc5)": [[33, "cvc5.DatatypeConstructorDecl"]], "addselector() (cvc5.datatypeconstructordecl method)": [[33, "cvc5.DatatypeConstructorDecl.addSelector"]], "addselectorself() (cvc5.datatypeconstructordecl method)": [[33, "cvc5.DatatypeConstructorDecl.addSelectorSelf"]], "addselectorunresolved() (cvc5.datatypeconstructordecl method)": [[33, "cvc5.DatatypeConstructorDecl.addSelectorUnresolved"]], "isnull() (cvc5.datatypeconstructordecl method)": [[33, "cvc5.DatatypeConstructorDecl.isNull"]], "datatypedecl (class in cvc5)": [[34, "cvc5.DatatypeDecl"]], "addconstructor() (cvc5.datatypedecl method)": [[34, "cvc5.DatatypeDecl.addConstructor"]], "getname() (cvc5.datatypedecl method)": [[34, "cvc5.DatatypeDecl.getName"]], "getnumconstructors() (cvc5.datatypedecl method)": [[34, "cvc5.DatatypeDecl.getNumConstructors"]], "isnull() (cvc5.datatypedecl method)": [[34, "cvc5.DatatypeDecl.isNull"]], "isparametric() (cvc5.datatypedecl method)": [[34, "cvc5.DatatypeDecl.isParametric"]], "datatypeselector (class in cvc5)": [[35, "cvc5.DatatypeSelector"]], "getcodomainsort() (cvc5.datatypeselector method)": [[35, "cvc5.DatatypeSelector.getCodomainSort"]], "getname() (cvc5.datatypeselector method)": [[35, "cvc5.DatatypeSelector.getName"]], "getterm() (cvc5.datatypeselector method)": [[35, "cvc5.DatatypeSelector.getTerm"]], "getupdaterterm() (cvc5.datatypeselector method)": [[35, "cvc5.DatatypeSelector.getUpdaterTerm"]], "isnull() (cvc5.datatypeselector method)": [[35, "cvc5.DatatypeSelector.isNull"]], "grammar (class in cvc5)": [[36, "cvc5.Grammar"]], "addanyconstant() (cvc5.grammar method)": [[36, "cvc5.Grammar.addAnyConstant"]], "addanyvariable() (cvc5.grammar method)": [[36, "cvc5.Grammar.addAnyVariable"]], "addrule() (cvc5.grammar method)": [[36, "cvc5.Grammar.addRule"]], "addrules() (cvc5.grammar method)": [[36, "cvc5.Grammar.addRules"]], "abs (cvc5.kind attribute)": [[37, "cvc5.Kind.ABS"]], "add (cvc5.kind attribute)": [[37, "cvc5.Kind.ADD"]], "and (cvc5.kind attribute)": [[37, "cvc5.Kind.AND"]], "apply_constructor (cvc5.kind attribute)": [[37, "cvc5.Kind.APPLY_CONSTRUCTOR"]], "apply_selector (cvc5.kind attribute)": [[37, "cvc5.Kind.APPLY_SELECTOR"]], "apply_tester (cvc5.kind attribute)": [[37, "cvc5.Kind.APPLY_TESTER"]], "apply_uf (cvc5.kind attribute)": [[37, "cvc5.Kind.APPLY_UF"]], "apply_updater (cvc5.kind attribute)": [[37, "cvc5.Kind.APPLY_UPDATER"]], "arccosecant (cvc5.kind attribute)": [[37, "cvc5.Kind.ARCCOSECANT"]], "arccosine (cvc5.kind attribute)": [[37, "cvc5.Kind.ARCCOSINE"]], "arccotangent (cvc5.kind attribute)": [[37, "cvc5.Kind.ARCCOTANGENT"]], "arcsecant (cvc5.kind attribute)": [[37, "cvc5.Kind.ARCSECANT"]], "arcsine (cvc5.kind attribute)": [[37, "cvc5.Kind.ARCSINE"]], "arctangent (cvc5.kind attribute)": [[37, "cvc5.Kind.ARCTANGENT"]], "bag_card (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_CARD"]], "bag_choose (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_CHOOSE"]], "bag_count (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_COUNT"]], "bag_difference_remove (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_DIFFERENCE_REMOVE"]], "bag_difference_subtract (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_DIFFERENCE_SUBTRACT"]], "bag_duplicate_removal (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_DUPLICATE_REMOVAL"]], "bag_empty (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_EMPTY"]], "bag_filter (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_FILTER"]], "bag_fold (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_FOLD"]], "bag_from_set (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_FROM_SET"]], "bag_inter_min (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_INTER_MIN"]], "bag_is_singleton (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_IS_SINGLETON"]], "bag_make (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_MAKE"]], "bag_map (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_MAP"]], "bag_member (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_MEMBER"]], "bag_partition (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_PARTITION"]], "bag_subbag (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_SUBBAG"]], "bag_to_set (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_TO_SET"]], "bag_union_disjoint (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_UNION_DISJOINT"]], "bag_union_max (cvc5.kind attribute)": [[37, "cvc5.Kind.BAG_UNION_MAX"]], "bitvector_add (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ADD"]], "bitvector_and (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_AND"]], "bitvector_ashr (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ASHR"]], "bitvector_comp (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_COMP"]], "bitvector_concat (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_CONCAT"]], "bitvector_extract (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_EXTRACT"]], "bitvector_ite (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ITE"]], "bitvector_lshr (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_LSHR"]], "bitvector_mult (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_MULT"]], "bitvector_nand (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_NAND"]], "bitvector_neg (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_NEG"]], "bitvector_nego (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_NEGO"]], "bitvector_nor (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_NOR"]], "bitvector_not (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_NOT"]], "bitvector_or (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_OR"]], "bitvector_redand (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_REDAND"]], "bitvector_redor (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_REDOR"]], "bitvector_repeat (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_REPEAT"]], "bitvector_rotate_left (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ROTATE_LEFT"]], "bitvector_rotate_right (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ROTATE_RIGHT"]], "bitvector_saddo (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SADDO"]], "bitvector_sdiv (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SDIV"]], "bitvector_sdivo (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SDIVO"]], "bitvector_sge (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SGE"]], "bitvector_sgt (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SGT"]], "bitvector_shl (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SHL"]], "bitvector_sign_extend (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SIGN_EXTEND"]], "bitvector_sle (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SLE"]], "bitvector_slt (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SLT"]], "bitvector_sltbv (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SLTBV"]], "bitvector_smod (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SMOD"]], "bitvector_smulo (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SMULO"]], "bitvector_srem (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SREM"]], "bitvector_ssubo (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SSUBO"]], "bitvector_sub (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_SUB"]], "bitvector_to_nat (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_TO_NAT"]], "bitvector_uaddo (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_UADDO"]], "bitvector_udiv (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_UDIV"]], "bitvector_uge (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_UGE"]], "bitvector_ugt (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_UGT"]], "bitvector_ule (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ULE"]], "bitvector_ult (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ULT"]], "bitvector_ultbv (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ULTBV"]], "bitvector_umulo (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_UMULO"]], "bitvector_urem (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_UREM"]], "bitvector_usubo (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_USUBO"]], "bitvector_xnor (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_XNOR"]], "bitvector_xor (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_XOR"]], "bitvector_zero_extend (cvc5.kind attribute)": [[37, "cvc5.Kind.BITVECTOR_ZERO_EXTEND"]], "cardinality_constraint (cvc5.kind attribute)": [[37, "cvc5.Kind.CARDINALITY_CONSTRAINT"]], "constant (cvc5.kind attribute)": [[37, "cvc5.Kind.CONSTANT"]], "const_array (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_ARRAY"]], "const_bitvector (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_BITVECTOR"]], "const_boolean (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_BOOLEAN"]], "const_finite_field (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_FINITE_FIELD"]], "const_floatingpoint (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_FLOATINGPOINT"]], "const_integer (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_INTEGER"]], "const_rational (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_RATIONAL"]], "const_roundingmode (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_ROUNDINGMODE"]], "const_sequence (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_SEQUENCE"]], "const_string (cvc5.kind attribute)": [[37, "cvc5.Kind.CONST_STRING"]], "cosecant (cvc5.kind attribute)": [[37, "cvc5.Kind.COSECANT"]], "cosine (cvc5.kind attribute)": [[37, "cvc5.Kind.COSINE"]], "cotangent (cvc5.kind attribute)": [[37, "cvc5.Kind.COTANGENT"]], "distinct (cvc5.kind attribute)": [[37, "cvc5.Kind.DISTINCT"]], "divisible (cvc5.kind attribute)": [[37, "cvc5.Kind.DIVISIBLE"]], "division (cvc5.kind attribute)": [[37, "cvc5.Kind.DIVISION"]], "equal (cvc5.kind attribute)": [[37, "cvc5.Kind.EQUAL"]], "eq_range (cvc5.kind attribute)": [[37, "cvc5.Kind.EQ_RANGE"]], "exists (cvc5.kind attribute)": [[37, "cvc5.Kind.EXISTS"]], "exponential (cvc5.kind attribute)": [[37, "cvc5.Kind.EXPONENTIAL"]], "finite_field_add (cvc5.kind attribute)": [[37, "cvc5.Kind.FINITE_FIELD_ADD"]], "finite_field_bitsum (cvc5.kind attribute)": [[37, "cvc5.Kind.FINITE_FIELD_BITSUM"]], "finite_field_mult (cvc5.kind attribute)": [[37, "cvc5.Kind.FINITE_FIELD_MULT"]], "finite_field_neg (cvc5.kind attribute)": [[37, "cvc5.Kind.FINITE_FIELD_NEG"]], "floatingpoint_abs (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_ABS"]], "floatingpoint_add (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_ADD"]], "floatingpoint_div (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_DIV"]], "floatingpoint_eq (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_EQ"]], "floatingpoint_fma (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_FMA"]], "floatingpoint_fp (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_FP"]], "floatingpoint_geq (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_GEQ"]], "floatingpoint_gt (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_GT"]], "floatingpoint_is_inf (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_IS_INF"]], "floatingpoint_is_nan (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_IS_NAN"]], "floatingpoint_is_neg (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_IS_NEG"]], "floatingpoint_is_normal (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_IS_NORMAL"]], "floatingpoint_is_pos (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_IS_POS"]], "floatingpoint_is_subnormal (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_IS_SUBNORMAL"]], "floatingpoint_is_zero (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_IS_ZERO"]], "floatingpoint_leq (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_LEQ"]], "floatingpoint_lt (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_LT"]], "floatingpoint_max (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_MAX"]], "floatingpoint_min (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_MIN"]], "floatingpoint_mult (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_MULT"]], "floatingpoint_neg (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_NEG"]], "floatingpoint_rem (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_REM"]], "floatingpoint_rti (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_RTI"]], "floatingpoint_sqrt (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_SQRT"]], "floatingpoint_sub (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_SUB"]], "floatingpoint_to_fp_from_fp (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_FP_FROM_FP"]], "floatingpoint_to_fp_from_ieee_bv (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_FP_FROM_IEEE_BV"]], "floatingpoint_to_fp_from_real (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_FP_FROM_REAL"]], "floatingpoint_to_fp_from_sbv (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_FP_FROM_SBV"]], "floatingpoint_to_fp_from_ubv (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_FP_FROM_UBV"]], "floatingpoint_to_real (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_REAL"]], "floatingpoint_to_sbv (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_SBV"]], "floatingpoint_to_ubv (cvc5.kind attribute)": [[37, "cvc5.Kind.FLOATINGPOINT_TO_UBV"]], "forall (cvc5.kind attribute)": [[37, "cvc5.Kind.FORALL"]], "geq (cvc5.kind attribute)": [[37, "cvc5.Kind.GEQ"]], "gt (cvc5.kind attribute)": [[37, "cvc5.Kind.GT"]], "ho_apply (cvc5.kind attribute)": [[37, "cvc5.Kind.HO_APPLY"]], "iand (cvc5.kind attribute)": [[37, "cvc5.Kind.IAND"]], "implies (cvc5.kind attribute)": [[37, "cvc5.Kind.IMPLIES"]], "inst_add_to_pool (cvc5.kind attribute)": [[37, "cvc5.Kind.INST_ADD_TO_POOL"]], "inst_attribute (cvc5.kind attribute)": [[37, "cvc5.Kind.INST_ATTRIBUTE"]], "inst_no_pattern (cvc5.kind attribute)": [[37, "cvc5.Kind.INST_NO_PATTERN"]], "inst_pattern (cvc5.kind attribute)": [[37, "cvc5.Kind.INST_PATTERN"]], "inst_pattern_list (cvc5.kind attribute)": [[37, "cvc5.Kind.INST_PATTERN_LIST"]], "inst_pool (cvc5.kind attribute)": [[37, "cvc5.Kind.INST_POOL"]], "internal_kind (cvc5.kind attribute)": [[37, "cvc5.Kind.INTERNAL_KIND"]], "ints_division (cvc5.kind attribute)": [[37, "cvc5.Kind.INTS_DIVISION"]], "ints_modulus (cvc5.kind attribute)": [[37, "cvc5.Kind.INTS_MODULUS"]], "int_to_bitvector (cvc5.kind attribute)": [[37, "cvc5.Kind.INT_TO_BITVECTOR"]], "is_integer (cvc5.kind attribute)": [[37, "cvc5.Kind.IS_INTEGER"]], "ite (cvc5.kind attribute)": [[37, "cvc5.Kind.ITE"]], "kind (class in cvc5)": [[37, "cvc5.Kind"]], "lambda (cvc5.kind attribute)": [[37, "cvc5.Kind.LAMBDA"]], "last_kind (cvc5.kind attribute)": [[37, "cvc5.Kind.LAST_KIND"]], "leq (cvc5.kind attribute)": [[37, "cvc5.Kind.LEQ"]], "lt (cvc5.kind attribute)": [[37, "cvc5.Kind.LT"]], "match (cvc5.kind attribute)": [[37, "cvc5.Kind.MATCH"]], "match_bind_case (cvc5.kind attribute)": [[37, "cvc5.Kind.MATCH_BIND_CASE"]], "match_case (cvc5.kind attribute)": [[37, "cvc5.Kind.MATCH_CASE"]], "mult (cvc5.kind attribute)": [[37, "cvc5.Kind.MULT"]], "neg (cvc5.kind attribute)": [[37, "cvc5.Kind.NEG"]], "not (cvc5.kind attribute)": [[37, "cvc5.Kind.NOT"]], "null_term (cvc5.kind attribute)": [[37, "cvc5.Kind.NULL_TERM"]], "or (cvc5.kind attribute)": [[37, "cvc5.Kind.OR"]], "pi (cvc5.kind attribute)": [[37, "cvc5.Kind.PI"]], "pow (cvc5.kind attribute)": [[37, "cvc5.Kind.POW"]], "pow2 (cvc5.kind attribute)": [[37, "cvc5.Kind.POW2"]], "regexp_all (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_ALL"]], "regexp_allchar (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_ALLCHAR"]], "regexp_complement (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_COMPLEMENT"]], "regexp_concat (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_CONCAT"]], "regexp_diff (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_DIFF"]], "regexp_inter (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_INTER"]], "regexp_loop (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_LOOP"]], "regexp_none (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_NONE"]], "regexp_opt (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_OPT"]], "regexp_plus (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_PLUS"]], "regexp_range (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_RANGE"]], "regexp_repeat (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_REPEAT"]], "regexp_star (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_STAR"]], "regexp_union (cvc5.kind attribute)": [[37, "cvc5.Kind.REGEXP_UNION"]], "relation_aggregate (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_AGGREGATE"]], "relation_group (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_GROUP"]], "relation_iden (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_IDEN"]], "relation_join (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_JOIN"]], "relation_join_image (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_JOIN_IMAGE"]], "relation_product (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_PRODUCT"]], "relation_project (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_PROJECT"]], "relation_tclosure (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_TCLOSURE"]], "relation_transpose (cvc5.kind attribute)": [[37, "cvc5.Kind.RELATION_TRANSPOSE"]], "secant (cvc5.kind attribute)": [[37, "cvc5.Kind.SECANT"]], "select (cvc5.kind attribute)": [[37, "cvc5.Kind.SELECT"]], "sep_emp (cvc5.kind attribute)": [[37, "cvc5.Kind.SEP_EMP"]], "sep_nil (cvc5.kind attribute)": [[37, "cvc5.Kind.SEP_NIL"]], "sep_pto (cvc5.kind attribute)": [[37, "cvc5.Kind.SEP_PTO"]], "sep_star (cvc5.kind attribute)": [[37, "cvc5.Kind.SEP_STAR"]], "sep_wand (cvc5.kind attribute)": [[37, "cvc5.Kind.SEP_WAND"]], "seq_at (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_AT"]], "seq_concat (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_CONCAT"]], "seq_contains (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_CONTAINS"]], "seq_extract (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_EXTRACT"]], "seq_indexof (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_INDEXOF"]], "seq_length (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_LENGTH"]], "seq_nth (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_NTH"]], "seq_prefix (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_PREFIX"]], "seq_replace (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_REPLACE"]], "seq_replace_all (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_REPLACE_ALL"]], "seq_rev (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_REV"]], "seq_suffix (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_SUFFIX"]], "seq_unit (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_UNIT"]], "seq_update (cvc5.kind attribute)": [[37, "cvc5.Kind.SEQ_UPDATE"]], "set_card (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_CARD"]], "set_choose (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_CHOOSE"]], "set_complement (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_COMPLEMENT"]], "set_comprehension (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_COMPREHENSION"]], "set_empty (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_EMPTY"]], "set_filter (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_FILTER"]], "set_fold (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_FOLD"]], "set_insert (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_INSERT"]], "set_inter (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_INTER"]], "set_is_singleton (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_IS_SINGLETON"]], "set_map (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_MAP"]], "set_member (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_MEMBER"]], "set_minus (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_MINUS"]], "set_singleton (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_SINGLETON"]], "set_subset (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_SUBSET"]], "set_union (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_UNION"]], "set_universe (cvc5.kind attribute)": [[37, "cvc5.Kind.SET_UNIVERSE"]], "sexpr (cvc5.kind attribute)": [[37, "cvc5.Kind.SEXPR"]], "sine (cvc5.kind attribute)": [[37, "cvc5.Kind.SINE"]], "skolem_add_to_pool (cvc5.kind attribute)": [[37, "cvc5.Kind.SKOLEM_ADD_TO_POOL"]], "sqrt (cvc5.kind attribute)": [[37, "cvc5.Kind.SQRT"]], "store (cvc5.kind attribute)": [[37, "cvc5.Kind.STORE"]], "string_charat (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_CHARAT"]], "string_concat (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_CONCAT"]], "string_contains (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_CONTAINS"]], "string_from_code (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_FROM_CODE"]], "string_from_int (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_FROM_INT"]], "string_indexof (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_INDEXOF"]], "string_indexof_re (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_INDEXOF_RE"]], "string_in_regexp (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_IN_REGEXP"]], "string_is_digit (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_IS_DIGIT"]], "string_length (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_LENGTH"]], "string_leq (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_LEQ"]], "string_lt (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_LT"]], "string_prefix (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_PREFIX"]], "string_replace (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_REPLACE"]], "string_replace_all (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_REPLACE_ALL"]], "string_replace_re (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_REPLACE_RE"]], "string_replace_re_all (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_REPLACE_RE_ALL"]], "string_rev (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_REV"]], "string_substr (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_SUBSTR"]], "string_suffix (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_SUFFIX"]], "string_to_code (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_TO_CODE"]], "string_to_int (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_TO_INT"]], "string_to_lower (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_TO_LOWER"]], "string_to_regexp (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_TO_REGEXP"]], "string_to_upper (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_TO_UPPER"]], "string_update (cvc5.kind attribute)": [[37, "cvc5.Kind.STRING_UPDATE"]], "sub (cvc5.kind attribute)": [[37, "cvc5.Kind.SUB"]], "table_aggregate (cvc5.kind attribute)": [[37, "cvc5.Kind.TABLE_AGGREGATE"]], "table_group (cvc5.kind attribute)": [[37, "cvc5.Kind.TABLE_GROUP"]], "table_join (cvc5.kind attribute)": [[37, "cvc5.Kind.TABLE_JOIN"]], "table_product (cvc5.kind attribute)": [[37, "cvc5.Kind.TABLE_PRODUCT"]], "table_project (cvc5.kind attribute)": [[37, "cvc5.Kind.TABLE_PROJECT"]], "tangent (cvc5.kind attribute)": [[37, "cvc5.Kind.TANGENT"]], "to_integer (cvc5.kind attribute)": [[37, "cvc5.Kind.TO_INTEGER"]], "to_real (cvc5.kind attribute)": [[37, "cvc5.Kind.TO_REAL"]], "tuple_project (cvc5.kind attribute)": [[37, "cvc5.Kind.TUPLE_PROJECT"]], "undefined_kind (cvc5.kind attribute)": [[37, "cvc5.Kind.UNDEFINED_KIND"]], "uninterpreted_sort_value (cvc5.kind attribute)": [[37, "cvc5.Kind.UNINTERPRETED_SORT_VALUE"]], "variable (cvc5.kind attribute)": [[37, "cvc5.Kind.VARIABLE"]], "variable_list (cvc5.kind attribute)": [[37, "cvc5.Kind.VARIABLE_LIST"]], "witness (cvc5.kind attribute)": [[37, "cvc5.Kind.WITNESS"]], "xor (cvc5.kind attribute)": [[37, "cvc5.Kind.XOR"]], "op (class in cvc5)": [[38, "cvc5.Op"]], "__getitem__() (cvc5.op method)": [[38, "cvc5.Op.__getitem__"]], "getkind() (cvc5.op method)": [[38, "cvc5.Op.getKind"]], "getnumindices() (cvc5.op method)": [[38, "cvc5.Op.getNumIndices"]], "isindexed() (cvc5.op method)": [[38, "cvc5.Op.isIndexed"]], "isnull() (cvc5.op method)": [[38, "cvc5.Op.isNull"]], "alethe_rule (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ALETHE_RULE"]], "alf_rule (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ALF_RULE"]], "alpha_equiv (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ALPHA_EQUIV"]], "and_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.AND_ELIM"]], "and_intro (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.AND_INTRO"]], "annotation (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ANNOTATION"]], "arith_mult_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_MULT_NEG"]], "arith_mult_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_MULT_POS"]], "arith_mult_sign (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_MULT_SIGN"]], "arith_mult_tangent (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_MULT_TANGENT"]], "arith_nl_covering_direct (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_NL_COVERING_DIRECT"]], "arith_nl_covering_recursive (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_NL_COVERING_RECURSIVE"]], "arith_op_elim_axiom (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_OP_ELIM_AXIOM"]], "arith_poly_norm (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_POLY_NORM"]], "arith_sum_ub (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_SUM_UB"]], "arith_trans_exp_approx_above_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_EXP_APPROX_ABOVE_NEG"]], "arith_trans_exp_approx_above_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_EXP_APPROX_ABOVE_POS"]], "arith_trans_exp_approx_below (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_EXP_APPROX_BELOW"]], "arith_trans_exp_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_EXP_NEG"]], "arith_trans_exp_positivity (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_EXP_POSITIVITY"]], "arith_trans_exp_super_lin (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_EXP_SUPER_LIN"]], "arith_trans_exp_zero (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_EXP_ZERO"]], "arith_trans_pi (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_PI"]], "arith_trans_sine_approx_above_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_APPROX_ABOVE_NEG"]], "arith_trans_sine_approx_above_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_APPROX_ABOVE_POS"]], "arith_trans_sine_approx_below_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_APPROX_BELOW_NEG"]], "arith_trans_sine_approx_below_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_APPROX_BELOW_POS"]], "arith_trans_sine_bounds (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_BOUNDS"]], "arith_trans_sine_shift (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_SHIFT"]], "arith_trans_sine_symmetry (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_SYMMETRY"]], "arith_trans_sine_tangent_pi (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_TANGENT_PI"]], "arith_trans_sine_tangent_zero (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRANS_SINE_TANGENT_ZERO"]], "arith_trichotomy (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARITH_TRICHOTOMY"]], "arrays_eq_range_expand (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARRAYS_EQ_RANGE_EXPAND"]], "arrays_ext (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARRAYS_EXT"]], "arrays_read_over_write (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARRAYS_READ_OVER_WRITE"]], "arrays_read_over_write_1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARRAYS_READ_OVER_WRITE_1"]], "arrays_read_over_write_contra (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ARRAYS_READ_OVER_WRITE_CONTRA"]], "assume (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ASSUME"]], "beta_reduce (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.BETA_REDUCE"]], "bv_bitblast_step (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.BV_BITBLAST_STEP"]], "bv_eager_atom (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.BV_EAGER_ATOM"]], "chain_resolution (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CHAIN_RESOLUTION"]], "cnf_and_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_AND_NEG"]], "cnf_and_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_AND_POS"]], "cnf_equiv_neg1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_EQUIV_NEG1"]], "cnf_equiv_neg2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_EQUIV_NEG2"]], "cnf_equiv_pos1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_EQUIV_POS1"]], "cnf_equiv_pos2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_EQUIV_POS2"]], "cnf_implies_neg1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_IMPLIES_NEG1"]], "cnf_implies_neg2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_IMPLIES_NEG2"]], "cnf_implies_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_IMPLIES_POS"]], "cnf_ite_neg1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_ITE_NEG1"]], "cnf_ite_neg2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_ITE_NEG2"]], "cnf_ite_neg3 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_ITE_NEG3"]], "cnf_ite_pos1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_ITE_POS1"]], "cnf_ite_pos2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_ITE_POS2"]], "cnf_ite_pos3 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_ITE_POS3"]], "cnf_or_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_OR_NEG"]], "cnf_or_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_OR_POS"]], "cnf_xor_neg1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_XOR_NEG1"]], "cnf_xor_neg2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_XOR_NEG2"]], "cnf_xor_pos1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_XOR_POS1"]], "cnf_xor_pos2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CNF_XOR_POS2"]], "concat_conflict (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONCAT_CONFLICT"]], "concat_cprop (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONCAT_CPROP"]], "concat_csplit (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONCAT_CSPLIT"]], "concat_eq (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONCAT_EQ"]], "concat_lprop (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONCAT_LPROP"]], "concat_split (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONCAT_SPLIT"]], "concat_unify (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONCAT_UNIFY"]], "cong (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONG"]], "contra (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.CONTRA"]], "dsl_rewrite (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.DSL_REWRITE"]], "dt_clash (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.DT_CLASH"]], "dt_collapse (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.DT_COLLAPSE"]], "dt_inst (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.DT_INST"]], "dt_split (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.DT_SPLIT"]], "dt_unif (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.DT_UNIF"]], "encode_pred_transform (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ENCODE_PRED_TRANSFORM"]], "equiv_elim1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.EQUIV_ELIM1"]], "equiv_elim2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.EQUIV_ELIM2"]], "eq_resolve (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.EQ_RESOLVE"]], "evaluate (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.EVALUATE"]], "factoring (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.FACTORING"]], "false_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.FALSE_ELIM"]], "false_intro (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.FALSE_INTRO"]], "ho_app_encode (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.HO_APP_ENCODE"]], "ho_cong (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.HO_CONG"]], "implies_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.IMPLIES_ELIM"]], "instantiate (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.INSTANTIATE"]], "int_tight_lb (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.INT_TIGHT_LB"]], "int_tight_ub (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.INT_TIGHT_UB"]], "ite_elim1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ITE_ELIM1"]], "ite_elim2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.ITE_ELIM2"]], "lfsc_rule (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.LFSC_RULE"]], "macro_arith_scale_sum_ub (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_ARITH_SCALE_SUM_UB"]], "macro_bv_bitblast (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_BV_BITBLAST"]], "macro_resolution (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_RESOLUTION"]], "macro_resolution_trust (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_RESOLUTION_TRUST"]], "macro_rewrite (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_REWRITE"]], "macro_sr_eq_intro (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_SR_EQ_INTRO"]], "macro_sr_pred_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_SR_PRED_ELIM"]], "macro_sr_pred_intro (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_SR_PRED_INTRO"]], "macro_sr_pred_transform (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_SR_PRED_TRANSFORM"]], "macro_string_inference (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MACRO_STRING_INFERENCE"]], "modus_ponens (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.MODUS_PONENS"]], "not_and (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_AND"]], "not_equiv_elim1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_EQUIV_ELIM1"]], "not_equiv_elim2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_EQUIV_ELIM2"]], "not_implies_elim1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_IMPLIES_ELIM1"]], "not_implies_elim2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_IMPLIES_ELIM2"]], "not_ite_elim1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_ITE_ELIM1"]], "not_ite_elim2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_ITE_ELIM2"]], "not_not_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_NOT_ELIM"]], "not_or_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_OR_ELIM"]], "not_xor_elim1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_XOR_ELIM1"]], "not_xor_elim2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.NOT_XOR_ELIM2"]], "proofrule (class in cvc5)": [[39, "cvc5.ProofRule"]], "refl (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.REFL"]], "remove_term_formula_axiom (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.REMOVE_TERM_FORMULA_AXIOM"]], "reordering (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.REORDERING"]], "resolution (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.RESOLUTION"]], "re_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.RE_ELIM"]], "re_inter (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.RE_INTER"]], "re_unfold_neg (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.RE_UNFOLD_NEG"]], "re_unfold_neg_concat_fixed (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.RE_UNFOLD_NEG_CONCAT_FIXED"]], "re_unfold_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.RE_UNFOLD_POS"]], "sat_refutation (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.SAT_REFUTATION"]], "scope (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.SCOPE"]], "skolemize (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.SKOLEMIZE"]], "skolem_intro (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.SKOLEM_INTRO"]], "split (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.SPLIT"]], "string_code_inj (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.STRING_CODE_INJ"]], "string_decompose (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.STRING_DECOMPOSE"]], "string_eager_reduction (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.STRING_EAGER_REDUCTION"]], "string_length_non_empty (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.STRING_LENGTH_NON_EMPTY"]], "string_length_pos (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.STRING_LENGTH_POS"]], "string_reduction (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.STRING_REDUCTION"]], "string_seq_unit_inj (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.STRING_SEQ_UNIT_INJ"]], "subs (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.SUBS"]], "symm (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.SYMM"]], "trans (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.TRANS"]], "true_elim (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.TRUE_ELIM"]], "true_intro (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.TRUE_INTRO"]], "trust (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.TRUST"]], "trust_theory_rewrite (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.TRUST_THEORY_REWRITE"]], "unknown (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.UNKNOWN"]], "xor_elim1 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.XOR_ELIM1"]], "xor_elim2 (cvc5.proofrule attribute)": [[39, "cvc5.ProofRule.XOR_ELIM2"]], "result (class in cvc5)": [[42, "cvc5.Result"]], "getunknownexplanation() (cvc5.result method)": [[42, "cvc5.Result.getUnknownExplanation"]], "isnull() (cvc5.result method)": [[42, "cvc5.Result.isNull"]], "issat() (cvc5.result method)": [[42, "cvc5.Result.isSat"]], "isunknown() (cvc5.result method)": [[42, "cvc5.Result.isUnknown"]], "isunsat() (cvc5.result method)": [[42, "cvc5.Result.isUnsat"]], "round_nearest_ties_to_away (cvc5.roundingmode attribute)": [[43, "cvc5.RoundingMode.ROUND_NEAREST_TIES_TO_AWAY"]], "round_nearest_ties_to_even (cvc5.roundingmode attribute)": [[43, "cvc5.RoundingMode.ROUND_NEAREST_TIES_TO_EVEN"]], "round_toward_negative (cvc5.roundingmode attribute)": [[43, "cvc5.RoundingMode.ROUND_TOWARD_NEGATIVE"]], "round_toward_positive (cvc5.roundingmode attribute)": [[43, "cvc5.RoundingMode.ROUND_TOWARD_POSITIVE"]], "round_toward_zero (cvc5.roundingmode attribute)": [[43, "cvc5.RoundingMode.ROUND_TOWARD_ZERO"]], "roundingmode (class in cvc5)": [[43, "cvc5.RoundingMode"]], "solver (class in cvc5)": [[44, "cvc5.Solver"]], "addsygusassume() (cvc5.solver method)": [[44, "cvc5.Solver.addSygusAssume"]], "addsygusconstraint() (cvc5.solver method)": [[44, "cvc5.Solver.addSygusConstraint"]], "addsygusinvconstraint() (cvc5.solver method)": [[44, "cvc5.Solver.addSygusInvConstraint"]], "assertformula() (cvc5.solver method)": [[44, "cvc5.Solver.assertFormula"]], "blockmodel() (cvc5.solver method)": [[44, "cvc5.Solver.blockModel"]], "blockmodelvalues() (cvc5.solver method)": [[44, "cvc5.Solver.blockModelValues"]], "checksat() (cvc5.solver method)": [[44, "cvc5.Solver.checkSat"]], "checksatassuming() (cvc5.solver method)": [[44, "cvc5.Solver.checkSatAssuming"]], "checksynth() (cvc5.solver method)": [[44, "cvc5.Solver.checkSynth"]], "checksynthnext() (cvc5.solver method)": [[44, "cvc5.Solver.checkSynthNext"]], "declaredatatype() (cvc5.solver method)": [[44, "cvc5.Solver.declareDatatype"]], "declarefun() (cvc5.solver method)": [[44, "cvc5.Solver.declareFun"]], "declarepool() (cvc5.solver method)": [[44, "cvc5.Solver.declarePool"]], "declaresepheap() (cvc5.solver method)": [[44, "cvc5.Solver.declareSepHeap"]], "declaresort() (cvc5.solver method)": [[44, "cvc5.Solver.declareSort"]], "declaresygusvar() (cvc5.solver method)": [[44, "cvc5.Solver.declareSygusVar"]], "definefun() (cvc5.solver method)": [[44, "cvc5.Solver.defineFun"]], "definefunrec() (cvc5.solver method)": [[44, "cvc5.Solver.defineFunRec"]], "definefunsrec() (cvc5.solver method)": [[44, "cvc5.Solver.defineFunsRec"]], "findsynth() (cvc5.solver method)": [[44, "cvc5.Solver.findSynth"]], "findsynthnext() (cvc5.solver method)": [[44, "cvc5.Solver.findSynthNext"]], "getabduct() (cvc5.solver method)": [[44, "cvc5.Solver.getAbduct"]], "getabductnext() (cvc5.solver method)": [[44, "cvc5.Solver.getAbductNext"]], "getassertions() (cvc5.solver method)": [[44, "cvc5.Solver.getAssertions"]], "getbooleansort() (cvc5.solver method)": [[44, "cvc5.Solver.getBooleanSort"]], "getdifficulty() (cvc5.solver method)": [[44, "cvc5.Solver.getDifficulty"]], "getinfo() (cvc5.solver method)": [[44, "cvc5.Solver.getInfo"]], "getinstantiations() (cvc5.solver method)": [[44, "cvc5.Solver.getInstantiations"]], "getintegersort() (cvc5.solver method)": [[44, "cvc5.Solver.getIntegerSort"]], "getinterpolant() (cvc5.solver method)": [[44, "cvc5.Solver.getInterpolant"]], "getinterpolantnext() (cvc5.solver method)": [[44, "cvc5.Solver.getInterpolantNext"]], "getlearnedliterals() (cvc5.solver method)": [[44, "cvc5.Solver.getLearnedLiterals"]], "getlogic() (cvc5.solver method)": [[44, "cvc5.Solver.getLogic"]], "getmodel() (cvc5.solver method)": [[44, "cvc5.Solver.getModel"]], "getmodeldomainelements() (cvc5.solver method)": [[44, "cvc5.Solver.getModelDomainElements"]], "getoption() (cvc5.solver method)": [[44, "cvc5.Solver.getOption"]], "getoptioninfo() (cvc5.solver method)": [[44, "cvc5.Solver.getOptionInfo"]], "getoptionnames() (cvc5.solver method)": [[44, "cvc5.Solver.getOptionNames"]], "getproof() (cvc5.solver method)": [[44, "cvc5.Solver.getProof"]], "getquantifierelimination() (cvc5.solver method)": [[44, "cvc5.Solver.getQuantifierElimination"]], "getquantifiereliminationdisjunct() (cvc5.solver method)": [[44, "cvc5.Solver.getQuantifierEliminationDisjunct"]], "getrealsort() (cvc5.solver method)": [[44, "cvc5.Solver.getRealSort"]], "getregexpsort() (cvc5.solver method)": [[44, "cvc5.Solver.getRegExpSort"]], "getroundingmodesort() (cvc5.solver method)": [[44, "cvc5.Solver.getRoundingModeSort"]], "getstatistics() (cvc5.solver method)": [[44, "cvc5.Solver.getStatistics"]], "getstringsort() (cvc5.solver method)": [[44, "cvc5.Solver.getStringSort"]], "getsygusassumptions() (cvc5.solver method)": [[44, "cvc5.Solver.getSygusAssumptions"]], "getsygusconstraints() (cvc5.solver method)": [[44, "cvc5.Solver.getSygusConstraints"]], "getsynthsolution() (cvc5.solver method)": [[44, "cvc5.Solver.getSynthSolution"]], "getsynthsolutions() (cvc5.solver method)": [[44, "cvc5.Solver.getSynthSolutions"]], "gettimeoutcore() (cvc5.solver method)": [[44, "cvc5.Solver.getTimeoutCore"]], "gettimeoutcoreassuming() (cvc5.solver method)": [[44, "cvc5.Solver.getTimeoutCoreAssuming"]], "getunsatassumptions() (cvc5.solver method)": [[44, "cvc5.Solver.getUnsatAssumptions"]], "getunsatcore() (cvc5.solver method)": [[44, "cvc5.Solver.getUnsatCore"]], "getunsatcorelemmas() (cvc5.solver method)": [[44, "cvc5.Solver.getUnsatCoreLemmas"]], "getvalue() (cvc5.solver method)": [[44, "cvc5.Solver.getValue"]], "getvaluesepheap() (cvc5.solver method)": [[44, "cvc5.Solver.getValueSepHeap"]], "getvaluesepnil() (cvc5.solver method)": [[44, "cvc5.Solver.getValueSepNil"]], "getversion() (cvc5.solver method)": [[44, "cvc5.Solver.getVersion"]], "islogicset() (cvc5.solver method)": [[44, "cvc5.Solver.isLogicSet"]], "ismodelcoresymbol() (cvc5.solver method)": [[44, "cvc5.Solver.isModelCoreSymbol"]], "mkabstractsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkAbstractSort"]], "mkarraysort() (cvc5.solver method)": [[44, "cvc5.Solver.mkArraySort"]], "mkbagsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkBagSort"]], "mkbitvector() (cvc5.solver method)": [[44, "cvc5.Solver.mkBitVector"]], "mkbitvectorsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkBitVectorSort"]], "mkboolean() (cvc5.solver method)": [[44, "cvc5.Solver.mkBoolean"]], "mkcardinalityconstraint() (cvc5.solver method)": [[44, "cvc5.Solver.mkCardinalityConstraint"]], "mkconst() (cvc5.solver method)": [[44, "cvc5.Solver.mkConst"]], "mkconstarray() (cvc5.solver method)": [[44, "cvc5.Solver.mkConstArray"]], "mkdatatypeconstructordecl() (cvc5.solver method)": [[44, "cvc5.Solver.mkDatatypeConstructorDecl"]], "mkdatatypedecl() (cvc5.solver method)": [[44, "cvc5.Solver.mkDatatypeDecl"]], "mkdatatypesort() (cvc5.solver method)": [[44, "cvc5.Solver.mkDatatypeSort"]], "mkdatatypesorts() (cvc5.solver method)": [[44, "cvc5.Solver.mkDatatypeSorts"]], "mkemptybag() (cvc5.solver method)": [[44, "cvc5.Solver.mkEmptyBag"]], "mkemptysequence() (cvc5.solver method)": [[44, "cvc5.Solver.mkEmptySequence"]], "mkemptyset() (cvc5.solver method)": [[44, "cvc5.Solver.mkEmptySet"]], "mkfalse() (cvc5.solver method)": [[44, "cvc5.Solver.mkFalse"]], "mkfinitefieldelem() (cvc5.solver method)": [[44, "cvc5.Solver.mkFiniteFieldElem"]], "mkfinitefieldsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkFiniteFieldSort"]], "mkfloatingpoint() (cvc5.solver method)": [[44, "cvc5.Solver.mkFloatingPoint"]], "mkfloatingpointnan() (cvc5.solver method)": [[44, "cvc5.Solver.mkFloatingPointNaN"]], "mkfloatingpointneginf() (cvc5.solver method)": [[44, "cvc5.Solver.mkFloatingPointNegInf"]], "mkfloatingpointnegzero() (cvc5.solver method)": [[44, "cvc5.Solver.mkFloatingPointNegZero"]], "mkfloatingpointposinf() (cvc5.solver method)": [[44, "cvc5.Solver.mkFloatingPointPosInf"]], "mkfloatingpointposzero() (cvc5.solver method)": [[44, "cvc5.Solver.mkFloatingPointPosZero"]], "mkfloatingpointsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkFloatingPointSort"]], "mkfunctionsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkFunctionSort"]], "mkgrammar() (cvc5.solver method)": [[44, "cvc5.Solver.mkGrammar"]], "mkinteger() (cvc5.solver method)": [[44, "cvc5.Solver.mkInteger"]], "mkop() (cvc5.solver method)": [[44, "cvc5.Solver.mkOp"]], "mkparamsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkParamSort"]], "mkpi() (cvc5.solver method)": [[44, "cvc5.Solver.mkPi"]], "mkpredicatesort() (cvc5.solver method)": [[44, "cvc5.Solver.mkPredicateSort"]], "mkreal() (cvc5.solver method)": [[44, "cvc5.Solver.mkReal"]], "mkrecordsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkRecordSort"]], "mkregexpall() (cvc5.solver method)": [[44, "cvc5.Solver.mkRegexpAll"]], "mkregexpallchar() (cvc5.solver method)": [[44, "cvc5.Solver.mkRegexpAllchar"]], "mkregexpnone() (cvc5.solver method)": [[44, "cvc5.Solver.mkRegexpNone"]], "mkroundingmode() (cvc5.solver method)": [[44, "cvc5.Solver.mkRoundingMode"]], "mksepemp() (cvc5.solver method)": [[44, "cvc5.Solver.mkSepEmp"]], "mksepnil() (cvc5.solver method)": [[44, "cvc5.Solver.mkSepNil"]], "mksequencesort() (cvc5.solver method)": [[44, "cvc5.Solver.mkSequenceSort"]], "mksetsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkSetSort"]], "mkstring() (cvc5.solver method)": [[44, "cvc5.Solver.mkString"]], "mkterm() (cvc5.solver method)": [[44, "cvc5.Solver.mkTerm"]], "mktrue() (cvc5.solver method)": [[44, "cvc5.Solver.mkTrue"]], "mktuple() (cvc5.solver method)": [[44, "cvc5.Solver.mkTuple"]], "mktuplesort() (cvc5.solver method)": [[44, "cvc5.Solver.mkTupleSort"]], "mkuninterpretedsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkUninterpretedSort"]], "mkuninterpretedsortconstructorsort() (cvc5.solver method)": [[44, "cvc5.Solver.mkUninterpretedSortConstructorSort"]], "mkuniverseset() (cvc5.solver method)": [[44, "cvc5.Solver.mkUniverseSet"]], "mkunresolveddatatypesort() (cvc5.solver method)": [[44, "cvc5.Solver.mkUnresolvedDatatypeSort"]], "mkvar() (cvc5.solver method)": [[44, "cvc5.Solver.mkVar"]], "pop() (cvc5.solver method)": [[44, "cvc5.Solver.pop"]], "prooftostring() (cvc5.solver method)": [[44, "cvc5.Solver.proofToString"]], "push() (cvc5.solver method)": [[44, "cvc5.Solver.push"]], "resetassertions() (cvc5.solver method)": [[44, "cvc5.Solver.resetAssertions"]], "setinfo() (cvc5.solver method)": [[44, "cvc5.Solver.setInfo"]], "setlogic() (cvc5.solver method)": [[44, "cvc5.Solver.setLogic"]], "setoption() (cvc5.solver method)": [[44, "cvc5.Solver.setOption"]], "simplify() (cvc5.solver method)": [[44, "cvc5.Solver.simplify"]], "synthfun() (cvc5.solver method)": [[44, "cvc5.Solver.synthFun"]], "sort (class in cvc5)": [[45, "cvc5.Sort"]], "getabstractedkind() (cvc5.sort method)": [[45, "cvc5.Sort.getAbstractedKind"]], "getarrayelementsort() (cvc5.sort method)": [[45, "cvc5.Sort.getArrayElementSort"]], "getarrayindexsort() (cvc5.sort method)": [[45, "cvc5.Sort.getArrayIndexSort"]], "getbagelementsort() (cvc5.sort method)": [[45, "cvc5.Sort.getBagElementSort"]], "getbitvectorsize() (cvc5.sort method)": [[45, "cvc5.Sort.getBitVectorSize"]], "getdatatype() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatype"]], "getdatatypearity() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeArity"]], "getdatatypeconstructorarity() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeConstructorArity"]], "getdatatypeconstructorcodomainsort() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeConstructorCodomainSort"]], "getdatatypeconstructordomainsorts() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeConstructorDomainSorts"]], "getdatatypeselectorcodomainsort() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeSelectorCodomainSort"]], "getdatatypeselectordomainsort() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeSelectorDomainSort"]], "getdatatypetestercodomainsort() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeTesterCodomainSort"]], "getdatatypetesterdomainsort() (cvc5.sort method)": [[45, "cvc5.Sort.getDatatypeTesterDomainSort"]], "getfinitefieldsize() (cvc5.sort method)": [[45, "cvc5.Sort.getFiniteFieldSize"]], "getfloatingpointexponentsize() (cvc5.sort method)": [[45, "cvc5.Sort.getFloatingPointExponentSize"]], "getfloatingpointsignificandsize() (cvc5.sort method)": [[45, "cvc5.Sort.getFloatingPointSignificandSize"]], "getfunctionarity() (cvc5.sort method)": [[45, "cvc5.Sort.getFunctionArity"]], "getfunctioncodomainsort() (cvc5.sort method)": [[45, "cvc5.Sort.getFunctionCodomainSort"]], "getfunctiondomainsorts() (cvc5.sort method)": [[45, "cvc5.Sort.getFunctionDomainSorts"]], "getinstantiatedparameters() (cvc5.sort method)": [[45, "cvc5.Sort.getInstantiatedParameters"]], "getkind() (cvc5.sort method)": [[45, "cvc5.Sort.getKind"]], "getsequenceelementsort() (cvc5.sort method)": [[45, "cvc5.Sort.getSequenceElementSort"]], "getsetelementsort() (cvc5.sort method)": [[45, "cvc5.Sort.getSetElementSort"]], "getsymbol() (cvc5.sort method)": [[45, "cvc5.Sort.getSymbol"]], "gettuplelength() (cvc5.sort method)": [[45, "cvc5.Sort.getTupleLength"]], "gettuplesorts() (cvc5.sort method)": [[45, "cvc5.Sort.getTupleSorts"]], "getuninterpretedsortconstructor() (cvc5.sort method)": [[45, "cvc5.Sort.getUninterpretedSortConstructor"]], "getuninterpretedsortconstructorarity() (cvc5.sort method)": [[45, "cvc5.Sort.getUninterpretedSortConstructorArity"]], "hassymbol() (cvc5.sort method)": [[45, "cvc5.Sort.hasSymbol"]], "instantiate() (cvc5.sort method)": [[45, "cvc5.Sort.instantiate"]], "isabstract() (cvc5.sort method)": [[45, "cvc5.Sort.isAbstract"]], "isarray() (cvc5.sort method)": [[45, "cvc5.Sort.isArray"]], "isbag() (cvc5.sort method)": [[45, "cvc5.Sort.isBag"]], "isbitvector() (cvc5.sort method)": [[45, "cvc5.Sort.isBitVector"]], "isboolean() (cvc5.sort method)": [[45, "cvc5.Sort.isBoolean"]], "isdatatype() (cvc5.sort method)": [[45, "cvc5.Sort.isDatatype"]], "isdatatypeconstructor() (cvc5.sort method)": [[45, "cvc5.Sort.isDatatypeConstructor"]], "isdatatypeselector() (cvc5.sort method)": [[45, "cvc5.Sort.isDatatypeSelector"]], "isdatatypetester() (cvc5.sort method)": [[45, "cvc5.Sort.isDatatypeTester"]], "isdatatypeupdater() (cvc5.sort method)": [[45, "cvc5.Sort.isDatatypeUpdater"]], "isfinitefield() (cvc5.sort method)": [[45, "cvc5.Sort.isFiniteField"]], "isfloatingpoint() (cvc5.sort method)": [[45, "cvc5.Sort.isFloatingPoint"]], "isfunction() (cvc5.sort method)": [[45, "cvc5.Sort.isFunction"]], "isinstantiated() (cvc5.sort method)": [[45, "cvc5.Sort.isInstantiated"]], "isinteger() (cvc5.sort method)": [[45, "cvc5.Sort.isInteger"]], "isnull() (cvc5.sort method)": [[45, "cvc5.Sort.isNull"]], "ispredicate() (cvc5.sort method)": [[45, "cvc5.Sort.isPredicate"]], "isreal() (cvc5.sort method)": [[45, "cvc5.Sort.isReal"]], "isrecord() (cvc5.sort method)": [[45, "cvc5.Sort.isRecord"]], "isregexp() (cvc5.sort method)": [[45, "cvc5.Sort.isRegExp"]], "isroundingmode() (cvc5.sort method)": [[45, "cvc5.Sort.isRoundingMode"]], "issequence() (cvc5.sort method)": [[45, "cvc5.Sort.isSequence"]], "isset() (cvc5.sort method)": [[45, "cvc5.Sort.isSet"]], "isstring() (cvc5.sort method)": [[45, "cvc5.Sort.isString"]], "istuple() (cvc5.sort method)": [[45, "cvc5.Sort.isTuple"]], "isuninterpretedsort() (cvc5.sort method)": [[45, "cvc5.Sort.isUninterpretedSort"]], "isuninterpretedsortconstructor() (cvc5.sort method)": [[45, "cvc5.Sort.isUninterpretedSortConstructor"]], "substitute() (cvc5.sort method)": [[45, "cvc5.Sort.substitute"]], "statistics (class in cvc5)": [[46, "cvc5.Statistics"]], "__getitem__() (cvc5.statistics method)": [[46, "cvc5.Statistics.__getitem__"]], "get() (cvc5.statistics method)": [[46, "cvc5.Statistics.get"]], "synthresult (class in cvc5)": [[47, "cvc5.SynthResult"]], "hasnosolution() (cvc5.synthresult method)": [[47, "cvc5.SynthResult.hasNoSolution"]], "hassolution() (cvc5.synthresult method)": [[47, "cvc5.SynthResult.hasSolution"]], "isnull() (cvc5.synthresult method)": [[47, "cvc5.SynthResult.isNull"]], "isunknown() (cvc5.synthresult method)": [[47, "cvc5.SynthResult.isUnknown"]], "term (class in cvc5)": [[48, "cvc5.Term"]], "__getitem__() (cvc5.term method)": [[48, "cvc5.Term.__getitem__"]], "__iter__() (cvc5.term method)": [[48, "cvc5.Term.__iter__"]], "andterm() (cvc5.term method)": [[48, "cvc5.Term.andTerm"]], "eqterm() (cvc5.term method)": [[48, "cvc5.Term.eqTerm"]], "getbitvectorvalue() (cvc5.term method)": [[48, "cvc5.Term.getBitVectorValue"]], "getbooleanvalue() (cvc5.term method)": [[48, "cvc5.Term.getBooleanValue"]], "getcardinalityconstraint() (cvc5.term method)": [[48, "cvc5.Term.getCardinalityConstraint"]], "getconstarraybase() (cvc5.term method)": [[48, "cvc5.Term.getConstArrayBase"]], "getfinitefieldvalue() (cvc5.term method)": [[48, "cvc5.Term.getFiniteFieldValue"]], "getfloatingpointvalue() (cvc5.term method)": [[48, "cvc5.Term.getFloatingPointValue"]], "getid() (cvc5.term method)": [[48, "cvc5.Term.getId"]], "getintegervalue() (cvc5.term method)": [[48, "cvc5.Term.getIntegerValue"]], "getkind() (cvc5.term method)": [[48, "cvc5.Term.getKind"]], "getnumchildren() (cvc5.term method)": [[48, "cvc5.Term.getNumChildren"]], "getop() (cvc5.term method)": [[48, "cvc5.Term.getOp"]], "getrealalgebraicnumberdefiningpolynomial() (cvc5.term method)": [[48, "cvc5.Term.getRealAlgebraicNumberDefiningPolynomial"]], "getrealalgebraicnumberlowerbound() (cvc5.term method)": [[48, "cvc5.Term.getRealAlgebraicNumberLowerBound"]], "getrealalgebraicnumberupperbound() (cvc5.term method)": [[48, "cvc5.Term.getRealAlgebraicNumberUpperBound"]], "getrealorintegervaluesign() (cvc5.term method)": [[48, "cvc5.Term.getRealOrIntegerValueSign"]], "getrealvalue() (cvc5.term method)": [[48, "cvc5.Term.getRealValue"]], "getroundingmodevalue() (cvc5.term method)": [[48, "cvc5.Term.getRoundingModeValue"]], "getsequencevalue() (cvc5.term method)": [[48, "cvc5.Term.getSequenceValue"]], "getsetvalue() (cvc5.term method)": [[48, "cvc5.Term.getSetValue"]], "getsort() (cvc5.term method)": [[48, "cvc5.Term.getSort"]], "getstringvalue() (cvc5.term method)": [[48, "cvc5.Term.getStringValue"]], "getsymbol() (cvc5.term method)": [[48, "cvc5.Term.getSymbol"]], "gettuplevalue() (cvc5.term method)": [[48, "cvc5.Term.getTupleValue"]], "getuninterpretedsortvalue() (cvc5.term method)": [[48, "cvc5.Term.getUninterpretedSortValue"]], "hasop() (cvc5.term method)": [[48, "cvc5.Term.hasOp"]], "hassymbol() (cvc5.term method)": [[48, "cvc5.Term.hasSymbol"]], "impterm() (cvc5.term method)": [[48, "cvc5.Term.impTerm"]], "isbitvectorvalue() (cvc5.term method)": [[48, "cvc5.Term.isBitVectorValue"]], "isbooleanvalue() (cvc5.term method)": [[48, "cvc5.Term.isBooleanValue"]], "iscardinalityconstraint() (cvc5.term method)": [[48, "cvc5.Term.isCardinalityConstraint"]], "isconstarray() (cvc5.term method)": [[48, "cvc5.Term.isConstArray"]], "isfinitefieldvalue() (cvc5.term method)": [[48, "cvc5.Term.isFiniteFieldValue"]], "isfloatingpointnan() (cvc5.term method)": [[48, "cvc5.Term.isFloatingPointNaN"]], "isfloatingpointneginf() (cvc5.term method)": [[48, "cvc5.Term.isFloatingPointNegInf"]], "isfloatingpointnegzero() (cvc5.term method)": [[48, "cvc5.Term.isFloatingPointNegZero"]], "isfloatingpointposinf() (cvc5.term method)": [[48, "cvc5.Term.isFloatingPointPosInf"]], "isfloatingpointposzero() (cvc5.term method)": [[48, "cvc5.Term.isFloatingPointPosZero"]], "isfloatingpointvalue() (cvc5.term method)": [[48, "cvc5.Term.isFloatingPointValue"]], "isintegervalue() (cvc5.term method)": [[48, "cvc5.Term.isIntegerValue"]], "isnull() (cvc5.term method)": [[48, "cvc5.Term.isNull"]], "isrealalgebraicnumber() (cvc5.term method)": [[48, "cvc5.Term.isRealAlgebraicNumber"]], "isrealvalue() (cvc5.term method)": [[48, "cvc5.Term.isRealValue"]], "isroundingmodevalue() (cvc5.term method)": [[48, "cvc5.Term.isRoundingModeValue"]], "issequencevalue() (cvc5.term method)": [[48, "cvc5.Term.isSequenceValue"]], "issetvalue() (cvc5.term method)": [[48, "cvc5.Term.isSetValue"]], "isstringvalue() (cvc5.term method)": [[48, "cvc5.Term.isStringValue"]], "istuplevalue() (cvc5.term method)": [[48, "cvc5.Term.isTupleValue"]], "isuninterpretedsortvalue() (cvc5.term method)": [[48, "cvc5.Term.isUninterpretedSortValue"]], "iteterm() (cvc5.term method)": [[48, "cvc5.Term.iteTerm"]], "notterm() (cvc5.term method)": [[48, "cvc5.Term.notTerm"]], "orterm() (cvc5.term method)": [[48, "cvc5.Term.orTerm"]], "substitute() (cvc5.term method)": [[48, "cvc5.Term.substitute"]], "topythonobj() (cvc5.term method)": [[48, "cvc5.Term.toPythonObj"]], "xorterm() (cvc5.term method)": [[48, "cvc5.Term.xorTerm"]], "incomplete (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.INCOMPLETE"]], "interrupted (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.INTERRUPTED"]], "memout (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.MEMOUT"]], "other (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.OTHER"]], "requires_check_again (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.REQUIRES_CHECK_AGAIN"]], "requires_full_check (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.REQUIRES_FULL_CHECK"]], "resourceout (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.RESOURCEOUT"]], "timeout (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.TIMEOUT"]], "unknown_reason (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.UNKNOWN_REASON"]], "unsupported (cvc5.unknownexplanation attribute)": [[49, "cvc5.UnknownExplanation.UNSUPPORTED"]], "unknownexplanation (class in cvc5)": [[49, "cvc5.UnknownExplanation"]], "add() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Add"]], "arccosecant() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Arccosecant"]], "arccosine() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Arccosine"]], "arccotangent() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Arccotangent"]], "arcsecant() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Arcsecant"]], "arcsine() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Arcsine"]], "arctangent() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Arctangent"]], "arithref (class in cvc5.pythonic)": [[51, "cvc5.pythonic.ArithRef"]], "arithsortref (class in cvc5.pythonic)": [[51, "cvc5.pythonic.ArithSortRef"]], "cbrt() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Cbrt"]], "cosecant() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Cosecant"]], "cosine() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Cosine"]], "cotangent() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Cotangent"]], "div() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Div"]], "exponential() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Exponential"]], "freshint() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.FreshInt"]], "freshreal() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.FreshReal"]], "geq() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Geq"]], "gt() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Gt"]], "int() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Int"]], "intnumref (class in cvc5.pythonic)": [[51, "cvc5.pythonic.IntNumRef"]], "intsort() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.IntSort"]], "intval() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.IntVal"]], "intvector() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.IntVector"]], "ints() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Ints"]], "intsmodulus() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.IntsModulus"]], "isint() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.IsInt"]], "leq() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Leq"]], "lt() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Lt"]], "mult() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Mult"]], "pi() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Pi"]], "pow() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Pow"]], "q() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Q"]], "ratnumref (class in cvc5.pythonic)": [[51, "cvc5.pythonic.RatNumRef"]], "ratval() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.RatVal"]], "real() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Real"]], "realsort() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.RealSort"]], "realval() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.RealVal"]], "realvector() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.RealVector"]], "reals() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Reals"]], "secant() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Secant"]], "sine() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Sine"]], "sqrt() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Sqrt"]], "sub() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Sub"]], "tangent() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.Tangent"]], "toint() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.ToInt"]], "toreal() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.ToReal"]], "uminus() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.UMinus"]], "__add__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__add__"]], "__div__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__div__"]], "__ge__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__ge__"]], "__gt__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__gt__"]], "__le__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__le__"]], "__lt__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__lt__"]], "__mod__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__mod__"]], "__mul__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__mul__"]], "__neg__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__neg__"]], "__pos__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__pos__"]], "__pow__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__pow__"]], "__radd__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__radd__"]], "__rdiv__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__rdiv__"]], "__rmod__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__rmod__"]], "__rmul__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__rmul__"]], "__rpow__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__rpow__"]], "__rsub__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__rsub__"]], "__rtruediv__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__rtruediv__"]], "__sub__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__sub__"]], "__truediv__() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.__truediv__"]], "as_binary_string() (cvc5.pythonic.intnumref method)": [[51, "cvc5.pythonic.IntNumRef.as_binary_string"]], "as_decimal() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.as_decimal"]], "as_fraction() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.as_fraction"]], "as_long() (cvc5.pythonic.intnumref method)": [[51, "cvc5.pythonic.IntNumRef.as_long"]], "as_long() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.as_long"]], "as_string() (cvc5.pythonic.intnumref method)": [[51, "cvc5.pythonic.IntNumRef.as_string"]], "as_string() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.as_string"]], "cast() (cvc5.pythonic.arithsortref method)": [[51, "cvc5.pythonic.ArithSortRef.cast"]], "denominator() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.denominator"]], "denominator_as_long() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.denominator_as_long"]], "is_add() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_add"]], "is_arith() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_arith"]], "is_arith_sort() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_arith_sort"]], "is_div() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_div"]], "is_ge() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_ge"]], "is_gt() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_gt"]], "is_idiv() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_idiv"]], "is_int() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.is_int"]], "is_int() (cvc5.pythonic.arithsortref method)": [[51, "cvc5.pythonic.ArithSortRef.is_int"]], "is_int() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.is_int"]], "is_int() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_int"]], "is_int_value() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.is_int_value"]], "is_int_value() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_int_value"]], "is_is_int() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_is_int"]], "is_le() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_le"]], "is_lt() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_lt"]], "is_mod() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_mod"]], "is_mul() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_mul"]], "is_rational_value() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_rational_value"]], "is_real() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.is_real"]], "is_real() (cvc5.pythonic.arithsortref method)": [[51, "cvc5.pythonic.ArithSortRef.is_real"]], "is_real() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.is_real"]], "is_real() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_real"]], "is_sub() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_sub"]], "is_to_int() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_to_int"]], "is_to_real() (in module cvc5.pythonic)": [[51, "cvc5.pythonic.is_to_real"]], "numerator() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.numerator"]], "numerator_as_long() (cvc5.pythonic.ratnumref method)": [[51, "cvc5.pythonic.RatNumRef.numerator_as_long"]], "sort() (cvc5.pythonic.arithref method)": [[51, "cvc5.pythonic.ArithRef.sort"]], "subsort() (cvc5.pythonic.arithsortref method)": [[51, "cvc5.pythonic.ArithSortRef.subsort"]], "array() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.Array"]], "arrayref (class in cvc5.pythonic)": [[52, "cvc5.pythonic.ArrayRef"]], "arraysort() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.ArraySort"]], "arraysortref (class in cvc5.pythonic)": [[52, "cvc5.pythonic.ArraySortRef"]], "constarray() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.ConstArray"]], "k() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.K"]], "select() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.Select"]], "store() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.Store"]], "update() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.Update"]], "__getitem__() (cvc5.pythonic.arrayref method)": [[52, "cvc5.pythonic.ArrayRef.__getitem__"]], "arg() (cvc5.pythonic.arrayref method)": [[52, "cvc5.pythonic.ArrayRef.arg"]], "default() (cvc5.pythonic.arrayref method)": [[52, "cvc5.pythonic.ArrayRef.default"]], "domain() (cvc5.pythonic.arrayref method)": [[52, "cvc5.pythonic.ArrayRef.domain"]], "domain() (cvc5.pythonic.arraysortref method)": [[52, "cvc5.pythonic.ArraySortRef.domain"]], "is_k() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.is_K"]], "is_array() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.is_array"]], "is_array_sort() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.is_array_sort"]], "is_const_array() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.is_const_array"]], "is_select() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.is_select"]], "is_store() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.is_store"]], "is_update() (in module cvc5.pythonic)": [[52, "cvc5.pythonic.is_update"]], "range() (cvc5.pythonic.arrayref method)": [[52, "cvc5.pythonic.ArrayRef.range"]], "range() (cvc5.pythonic.arraysortref method)": [[52, "cvc5.pythonic.ArraySortRef.range"]], "sort() (cvc5.pythonic.arrayref method)": [[52, "cvc5.pythonic.ArrayRef.sort"]], "bv2int() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BV2Int"]], "bvadd() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVAdd"]], "bvand() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVAnd"]], "bvmult() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVMult"]], "bvneg() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVNeg"]], "bvnot() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVNot"]], "bvor() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVOr"]], "bvredand() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVRedAnd"]], "bvredor() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVRedOr"]], "bvsub() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVSub"]], "bvxor() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BVXor"]], "bitvec() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BitVec"]], "bitvecnumref (class in cvc5.pythonic)": [[53, "cvc5.pythonic.BitVecNumRef"]], "bitvecref (class in cvc5.pythonic)": [[53, "cvc5.pythonic.BitVecRef"]], "bitvecsort() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BitVecSort"]], "bitvecsortref (class in cvc5.pythonic)": [[53, "cvc5.pythonic.BitVecSortRef"]], "bitvecval() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BitVecVal"]], "bitvecs() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.BitVecs"]], "concat() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.Concat"]], "extract() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.Extract"]], "int2bv() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.Int2BV"]], "lshr() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.LShR"]], "repeatbitvec() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.RepeatBitVec"]], "rotateleft() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.RotateLeft"]], "rotateright() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.RotateRight"]], "sdiv() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SDiv"]], "sge() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SGE"]], "sgt() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SGT"]], "sle() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SLE"]], "slt() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SLT"]], "smod() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SMod"]], "srem() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SRem"]], "signext() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.SignExt"]], "udiv() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.UDiv"]], "uge() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.UGE"]], "ugt() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.UGT"]], "ule() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.ULE"]], "ult() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.ULT"]], "urem() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.URem"]], "zeroext() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.ZeroExt"]], "__add__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__add__"]], "__and__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__and__"]], "__div__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__div__"]], "__ge__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__ge__"]], "__gt__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__gt__"]], "__invert__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__invert__"]], "__le__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__le__"]], "__lshift__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__lshift__"]], "__lt__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__lt__"]], "__mod__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__mod__"]], "__mul__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__mul__"]], "__neg__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__neg__"]], "__or__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__or__"]], "__pos__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__pos__"]], "__radd__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__radd__"]], "__rand__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rand__"]], "__rdiv__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rdiv__"]], "__rlshift__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rlshift__"]], "__rmod__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rmod__"]], "__rmul__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rmul__"]], "__ror__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__ror__"]], "__rrshift__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rrshift__"]], "__rshift__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rshift__"]], "__rsub__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rsub__"]], "__rtruediv__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rtruediv__"]], "__rxor__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__rxor__"]], "__sub__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__sub__"]], "__truediv__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__truediv__"]], "__xor__() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.__xor__"]], "as_long() (cvc5.pythonic.bitvecnumref method)": [[53, "cvc5.pythonic.BitVecNumRef.as_long"]], "as_signed_long() (cvc5.pythonic.bitvecnumref method)": [[53, "cvc5.pythonic.BitVecNumRef.as_signed_long"]], "cast() (cvc5.pythonic.bitvecsortref method)": [[53, "cvc5.pythonic.BitVecSortRef.cast"]], "is_bv() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.is_bv"]], "is_bv_sort() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.is_bv_sort"]], "is_bv_value() (in module cvc5.pythonic)": [[53, "cvc5.pythonic.is_bv_value"]], "size() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.size"]], "size() (cvc5.pythonic.bitvecsortref method)": [[53, "cvc5.pythonic.BitVecSortRef.size"]], "sort() (cvc5.pythonic.bitvecref method)": [[53, "cvc5.pythonic.BitVecRef.sort"]], "subsort() (cvc5.pythonic.bitvecsortref method)": [[53, "cvc5.pythonic.BitVecSortRef.subsort"]], "and() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.And"]], "bool() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Bool"]], "boolref (class in cvc5.pythonic)": [[54, "cvc5.pythonic.BoolRef"]], "boolsort() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.BoolSort"]], "boolsortref (class in cvc5.pythonic)": [[54, "cvc5.pythonic.BoolSortRef"]], "boolval() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.BoolVal"]], "boolvector() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.BoolVector"]], "bools() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Bools"]], "const() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Const"]], "consts() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Consts"]], "distinct() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Distinct"]], "exprref (class in cvc5.pythonic)": [[54, "cvc5.pythonic.ExprRef"]], "freshbool() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.FreshBool"]], "freshconst() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.FreshConst"]], "freshfunction() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.FreshFunction"]], "funcdeclref (class in cvc5.pythonic)": [[54, "cvc5.pythonic.FuncDeclRef"]], "function() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Function"]], "if() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.If"]], "implies() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Implies"]], "not() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Not"]], "or() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Or"]], "sortref (class in cvc5.pythonic)": [[54, "cvc5.pythonic.SortRef"]], "xor() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.Xor"]], "__bool__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__bool__"]], "__call__() (cvc5.pythonic.funcdeclref method)": [[54, "cvc5.pythonic.FuncDeclRef.__call__"]], "__eq__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__eq__"]], "__eq__() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.__eq__"]], "__hash__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__hash__"]], "__hash__() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.__hash__"]], "__init__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__init__"]], "__init__() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.__init__"]], "__mul__() (cvc5.pythonic.boolref method)": [[54, "cvc5.pythonic.BoolRef.__mul__"]], "__ne__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__ne__"]], "__ne__() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.__ne__"]], "__nonzero__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__nonzero__"]], "__repr__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__repr__"]], "__repr__() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.__repr__"]], "__rmul__() (cvc5.pythonic.boolref method)": [[54, "cvc5.pythonic.BoolRef.__rmul__"]], "__str__() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.__str__"]], "__str__() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.__str__"]], "__weakref__ (cvc5.pythonic.exprref attribute)": [[54, "cvc5.pythonic.ExprRef.__weakref__"]], "__weakref__ (cvc5.pythonic.sortref attribute)": [[54, "cvc5.pythonic.SortRef.__weakref__"]], "arg() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.arg"]], "arity() (cvc5.pythonic.funcdeclref method)": [[54, "cvc5.pythonic.FuncDeclRef.arity"]], "as_ast() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.as_ast"]], "as_ast() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.as_ast"]], "cast() (cvc5.pythonic.boolsortref method)": [[54, "cvc5.pythonic.BoolSortRef.cast"]], "cast() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.cast"]], "children() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.children"]], "decl() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.decl"]], "domain() (cvc5.pythonic.funcdeclref method)": [[54, "cvc5.pythonic.FuncDeclRef.domain"]], "eq() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.eq"]], "eq() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.eq"]], "get_id() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.get_id"]], "hash() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.hash"]], "hash() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.hash"]], "is_and() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_and"]], "is_bool() (cvc5.pythonic.boolsortref method)": [[54, "cvc5.pythonic.BoolSortRef.is_bool"]], "is_bool() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_bool"]], "is_bool_value() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_bool_value"]], "is_const() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_const"]], "is_distinct() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_distinct"]], "is_eq() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_eq"]], "is_false() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_false"]], "is_func_decl() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_func_decl"]], "is_implies() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_implies"]], "is_int() (cvc5.pythonic.boolsortref method)": [[54, "cvc5.pythonic.BoolSortRef.is_int"]], "is_int() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.is_int"]], "is_int() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.is_int"]], "is_not() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_not"]], "is_or() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_or"]], "is_true() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.is_true"]], "kind() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.kind"]], "mk_not() (in module cvc5.pythonic)": [[54, "cvc5.pythonic.mk_not"]], "name() (cvc5.pythonic.funcdeclref method)": [[54, "cvc5.pythonic.FuncDeclRef.name"]], "name() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.name"]], "num_args() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.num_args"]], "range() (cvc5.pythonic.funcdeclref method)": [[54, "cvc5.pythonic.FuncDeclRef.range"]], "sexpr() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.sexpr"]], "sexpr() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.sexpr"]], "sort() (cvc5.pythonic.boolref method)": [[54, "cvc5.pythonic.BoolRef.sort"]], "sort() (cvc5.pythonic.exprref method)": [[54, "cvc5.pythonic.ExprRef.sort"]], "subsort() (cvc5.pythonic.boolsortref method)": [[54, "cvc5.pythonic.BoolSortRef.subsort"]], "subsort() (cvc5.pythonic.sortref method)": [[54, "cvc5.pythonic.SortRef.subsort"]], "createdatatypes() (in module cvc5.pythonic)": [[55, "cvc5.pythonic.CreateDatatypes"]], "datatype (class in cvc5.pythonic)": [[55, "cvc5.pythonic.Datatype"]], "datatypeconstructorref (class in cvc5.pythonic)": [[55, "cvc5.pythonic.DatatypeConstructorRef"]], "datatyperecognizerref (class in cvc5.pythonic)": [[55, "cvc5.pythonic.DatatypeRecognizerRef"]], "datatyperef (class in cvc5.pythonic)": [[55, "cvc5.pythonic.DatatypeRef"]], "datatypeselectorref (class in cvc5.pythonic)": [[55, "cvc5.pythonic.DatatypeSelectorRef"]], "datatypesortref (class in cvc5.pythonic)": [[55, "cvc5.pythonic.DatatypeSortRef"]], "disjointsum() (in module cvc5.pythonic)": [[55, "cvc5.pythonic.DisjointSum"]], "tuplesort() (in module cvc5.pythonic)": [[55, "cvc5.pythonic.TupleSort"]], "__call__() (cvc5.pythonic.datatypeconstructorref method)": [[55, "cvc5.pythonic.DatatypeConstructorRef.__call__"]], "__call__() (cvc5.pythonic.datatyperecognizerref method)": [[55, "cvc5.pythonic.DatatypeRecognizerRef.__call__"]], "__call__() (cvc5.pythonic.datatypeselectorref method)": [[55, "cvc5.pythonic.DatatypeSelectorRef.__call__"]], "__init__() (cvc5.pythonic.datatype method)": [[55, "cvc5.pythonic.Datatype.__init__"]], "__init__() (cvc5.pythonic.datatypeconstructorref method)": [[55, "cvc5.pythonic.DatatypeConstructorRef.__init__"]], "__init__() (cvc5.pythonic.datatyperecognizerref method)": [[55, "cvc5.pythonic.DatatypeRecognizerRef.__init__"]], "__init__() (cvc5.pythonic.datatypeselectorref method)": [[55, "cvc5.pythonic.DatatypeSelectorRef.__init__"]], "__init__() (cvc5.pythonic.datatypesortref method)": [[55, "cvc5.pythonic.DatatypeSortRef.__init__"]], "__repr__() (cvc5.pythonic.datatype method)": [[55, "cvc5.pythonic.Datatype.__repr__"]], "__weakref__ (cvc5.pythonic.datatype attribute)": [[55, "cvc5.pythonic.Datatype.__weakref__"]], "accessor() (cvc5.pythonic.datatypesortref method)": [[55, "cvc5.pythonic.DatatypeSortRef.accessor"]], "arity() (cvc5.pythonic.datatypeconstructorref method)": [[55, "cvc5.pythonic.DatatypeConstructorRef.arity"]], "arity() (cvc5.pythonic.datatyperecognizerref method)": [[55, "cvc5.pythonic.DatatypeRecognizerRef.arity"]], "arity() (cvc5.pythonic.datatypeselectorref method)": [[55, "cvc5.pythonic.DatatypeSelectorRef.arity"]], "constructor() (cvc5.pythonic.datatypesortref method)": [[55, "cvc5.pythonic.DatatypeSortRef.constructor"]], "create() (cvc5.pythonic.datatype method)": [[55, "cvc5.pythonic.Datatype.create"]], "declare() (cvc5.pythonic.datatype method)": [[55, "cvc5.pythonic.Datatype.declare"]], "domain() (cvc5.pythonic.datatypeconstructorref method)": [[55, "cvc5.pythonic.DatatypeConstructorRef.domain"]], "domain() (cvc5.pythonic.datatyperecognizerref method)": [[55, "cvc5.pythonic.DatatypeRecognizerRef.domain"]], "domain() (cvc5.pythonic.datatypeselectorref method)": [[55, "cvc5.pythonic.DatatypeSelectorRef.domain"]], "num_constructors() (cvc5.pythonic.datatypesortref method)": [[55, "cvc5.pythonic.DatatypeSortRef.num_constructors"]], "range() (cvc5.pythonic.datatypeconstructorref method)": [[55, "cvc5.pythonic.DatatypeConstructorRef.range"]], "range() (cvc5.pythonic.datatyperecognizerref method)": [[55, "cvc5.pythonic.DatatypeRecognizerRef.range"]], "range() (cvc5.pythonic.datatypeselectorref method)": [[55, "cvc5.pythonic.DatatypeSelectorRef.range"]], "recognizer() (cvc5.pythonic.datatypesortref method)": [[55, "cvc5.pythonic.DatatypeSortRef.recognizer"]], "sort() (cvc5.pythonic.datatyperef method)": [[55, "cvc5.pythonic.DatatypeRef.sort"]], "ffadd() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FFAdd"]], "ffmult() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FFMult"]], "ffneg() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FFNeg"]], "ffsub() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FFSub"]], "finitefieldelem() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FiniteFieldElem"]], "finitefieldelems() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FiniteFieldElems"]], "finitefieldnumref (class in cvc5.pythonic)": [[56, "cvc5.pythonic.FiniteFieldNumRef"]], "finitefieldref (class in cvc5.pythonic)": [[56, "cvc5.pythonic.FiniteFieldRef"]], "finitefieldsort() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FiniteFieldSort"]], "finitefieldsortref (class in cvc5.pythonic)": [[56, "cvc5.pythonic.FiniteFieldSortRef"]], "finitefieldval() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.FiniteFieldVal"]], "__add__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__add__"]], "__mul__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__mul__"]], "__neg__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__neg__"]], "__pos__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__pos__"]], "__radd__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__radd__"]], "__rmul__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__rmul__"]], "__rsub__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__rsub__"]], "__sub__() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.__sub__"]], "as_long() (cvc5.pythonic.finitefieldnumref method)": [[56, "cvc5.pythonic.FiniteFieldNumRef.as_long"]], "as_signed_long() (cvc5.pythonic.finitefieldnumref method)": [[56, "cvc5.pythonic.FiniteFieldNumRef.as_signed_long"]], "cast() (cvc5.pythonic.finitefieldsortref method)": [[56, "cvc5.pythonic.FiniteFieldSortRef.cast"]], "is_ff() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.is_ff"]], "is_ff_sort() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.is_ff_sort"]], "is_ff_value() (in module cvc5.pythonic)": [[56, "cvc5.pythonic.is_ff_value"]], "size() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.size"]], "size() (cvc5.pythonic.finitefieldsortref method)": [[56, "cvc5.pythonic.FiniteFieldSortRef.size"]], "sort() (cvc5.pythonic.finitefieldref method)": [[56, "cvc5.pythonic.FiniteFieldRef.sort"]], "fp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FP"]], "fpnumref (class in cvc5.pythonic)": [[57, "cvc5.pythonic.FPNumRef"]], "fprmref (class in cvc5.pythonic)": [[57, "cvc5.pythonic.FPRMRef"]], "fpref (class in cvc5.pythonic)": [[57, "cvc5.pythonic.FPRef"]], "fpsort() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FPSort"]], "fpsortref (class in cvc5.pythonic)": [[57, "cvc5.pythonic.FPSortRef"]], "fpval() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FPVal"]], "fps() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FPs"]], "float128() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.Float128"]], "float16() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.Float16"]], "float32() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.Float32"]], "float64() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.Float64"]], "floatdouble() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FloatDouble"]], "floathalf() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FloatHalf"]], "floatquadruple() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FloatQuadruple"]], "floatsingle() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.FloatSingle"]], "rna() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RNA"]], "rne() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RNE"]], "rtn() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RTN"]], "rtp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RTP"]], "rtz() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RTZ"]], "roundnearesttiestoaway() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RoundNearestTiesToAway"]], "roundnearesttiestoeven() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RoundNearestTiesToEven"]], "roundtowardnegative() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RoundTowardNegative"]], "roundtowardpositive() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RoundTowardPositive"]], "roundtowardzero() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.RoundTowardZero"]], "__add__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__add__"]], "__div__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__div__"]], "__ge__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__ge__"]], "__gt__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__gt__"]], "__le__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__le__"]], "__lt__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__lt__"]], "__mod__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__mod__"]], "__mul__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__mul__"]], "__neg__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__neg__"]], "__pos__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__pos__"]], "__radd__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__radd__"]], "__rdiv__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__rdiv__"]], "__rmod__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__rmod__"]], "__rmul__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__rmul__"]], "__rsub__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__rsub__"]], "__rtruediv__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__rtruediv__"]], "__sub__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__sub__"]], "__truediv__() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.__truediv__"]], "as_string() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.as_string"]], "as_string() (cvc5.pythonic.fprmref method)": [[57, "cvc5.pythonic.FPRMRef.as_string"]], "as_string() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.as_string"]], "cast() (cvc5.pythonic.fpsortref method)": [[57, "cvc5.pythonic.FPSortRef.cast"]], "ebits() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.ebits"]], "ebits() (cvc5.pythonic.fpsortref method)": [[57, "cvc5.pythonic.FPSortRef.ebits"]], "exponent() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.exponent"]], "exponent_as_long() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.exponent_as_long"]], "fpabs() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpAbs"]], "fpadd() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpAdd"]], "fpbvtofp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpBVToFP"]], "fpdiv() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpDiv"]], "fpeq() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpEQ"]], "fpfma() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpFMA"]], "fpfp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpFP"]], "fpfptofp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpFPToFP"]], "fpgeq() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpGEQ"]], "fpgt() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpGT"]], "fpinfinity() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpInfinity"]], "fpisinf() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpIsInf"]], "fpisnan() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpIsNaN"]], "fpisnegative() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpIsNegative"]], "fpisnormal() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpIsNormal"]], "fpispositive() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpIsPositive"]], "fpissubnormal() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpIsSubnormal"]], "fpiszero() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpIsZero"]], "fpleq() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpLEQ"]], "fplt() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpLT"]], "fpmax() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpMax"]], "fpmin() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpMin"]], "fpminusinfinity() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpMinusInfinity"]], "fpminuszero() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpMinusZero"]], "fpmul() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpMul"]], "fpneq() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpNEQ"]], "fpnan() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpNaN"]], "fpneg() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpNeg"]], "fpplusinfinity() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpPlusInfinity"]], "fppluszero() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpPlusZero"]], "fprealtofp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpRealToFP"]], "fprem() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpRem"]], "fproundtointegral() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpRoundToIntegral"]], "fpsignedtofp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpSignedToFP"]], "fpsqrt() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpSqrt"]], "fpsub() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpSub"]], "fptofp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpToFP"]], "fptofpunsigned() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpToFPUnsigned"]], "fptoreal() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpToReal"]], "fptosbv() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpToSBV"]], "fptoubv() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpToUBV"]], "fpunsignedtofp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpUnsignedToFP"]], "fpzero() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.fpZero"]], "get_default_fp_sort() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.get_default_fp_sort"]], "get_default_rounding_mode() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.get_default_rounding_mode"]], "isinf() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.isInf"]], "isnan() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.isNaN"]], "isnegative() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.isNegative"]], "isnormal() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.isNormal"]], "ispositive() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.isPositive"]], "issubnormal() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.isSubnormal"]], "iszero() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.isZero"]], "is_fp() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.is_fp"]], "is_fp_sort() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.is_fp_sort"]], "is_fp_value() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.is_fp_value"]], "is_fprm() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.is_fprm"]], "is_fprm_sort() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.is_fprm_sort"]], "is_fprm_value() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.is_fprm_value"]], "sbits() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.sbits"]], "sbits() (cvc5.pythonic.fpsortref method)": [[57, "cvc5.pythonic.FPSortRef.sbits"]], "set_default_fp_sort() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.set_default_fp_sort"]], "set_default_rounding_mode() (in module cvc5.pythonic)": [[57, "cvc5.pythonic.set_default_rounding_mode"]], "sign() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.sign"]], "significand() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.significand"]], "significand_as_long() (cvc5.pythonic.fpnumref method)": [[57, "cvc5.pythonic.FPNumRef.significand_as_long"]], "sort() (cvc5.pythonic.fpref method)": [[57, "cvc5.pythonic.FPRef.sort"]], "smtexception (class in cvc5.pythonic)": [[58, "cvc5.pythonic.SMTException"]], "__init__() (cvc5.pythonic.smtexception method)": [[58, "cvc5.pythonic.SMTException.__init__"]], "__str__() (cvc5.pythonic.smtexception method)": [[58, "cvc5.pythonic.SMTException.__str__"]], "__weakref__ (cvc5.pythonic.smtexception attribute)": [[58, "cvc5.pythonic.SMTException.__weakref__"]], "is_app() (in module cvc5.pythonic)": [[58, "cvc5.pythonic.is_app"]], "is_app_of() (in module cvc5.pythonic)": [[58, "cvc5.pythonic.is_app_of"]], "is_expr() (in module cvc5.pythonic)": [[58, "cvc5.pythonic.is_expr"]], "is_sort() (in module cvc5.pythonic)": [[58, "cvc5.pythonic.is_sort"]], "exists() (in module cvc5.pythonic)": [[60, "cvc5.pythonic.Exists"]], "forall() (in module cvc5.pythonic)": [[60, "cvc5.pythonic.ForAll"]], "lambda() (in module cvc5.pythonic)": [[60, "cvc5.pythonic.Lambda"]], "quantifierref (class in cvc5.pythonic)": [[60, "cvc5.pythonic.QuantifierRef"]], "as_ast() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.as_ast"]], "body() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.body"]], "children() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.children"]], "is_exists() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.is_exists"]], "is_forall() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.is_forall"]], "is_lambda() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.is_lambda"]], "is_quantifier() (in module cvc5.pythonic)": [[60, "cvc5.pythonic.is_quantifier"]], "is_var() (in module cvc5.pythonic)": [[60, "cvc5.pythonic.is_var"]], "num_vars() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.num_vars"]], "sort() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.sort"]], "var_name() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.var_name"]], "var_sort() (cvc5.pythonic.quantifierref method)": [[60, "cvc5.pythonic.QuantifierRef.var_sort"]], "emptyset() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.EmptySet"]], "fullset() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.FullSet"]], "ismember() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.IsMember"]], "issubset() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.IsSubset"]], "set() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.Set"]], "setadd() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetAdd"]], "setcomplement() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetComplement"]], "setdel() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetDel"]], "setdifference() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetDifference"]], "setintersect() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetIntersect"]], "setminus() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetMinus"]], "setref (class in cvc5.pythonic)": [[62, "cvc5.pythonic.SetRef"]], "setsort() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetSort"]], "setsortref (class in cvc5.pythonic)": [[62, "cvc5.pythonic.SetSortRef"]], "setunion() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.SetUnion"]], "singleton() (in module cvc5.pythonic)": [[62, "cvc5.pythonic.Singleton"]], "__and__() (cvc5.pythonic.setref method)": [[62, "cvc5.pythonic.SetRef.__and__"]], "__getitem__() (cvc5.pythonic.setref method)": [[62, "cvc5.pythonic.SetRef.__getitem__"]], "__or__() (cvc5.pythonic.setref method)": [[62, "cvc5.pythonic.SetRef.__or__"]], "default() (cvc5.pythonic.setref method)": [[62, "cvc5.pythonic.SetRef.default"]], "domain() (cvc5.pythonic.setref method)": [[62, "cvc5.pythonic.SetRef.domain"]], "domain() (cvc5.pythonic.setsortref method)": [[62, "cvc5.pythonic.SetSortRef.domain"]], "range() (cvc5.pythonic.setref method)": [[62, "cvc5.pythonic.SetRef.range"]], "range() (cvc5.pythonic.setsortref method)": [[62, "cvc5.pythonic.SetSortRef.range"]], "sort() (cvc5.pythonic.setref method)": [[62, "cvc5.pythonic.SetRef.sort"]], "checksatresult (class in cvc5.pythonic)": [[63, "cvc5.pythonic.CheckSatResult"]], "modelref (class in cvc5.pythonic)": [[63, "cvc5.pythonic.ModelRef"]], "product() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.Product"]], "simplesolver() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.SimpleSolver"]], "solver (class in cvc5.pythonic)": [[63, "cvc5.pythonic.Solver"]], "solverfor() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.SolverFor"]], "sum() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.Sum"]], "__eq__() (cvc5.pythonic.checksatresult method)": [[63, "cvc5.pythonic.CheckSatResult.__eq__"]], "__getitem__() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.__getitem__"]], "__hash__ (cvc5.pythonic.checksatresult attribute)": [[63, "cvc5.pythonic.CheckSatResult.__hash__"]], "__iadd__() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.__iadd__"]], "__init__() (cvc5.pythonic.checksatresult method)": [[63, "cvc5.pythonic.CheckSatResult.__init__"]], "__init__() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.__init__"]], "__init__() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.__init__"]], "__len__() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.__len__"]], "__ne__() (cvc5.pythonic.checksatresult method)": [[63, "cvc5.pythonic.CheckSatResult.__ne__"]], "__repr__() (cvc5.pythonic.checksatresult method)": [[63, "cvc5.pythonic.CheckSatResult.__repr__"]], "__repr__() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.__repr__"]], "__repr__() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.__repr__"]], "__weakref__ (cvc5.pythonic.checksatresult attribute)": [[63, "cvc5.pythonic.CheckSatResult.__weakref__"]], "__weakref__ (cvc5.pythonic.modelref attribute)": [[63, "cvc5.pythonic.ModelRef.__weakref__"]], "__weakref__ (cvc5.pythonic.solver attribute)": [[63, "cvc5.pythonic.Solver.__weakref__"]], "add() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.add"]], "append() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.append"]], "assert_exprs() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.assert_exprs"]], "assertions() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.assertions"]], "check() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.check"]], "cvc5.pythonic.sat (built-in variable)": [[63, "cvc5.pythonic.sat"]], "cvc5.pythonic.unknown (built-in variable)": [[63, "cvc5.pythonic.unknown"]], "cvc5.pythonic.unsat (built-in variable)": [[63, "cvc5.pythonic.unsat"]], "decls() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.decls"]], "eval() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.eval"]], "evaluate() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.evaluate"]], "evaluate() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.evaluate"]], "getoption() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.getOption"]], "getoptioninfo() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.getOptionInfo"]], "getoptionnames() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.getOptionNames"]], "initfromlogic() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.initFromLogic"]], "insert() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.insert"]], "model() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.model"]], "num_scopes() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.num_scopes"]], "pop() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.pop"]], "prove() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.prove"]], "push() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.push"]], "reason_unknown() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.reason_unknown"]], "reset() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.reset"]], "resetassertions() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.resetAssertions"]], "set() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.set"]], "setoption() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.setOption"]], "sexpr() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.sexpr"]], "simplify() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.simplify"]], "solve() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.solve"]], "solve_using() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.solve_using"]], "statistics() (cvc5.pythonic.solver method)": [[63, "cvc5.pythonic.Solver.statistics"]], "substitute() (in module cvc5.pythonic)": [[63, "cvc5.pythonic.substitute"]], "vars() (cvc5.pythonic.modelref method)": [[63, "cvc5.pythonic.ModelRef.vars"]], "proofrule (c++ enum)": [[96, "_CPPv4N4cvc59ProofRuleE"]], "proofrule::alethe_rule (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11ALETHE_RULEE"]], "proofrule::alf_rule (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule8ALF_RULEE"]], "proofrule::alpha_equiv (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11ALPHA_EQUIVE"]], "proofrule::and_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule8AND_ELIME"]], "proofrule::and_intro (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9AND_INTROE"]], "proofrule::annotation (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10ANNOTATIONE"]], "proofrule::arith_mult_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14ARITH_MULT_NEGE"]], "proofrule::arith_mult_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14ARITH_MULT_POSE"]], "proofrule::arith_mult_sign (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule15ARITH_MULT_SIGNE"]], "proofrule::arith_mult_tangent (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule18ARITH_MULT_TANGENTE"]], "proofrule::arith_nl_covering_direct (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule24ARITH_NL_COVERING_DIRECTE"]], "proofrule::arith_nl_covering_recursive (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule27ARITH_NL_COVERING_RECURSIVEE"]], "proofrule::arith_op_elim_axiom (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule19ARITH_OP_ELIM_AXIOME"]], "proofrule::arith_poly_norm (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule15ARITH_POLY_NORME"]], "proofrule::arith_sum_ub (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12ARITH_SUM_UBE"]], "proofrule::arith_trans_exp_approx_above_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule32ARITH_TRANS_EXP_APPROX_ABOVE_NEGE"]], "proofrule::arith_trans_exp_approx_above_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule32ARITH_TRANS_EXP_APPROX_ABOVE_POSE"]], "proofrule::arith_trans_exp_approx_below (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule28ARITH_TRANS_EXP_APPROX_BELOWE"]], "proofrule::arith_trans_exp_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule19ARITH_TRANS_EXP_NEGE"]], "proofrule::arith_trans_exp_positivity (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule26ARITH_TRANS_EXP_POSITIVITYE"]], "proofrule::arith_trans_exp_super_lin (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule25ARITH_TRANS_EXP_SUPER_LINE"]], "proofrule::arith_trans_exp_zero (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule20ARITH_TRANS_EXP_ZEROE"]], "proofrule::arith_trans_pi (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14ARITH_TRANS_PIE"]], "proofrule::arith_trans_sine_approx_above_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_ABOVE_NEGE"]], "proofrule::arith_trans_sine_approx_above_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_ABOVE_POSE"]], "proofrule::arith_trans_sine_approx_below_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_BELOW_NEGE"]], "proofrule::arith_trans_sine_approx_below_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule33ARITH_TRANS_SINE_APPROX_BELOW_POSE"]], "proofrule::arith_trans_sine_bounds (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule23ARITH_TRANS_SINE_BOUNDSE"]], "proofrule::arith_trans_sine_shift (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule22ARITH_TRANS_SINE_SHIFTE"]], "proofrule::arith_trans_sine_symmetry (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule25ARITH_TRANS_SINE_SYMMETRYE"]], "proofrule::arith_trans_sine_tangent_pi (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule27ARITH_TRANS_SINE_TANGENT_PIE"]], "proofrule::arith_trans_sine_tangent_zero (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule29ARITH_TRANS_SINE_TANGENT_ZEROE"]], "proofrule::arith_trichotomy (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16ARITH_TRICHOTOMYE"]], "proofrule::arrays_eq_range_expand (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule22ARRAYS_EQ_RANGE_EXPANDE"]], "proofrule::arrays_ext (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10ARRAYS_EXTE"]], "proofrule::arrays_read_over_write (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule22ARRAYS_READ_OVER_WRITEE"]], "proofrule::arrays_read_over_write_1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule24ARRAYS_READ_OVER_WRITE_1E"]], "proofrule::arrays_read_over_write_contra (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule29ARRAYS_READ_OVER_WRITE_CONTRAE"]], "proofrule::assume (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule6ASSUMEE"]], "proofrule::beta_reduce (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11BETA_REDUCEE"]], "proofrule::bv_bitblast_step (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16BV_BITBLAST_STEPE"]], "proofrule::bv_eager_atom (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13BV_EAGER_ATOME"]], "proofrule::chain_resolution (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16CHAIN_RESOLUTIONE"]], "proofrule::cnf_and_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11CNF_AND_NEGE"]], "proofrule::cnf_and_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11CNF_AND_POSE"]], "proofrule::cnf_equiv_neg1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_NEG1E"]], "proofrule::cnf_equiv_neg2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_NEG2E"]], "proofrule::cnf_equiv_pos1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_POS1E"]], "proofrule::cnf_equiv_pos2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14CNF_EQUIV_POS2E"]], "proofrule::cnf_implies_neg1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16CNF_IMPLIES_NEG1E"]], "proofrule::cnf_implies_neg2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16CNF_IMPLIES_NEG2E"]], "proofrule::cnf_implies_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule15CNF_IMPLIES_POSE"]], "proofrule::cnf_ite_neg1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_ITE_NEG1E"]], "proofrule::cnf_ite_neg2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_ITE_NEG2E"]], "proofrule::cnf_ite_neg3 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_ITE_NEG3E"]], "proofrule::cnf_ite_pos1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_ITE_POS1E"]], "proofrule::cnf_ite_pos2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_ITE_POS2E"]], "proofrule::cnf_ite_pos3 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_ITE_POS3E"]], "proofrule::cnf_or_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10CNF_OR_NEGE"]], "proofrule::cnf_or_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10CNF_OR_POSE"]], "proofrule::cnf_xor_neg1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_XOR_NEG1E"]], "proofrule::cnf_xor_neg2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_XOR_NEG2E"]], "proofrule::cnf_xor_pos1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_XOR_POS1E"]], "proofrule::cnf_xor_pos2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CNF_XOR_POS2E"]], "proofrule::concat_conflict (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule15CONCAT_CONFLICTE"]], "proofrule::concat_cprop (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CONCAT_CPROPE"]], "proofrule::concat_csplit (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13CONCAT_CSPLITE"]], "proofrule::concat_eq (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9CONCAT_EQE"]], "proofrule::concat_lprop (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CONCAT_LPROPE"]], "proofrule::concat_split (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CONCAT_SPLITE"]], "proofrule::concat_unify (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12CONCAT_UNIFYE"]], "proofrule::cong (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule4CONGE"]], "proofrule::contra (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule6CONTRAE"]], "proofrule::dsl_rewrite (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11DSL_REWRITEE"]], "proofrule::dt_clash (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule8DT_CLASHE"]], "proofrule::dt_collapse (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11DT_COLLAPSEE"]], "proofrule::dt_inst (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule7DT_INSTE"]], "proofrule::dt_split (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule8DT_SPLITE"]], "proofrule::dt_unif (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule7DT_UNIFE"]], "proofrule::encode_pred_transform (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule21ENCODE_PRED_TRANSFORME"]], "proofrule::equiv_elim1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11EQUIV_ELIM1E"]], "proofrule::equiv_elim2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11EQUIV_ELIM2E"]], "proofrule::eq_resolve (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10EQ_RESOLVEE"]], "proofrule::evaluate (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule8EVALUATEE"]], "proofrule::factoring (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9FACTORINGE"]], "proofrule::false_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10FALSE_ELIME"]], "proofrule::false_intro (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11FALSE_INTROE"]], "proofrule::ho_app_encode (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13HO_APP_ENCODEE"]], "proofrule::ho_cong (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule7HO_CONGE"]], "proofrule::implies_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12IMPLIES_ELIME"]], "proofrule::instantiate (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11INSTANTIATEE"]], "proofrule::int_tight_lb (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12INT_TIGHT_LBE"]], "proofrule::int_tight_ub (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12INT_TIGHT_UBE"]], "proofrule::ite_elim1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9ITE_ELIM1E"]], "proofrule::ite_elim2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9ITE_ELIM2E"]], "proofrule::lfsc_rule (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9LFSC_RULEE"]], "proofrule::macro_arith_scale_sum_ub (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule24MACRO_ARITH_SCALE_SUM_UBE"]], "proofrule::macro_bv_bitblast (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule17MACRO_BV_BITBLASTE"]], "proofrule::macro_resolution (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16MACRO_RESOLUTIONE"]], "proofrule::macro_resolution_trust (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule22MACRO_RESOLUTION_TRUSTE"]], "proofrule::macro_rewrite (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13MACRO_REWRITEE"]], "proofrule::macro_sr_eq_intro (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule17MACRO_SR_EQ_INTROE"]], "proofrule::macro_sr_pred_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule18MACRO_SR_PRED_ELIME"]], "proofrule::macro_sr_pred_intro (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule19MACRO_SR_PRED_INTROE"]], "proofrule::macro_sr_pred_transform (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule23MACRO_SR_PRED_TRANSFORME"]], "proofrule::macro_string_inference (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule22MACRO_STRING_INFERENCEE"]], "proofrule::modus_ponens (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12MODUS_PONENSE"]], "proofrule::not_and (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule7NOT_ANDE"]], "proofrule::not_equiv_elim1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule15NOT_EQUIV_ELIM1E"]], "proofrule::not_equiv_elim2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule15NOT_EQUIV_ELIM2E"]], "proofrule::not_implies_elim1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule17NOT_IMPLIES_ELIM1E"]], "proofrule::not_implies_elim2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule17NOT_IMPLIES_ELIM2E"]], "proofrule::not_ite_elim1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13NOT_ITE_ELIM1E"]], "proofrule::not_ite_elim2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13NOT_ITE_ELIM2E"]], "proofrule::not_not_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12NOT_NOT_ELIME"]], "proofrule::not_or_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule11NOT_OR_ELIME"]], "proofrule::not_xor_elim1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13NOT_XOR_ELIM1E"]], "proofrule::not_xor_elim2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13NOT_XOR_ELIM2E"]], "proofrule::refl (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule4REFLE"]], "proofrule::remove_term_formula_axiom (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule25REMOVE_TERM_FORMULA_AXIOME"]], "proofrule::reordering (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10REORDERINGE"]], "proofrule::resolution (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10RESOLUTIONE"]], "proofrule::re_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule7RE_ELIME"]], "proofrule::re_inter (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule8RE_INTERE"]], "proofrule::re_unfold_neg (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13RE_UNFOLD_NEGE"]], "proofrule::re_unfold_neg_concat_fixed (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule26RE_UNFOLD_NEG_CONCAT_FIXEDE"]], "proofrule::re_unfold_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule13RE_UNFOLD_POSE"]], "proofrule::sat_refutation (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule14SAT_REFUTATIONE"]], "proofrule::scope (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule5SCOPEE"]], "proofrule::skolemize (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9SKOLEMIZEE"]], "proofrule::skolem_intro (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule12SKOLEM_INTROE"]], "proofrule::split (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule5SPLITE"]], "proofrule::string_code_inj (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule15STRING_CODE_INJE"]], "proofrule::string_decompose (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16STRING_DECOMPOSEE"]], "proofrule::string_eager_reduction (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule22STRING_EAGER_REDUCTIONE"]], "proofrule::string_length_non_empty (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule23STRING_LENGTH_NON_EMPTYE"]], "proofrule::string_length_pos (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule17STRING_LENGTH_POSE"]], "proofrule::string_reduction (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule16STRING_REDUCTIONE"]], "proofrule::string_seq_unit_inj (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule19STRING_SEQ_UNIT_INJE"]], "proofrule::subs (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule4SUBSE"]], "proofrule::symm (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule4SYMME"]], "proofrule::trans (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule5TRANSE"]], "proofrule::true_elim (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9TRUE_ELIME"]], "proofrule::true_intro (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule10TRUE_INTROE"]], "proofrule::trust (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule5TRUSTE"]], "proofrule::trust_theory_rewrite (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule20TRUST_THEORY_REWRITEE"]], "proofrule::unknown (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule7UNKNOWNE"]], "proofrule::xor_elim1 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9XOR_ELIM1E"]], "proofrule::xor_elim2 (c++ enumerator)": [[96, "_CPPv4N4cvc59ProofRule9XOR_ELIM2E"]]}})